{
  "schemas": [
    {
      "type": "postgres",
      "name": "information_schema",
      "procs": [
        {
          "type": "function",
          "name": "_pg_char_max_length",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $2 = -1 /* default typmod */\n       THEN null\n       WHEN $1 IN (1042, 1043) /* char, varchar */\n       THEN $2 - 4\n       WHEN $1 IN (1560, 1562) /* bit, varbit */\n       THEN $2\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_char_octet_length",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $1 IN (25, 1042, 1043) /* text, char, varchar */\n       THEN CASE WHEN $2 = -1 /* default typmod */\n                 THEN CAST(2^30 AS integer)\n                 ELSE information_schema._pg_char_max_length($1, $2) *\n                      pg_catalog.pg_encoding_max_length((SELECT encoding FROM pg_catalog.pg_database WHERE datname = pg_catalog.current_database()))\n            END\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_datetime_precision",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $1 IN (1082) /* date */\n           THEN 0\n       WHEN $1 IN (1083, 1114, 1184, 1266) /* time, timestamp, same + tz */\n           THEN CASE WHEN $2 \u003c 0 THEN 6 ELSE $2 END\n       WHEN $1 IN (1186) /* interval */\n           THEN CASE WHEN $2 \u003c 0 OR $2 \u0026 65535 = 65535 THEN 6 ELSE $2 \u0026 65535 END\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_expandarray",
          "params": [
            {
              "name": "p0",
              "datatype": {
                "type": "anyarray"
              }
            }
          ],
          "return": [
            {
              "name": "x",
              "datatype": {
                "type": "anyelement"
              }
            },
            {
              "name": "n",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "select $1[s], s - pg_catalog.array_lower($1,1) + 1\n        from pg_catalog.generate_series(pg_catalog.array_lower($1,1),\n                                        pg_catalog.array_upper($1,1),\n                                        1) as g(s)"
        },
        {
          "type": "function",
          "name": "_pg_index_position",
          "params": [
            {
              "name": "p0",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "p1",
              "datatype": {
                "type": "smallint"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT (ss.a).n FROM\n  (SELECT information_schema._pg_expandarray(indkey) AS a\n   FROM pg_catalog.pg_index WHERE indexrelid = $1) ss\n  WHERE (ss.a).x = $2;"
        },
        {
          "type": "function",
          "name": "_pg_interval_type",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "mod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "text"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $1 IN (1186) /* interval */\n           THEN pg_catalog.upper(substring(pg_catalog.format_type($1, $2) from 'interval[()0-9]* #\"%#\"' for '#'))\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_numeric_precision",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE $1\n         WHEN 21 /*int2*/ THEN 16\n         WHEN 23 /*int4*/ THEN 32\n         WHEN 20 /*int8*/ THEN 64\n         WHEN 1700 /*numeric*/ THEN\n              CASE WHEN $2 = -1\n                   THEN null\n                   ELSE (($2 - 4) \u003e\u003e 16) \u0026 65535\n                   END\n         WHEN 700 /*float4*/ THEN 24 /*FLT_MANT_DIG*/\n         WHEN 701 /*float8*/ THEN 53 /*DBL_MANT_DIG*/\n         ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_numeric_precision_radix",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $1 IN (21, 23, 20, 700, 701) THEN 2\n       WHEN $1 IN (1700) THEN 10\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_numeric_scale",
          "params": [
            {
              "name": "typid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "typmod",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT\n  CASE WHEN $1 IN (21, 23, 20) THEN 0\n       WHEN $1 IN (1700) THEN\n            CASE WHEN $2 = -1\n                 THEN null\n                 ELSE ($2 - 4) \u0026 65535\n                 END\n       ELSE null\n  END"
        },
        {
          "type": "function",
          "name": "_pg_truetypid",
          "params": [
            {
              "name": "p0",
              "datatype": {
                "type": "pg_attribute"
              }
            },
            {
              "name": "p1",
              "datatype": {
                "type": "pg_type"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "oid"
              }
            }
          ],
          "definition": "SELECT CASE WHEN $2.typtype = 'd' THEN $2.typbasetype ELSE $1.atttypid END"
        },
        {
          "type": "function",
          "name": "_pg_truetypmod",
          "params": [
            {
              "name": "p0",
              "datatype": {
                "type": "pg_attribute"
              }
            },
            {
              "name": "p1",
              "datatype": {
                "type": "pg_type"
              }
            }
          ],
          "return": [
            {
              "name": "r0",
              "datatype": {
                "type": "integer"
              }
            }
          ],
          "definition": "SELECT CASE WHEN $2.typtype = 'd' THEN $2.typtypmod ELSE $1.atttypmod END"
        }
      ],
      "tables": [
        {
          "type": "table",
          "name": "sql_features",
          "columns": [
            {
              "name": "tableoid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "cmax",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmax",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "cmin",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmin",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "ctid",
              "datatype": {
                "type": "tid"
              }
            },
            {
              "name": "feature_id",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "feature_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "sub_feature_id",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "sub_feature_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_supported",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_verified_by",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "comments",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true
        },
        {
          "type": "table",
          "name": "sql_implementation_info",
          "columns": [
            {
              "name": "tableoid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "cmax",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmax",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "cmin",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmin",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "ctid",
              "datatype": {
                "type": "tid"
              }
            },
            {
              "name": "implementation_info_id",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "implementation_info_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "integer_value",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "comments",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true
        },
        {
          "type": "table",
          "name": "sql_parts",
          "columns": [
            {
              "name": "tableoid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "cmax",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmax",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "cmin",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmin",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "ctid",
              "datatype": {
                "type": "tid"
              }
            },
            {
              "name": "feature_id",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "feature_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_supported",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_verified_by",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "comments",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true
        },
        {
          "type": "table",
          "name": "sql_sizing",
          "columns": [
            {
              "name": "tableoid",
              "datatype": {
                "type": "oid"
              }
            },
            {
              "name": "cmax",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmax",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "cmin",
              "datatype": {
                "type": "cid"
              }
            },
            {
              "name": "xmin",
              "datatype": {
                "type": "xid"
              }
            },
            {
              "name": "ctid",
              "datatype": {
                "type": "tid"
              }
            },
            {
              "name": "sizing_id",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "sizing_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "supported_value",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "comments",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true
        }
      ],
      "views": [
        {
          "type": "view",
          "name": "_pg_foreign_data_wrappers",
          "columns": [
            {
              "name": "oid",
              "datatype": {
                "type": "oid",
                "nullable": true
              }
            },
            {
              "name": "fdwowner",
              "datatype": {
                "type": "oid",
                "nullable": true
              }
            },
            {
              "name": "fdwoptions",
              "datatype": {
                "type": "text",
                "nullable": true,
                "array": true
              }
            },
            {
              "name": "foreign_data_wrapper_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_language",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT w.oid,\n    w.fdwowner,\n    w.fdwoptions,\n    (current_database())::information_schema.sql_identifier AS foreign_data_wrapper_catalog,\n    (w.fdwname)::information_schema.sql_identifier AS foreign_data_wrapper_name,\n    (u.rolname)::information_schema.sql_identifier AS authorization_identifier,\n    ('c'::character varying)::information_schema.character_data AS foreign_data_wrapper_language\n   FROM pg_foreign_data_wrapper w,\n    pg_authid u\n  WHERE ((u.oid = w.fdwowner) AND (pg_has_role(w.fdwowner, 'USAGE'::text) OR has_foreign_data_wrapper_privilege(w.oid, 'USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "_pg_foreign_servers",
          "columns": [
            {
              "name": "oid",
              "datatype": {
                "type": "oid",
                "nullable": true
              }
            },
            {
              "name": "srvoptions",
              "datatype": {
                "type": "text",
                "nullable": true,
                "array": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_version",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT s.oid,\n    s.srvoptions,\n    (current_database())::information_schema.sql_identifier AS foreign_server_catalog,\n    (s.srvname)::information_schema.sql_identifier AS foreign_server_name,\n    (current_database())::information_schema.sql_identifier AS foreign_data_wrapper_catalog,\n    (w.fdwname)::information_schema.sql_identifier AS foreign_data_wrapper_name,\n    (s.srvtype)::information_schema.character_data AS foreign_server_type,\n    (s.srvversion)::information_schema.character_data AS foreign_server_version,\n    (u.rolname)::information_schema.sql_identifier AS authorization_identifier\n   FROM pg_foreign_server s,\n    pg_foreign_data_wrapper w,\n    pg_authid u\n  WHERE ((w.oid = s.srvfdw) AND (u.oid = s.srvowner) AND (pg_has_role(s.srvowner, 'USAGE'::text) OR has_server_privilege(s.oid, 'USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "_pg_foreign_table_columns",
          "columns": [
            {
              "name": "nspname",
              "datatype": {
                "type": "name",
                "nullable": true
              }
            },
            {
              "name": "relname",
              "datatype": {
                "type": "name",
                "nullable": true
              }
            },
            {
              "name": "attname",
              "datatype": {
                "type": "name",
                "nullable": true
              }
            },
            {
              "name": "attfdwoptions",
              "datatype": {
                "type": "text",
                "nullable": true,
                "array": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT n.nspname,\n    c.relname,\n    a.attname,\n    a.attfdwoptions\n   FROM pg_foreign_table t,\n    pg_authid u,\n    pg_namespace n,\n    pg_class c,\n    pg_attribute a\n  WHERE ((u.oid = c.relowner) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)) AND (n.oid = c.relnamespace) AND (c.oid = t.ftrelid) AND (c.relkind = 'f'::\"char\") AND (a.attrelid = c.oid) AND (a.attnum \u003e 0));"
        },
        {
          "type": "view",
          "name": "_pg_foreign_tables",
          "columns": [
            {
              "name": "foreign_table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ftoptions",
              "datatype": {
                "type": "text",
                "nullable": true,
                "array": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS foreign_table_catalog,\n    (n.nspname)::information_schema.sql_identifier AS foreign_table_schema,\n    (c.relname)::information_schema.sql_identifier AS foreign_table_name,\n    t.ftoptions,\n    (current_database())::information_schema.sql_identifier AS foreign_server_catalog,\n    (s.srvname)::information_schema.sql_identifier AS foreign_server_name,\n    (u.rolname)::information_schema.sql_identifier AS authorization_identifier\n   FROM pg_foreign_table t,\n    pg_foreign_server s,\n    pg_foreign_data_wrapper w,\n    pg_authid u,\n    pg_namespace n,\n    pg_class c\n  WHERE ((w.oid = s.srvfdw) AND (u.oid = c.relowner) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)) AND (n.oid = c.relnamespace) AND (c.oid = t.ftrelid) AND (c.relkind = 'f'::\"char\") AND (s.oid = t.ftserver));"
        },
        {
          "type": "view",
          "name": "_pg_user_mappings",
          "columns": [
            {
              "name": "oid",
              "datatype": {
                "type": "oid",
                "nullable": true
              }
            },
            {
              "name": "umoptions",
              "datatype": {
                "type": "text",
                "nullable": true,
                "array": true
              }
            },
            {
              "name": "umuser",
              "datatype": {
                "type": "oid",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "srvowner",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT um.oid,\n    um.umoptions,\n    um.umuser,\n    (COALESCE(u.rolname, 'PUBLIC'::name))::information_schema.sql_identifier AS authorization_identifier,\n    s.foreign_server_catalog,\n    s.foreign_server_name,\n    s.authorization_identifier AS srvowner\n   FROM (pg_user_mapping um\n     LEFT JOIN pg_authid u ON ((u.oid = um.umuser))),\n    information_schema._pg_foreign_servers s\n  WHERE (s.oid = um.umserver);"
        },
        {
          "type": "view",
          "name": "administrable_role_authorizations",
          "columns": [
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "role_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT applicable_roles.grantee,\n    applicable_roles.role_name,\n    applicable_roles.is_grantable\n   FROM information_schema.applicable_roles\n  WHERE ((applicable_roles.is_grantable)::text = 'YES'::text);"
        },
        {
          "type": "view",
          "name": "applicable_roles",
          "columns": [
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "role_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (a.rolname)::information_schema.sql_identifier AS grantee,\n    (b.rolname)::information_schema.sql_identifier AS role_name,\n    (\n        CASE\n            WHEN m.admin_option THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ((pg_auth_members m\n     JOIN pg_authid a ON ((m.member = a.oid)))\n     JOIN pg_authid b ON ((m.roleid = b.oid)))\n  WHERE pg_has_role(a.oid, 'USAGE'::text);"
        },
        {
          "type": "view",
          "name": "attributes",
          "columns": [
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "attribute_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordinal_position",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "attribute_default",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_nullable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "attribute_udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "attribute_udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "attribute_udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_derived_reference_attribute",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS udt_schema,\n    (c.relname)::information_schema.sql_identifier AS udt_name,\n    (a.attname)::information_schema.sql_identifier AS attribute_name,\n    (a.attnum)::information_schema.cardinal_number AS ordinal_position,\n    (pg_get_expr(ad.adbin, ad.adrelid))::information_schema.character_data AS attribute_default,\n    (\n        CASE\n            WHEN (a.attnotnull OR ((t.typtype = 'd'::\"char\") AND t.typnotnull)) THEN 'NO'::text\n            ELSE 'YES'::text\n        END)::information_schema.yes_or_no AS is_nullable,\n    (\n        CASE\n            WHEN ((t.typelem \u003c\u003e (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(a.atttypid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_maximum_length,\n    (information_schema._pg_char_octet_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (\n        CASE\n            WHEN (nco.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS collation_catalog,\n    (nco.nspname)::information_schema.sql_identifier AS collation_schema,\n    (co.collname)::information_schema.sql_identifier AS collation_name,\n    (information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision,\n    (information_schema._pg_numeric_precision_radix(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision_radix,\n    (information_schema._pg_numeric_scale(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_scale,\n    (information_schema._pg_datetime_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS datetime_precision,\n    (information_schema._pg_interval_type(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (current_database())::information_schema.sql_identifier AS attribute_udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS attribute_udt_schema,\n    (t.typname)::information_schema.sql_identifier AS attribute_udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (a.attnum)::information_schema.sql_identifier AS dtd_identifier,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_derived_reference_attribute\n   FROM ((((pg_attribute a\n     LEFT JOIN pg_attrdef ad ON (((a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))))\n     JOIN (pg_class c\n     JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))) ON ((a.attrelid = c.oid)))\n     JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))\n     LEFT JOIN (pg_collation co\n     JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON (((a.attcollation = co.oid) AND ((nco.nspname \u003c\u003e 'pg_catalog'::name) OR (co.collname \u003c\u003e 'default'::name)))))\n  WHERE ((a.attnum \u003e 0) AND (NOT a.attisdropped) AND (c.relkind = 'c'::\"char\") AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_type_privilege(c.reltype, 'USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "character_sets",
          "columns": [
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_repertoire",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "form_of_use",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_collate_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_collate_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_collate_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (getdatabaseencoding())::information_schema.sql_identifier AS character_set_name,\n    (\n        CASE\n            WHEN (getdatabaseencoding() = 'UTF8'::name) THEN 'UCS'::name\n            ELSE getdatabaseencoding()\n        END)::information_schema.sql_identifier AS character_repertoire,\n    (getdatabaseencoding())::information_schema.sql_identifier AS form_of_use,\n    (current_database())::information_schema.sql_identifier AS default_collate_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS default_collate_schema,\n    (c.collname)::information_schema.sql_identifier AS default_collate_name\n   FROM (pg_database d\n     LEFT JOIN (pg_collation c\n     JOIN pg_namespace nc ON ((c.collnamespace = nc.oid))) ON (((d.datcollate = c.collcollate) AND (d.datctype = c.collctype))))\n  WHERE (d.datname = current_database())\n  ORDER BY (char_length((c.collname)::text)) DESC, c.collname\n LIMIT 1;"
        },
        {
          "type": "view",
          "name": "check_constraint_routine_usage",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (c.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (np.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name\n   FROM pg_namespace nc,\n    pg_constraint c,\n    pg_depend d,\n    pg_proc p,\n    pg_namespace np\n  WHERE ((nc.oid = c.connamespace) AND (c.contype = 'c'::\"char\") AND (c.oid = d.objid) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.refobjid = p.oid) AND (d.refclassid = ('pg_proc'::regclass)::oid) AND (p.pronamespace = np.oid) AND pg_has_role(p.proowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "check_constraints",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "check_clause",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (rs.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (con.conname)::information_schema.sql_identifier AS constraint_name,\n    (\"substring\"(pg_get_constraintdef(con.oid), 7))::information_schema.character_data AS check_clause\n   FROM (((pg_constraint con\n     LEFT JOIN pg_namespace rs ON ((rs.oid = con.connamespace)))\n     LEFT JOIN pg_class c ON ((c.oid = con.conrelid)))\n     LEFT JOIN pg_type t ON ((t.oid = con.contypid)))\n  WHERE (pg_has_role(COALESCE(c.relowner, t.typowner), 'USAGE'::text) AND (con.contype = 'c'::\"char\"))\nUNION\n SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (n.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (((((((n.oid)::text || '_'::text) || (r.oid)::text) || '_'::text) || (a.attnum)::text) || '_not_null'::text))::information_schema.sql_identifier AS constraint_name,\n    (((a.attname)::text || ' IS NOT NULL'::text))::information_schema.character_data AS check_clause\n   FROM pg_namespace n,\n    pg_class r,\n    pg_attribute a\n  WHERE ((n.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (a.attnum \u003e 0) AND (NOT a.attisdropped) AND a.attnotnull AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND pg_has_role(r.relowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "collation_character_set_applicability",
          "columns": [
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS collation_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS collation_schema,\n    (c.collname)::information_schema.sql_identifier AS collation_name,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (getdatabaseencoding())::information_schema.sql_identifier AS character_set_name\n   FROM pg_collation c,\n    pg_namespace nc\n  WHERE ((c.collnamespace = nc.oid) AND (c.collencoding = ANY (ARRAY['-1'::integer, ( SELECT pg_database.encoding\n           FROM pg_database\n          WHERE (pg_database.datname = current_database()))])));"
        },
        {
          "type": "view",
          "name": "collations",
          "columns": [
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "pad_attribute",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS collation_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS collation_schema,\n    (c.collname)::information_schema.sql_identifier AS collation_name,\n    ('NO PAD'::character varying)::information_schema.character_data AS pad_attribute\n   FROM pg_collation c,\n    pg_namespace nc\n  WHERE ((c.collnamespace = nc.oid) AND (c.collencoding = ANY (ARRAY['-1'::integer, ( SELECT pg_database.encoding\n           FROM pg_database\n          WHERE (pg_database.datname = current_database()))])));"
        },
        {
          "type": "view",
          "name": "column_column_usage",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "dependent_column",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (n.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (ac.attname)::information_schema.sql_identifier AS column_name,\n    (ad.attname)::information_schema.sql_identifier AS dependent_column\n   FROM pg_namespace n,\n    pg_class c,\n    pg_depend d,\n    pg_attribute ac,\n    pg_attribute ad\n  WHERE ((n.oid = c.relnamespace) AND (c.oid = ac.attrelid) AND (c.oid = ad.attrelid) AND (d.classid = ('pg_class'::regclass)::oid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.objid = d.refobjid) AND (c.oid = d.objid) AND (d.objsubid = ad.attnum) AND (d.refobjsubid = ac.attnum) AND (ad.attgenerated \u003c\u003e ''::\"char\") AND pg_has_role(c.relowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "column_domain_usage",
          "columns": [
            {
              "name": "domain_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS domain_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS domain_schema,\n    (t.typname)::information_schema.sql_identifier AS domain_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name\n   FROM pg_type t,\n    pg_namespace nt,\n    pg_class c,\n    pg_namespace nc,\n    pg_attribute a\n  WHERE ((t.typnamespace = nt.oid) AND (c.relnamespace = nc.oid) AND (a.attrelid = c.oid) AND (a.atttypid = t.oid) AND (t.typtype = 'd'::\"char\") AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (a.attnum \u003e 0) AND (NOT a.attisdropped) AND pg_has_role(t.typowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "column_options",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (c.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (c.attname)::information_schema.sql_identifier AS column_name,\n    ((pg_options_to_table(c.attfdwoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(c.attfdwoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_table_columns c;"
        },
        {
          "type": "view",
          "name": "column_privileges",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (x.relname)::information_schema.sql_identifier AS table_name,\n    (x.attname)::information_schema.sql_identifier AS column_name,\n    (x.prtype)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(x.grantee, x.relowner, 'USAGE'::text) OR x.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pr_c.grantor,\n            pr_c.grantee,\n            a.attname,\n            pr_c.relname,\n            pr_c.relnamespace,\n            pr_c.prtype,\n            pr_c.grantable,\n            pr_c.relowner\n           FROM ( SELECT pg_class.oid,\n                    pg_class.relname,\n                    pg_class.relnamespace,\n                    pg_class.relowner,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantor AS grantor,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantee AS grantee,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).privilege_type AS privilege_type,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).is_grantable AS is_grantable\n                   FROM pg_class\n                  WHERE (pg_class.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"]))) pr_c(oid, relname, relnamespace, relowner, grantor, grantee, prtype, grantable),\n            pg_attribute a\n          WHERE ((a.attrelid = pr_c.oid) AND (a.attnum \u003e 0) AND (NOT a.attisdropped))\n        UNION\n         SELECT pr_a.grantor,\n            pr_a.grantee,\n            pr_a.attname,\n            c.relname,\n            c.relnamespace,\n            pr_a.prtype,\n            pr_a.grantable,\n            c.relowner\n           FROM ( SELECT a.attrelid,\n                    a.attname,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).grantor AS grantor,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).grantee AS grantee,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).privilege_type AS privilege_type,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).is_grantable AS is_grantable\n                   FROM (pg_attribute a\n                     JOIN pg_class cc ON ((a.attrelid = cc.oid)))\n                  WHERE ((a.attnum \u003e 0) AND (NOT a.attisdropped))) pr_a(attrelid, attname, grantor, grantee, prtype, grantable),\n            pg_class c\n          WHERE ((pr_a.attrelid = c.oid) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])))) x,\n    pg_namespace nc,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((x.relnamespace = nc.oid) AND (x.grantee = grantee.oid) AND (x.grantor = u_grantor.oid) AND (x.prtype = ANY (ARRAY['INSERT'::text, 'SELECT'::text, 'UPDATE'::text, 'REFERENCES'::text])) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"
        },
        {
          "type": "view",
          "name": "column_udt_usage",
          "columns": [
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (COALESCE(nbt.nspname, nt.nspname))::information_schema.sql_identifier AS udt_schema,\n    (COALESCE(bt.typname, t.typname))::information_schema.sql_identifier AS udt_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name\n   FROM pg_attribute a,\n    pg_class c,\n    pg_namespace nc,\n    ((pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))\n     LEFT JOIN (pg_type bt\n     JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON (((t.typtype = 'd'::\"char\") AND (t.typbasetype = bt.oid))))\n  WHERE ((a.attrelid = c.oid) AND (a.atttypid = t.oid) AND (nc.oid = c.relnamespace) AND (a.attnum \u003e 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND pg_has_role(COALESCE(bt.typowner, t.typowner), 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "columns",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordinal_position",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "column_default",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_nullable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_self_referencing",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_identity",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "identity_generation",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "identity_start",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "identity_increment",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "identity_maximum",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "identity_minimum",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "identity_cycle",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_generated",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "generation_expression",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_updatable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name,\n    (a.attnum)::information_schema.cardinal_number AS ordinal_position,\n    (\n        CASE\n            WHEN (a.attgenerated = ''::\"char\") THEN pg_get_expr(ad.adbin, ad.adrelid)\n            ELSE NULL::text\n        END)::information_schema.character_data AS column_default,\n    (\n        CASE\n            WHEN (a.attnotnull OR ((t.typtype = 'd'::\"char\") AND t.typnotnull)) THEN 'NO'::text\n            ELSE 'YES'::text\n        END)::information_schema.yes_or_no AS is_nullable,\n    (\n        CASE\n            WHEN (t.typtype = 'd'::\"char\") THEN\n            CASE\n                WHEN ((bt.typelem \u003c\u003e (0)::oid) AND (bt.typlen = '-1'::integer)) THEN 'ARRAY'::text\n                WHEN (nbt.nspname = 'pg_catalog'::name) THEN format_type(t.typbasetype, NULL::integer)\n                ELSE 'USER-DEFINED'::text\n            END\n            ELSE\n            CASE\n                WHEN ((t.typelem \u003c\u003e (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n                WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(a.atttypid, NULL::integer)\n                ELSE 'USER-DEFINED'::text\n            END\n        END)::information_schema.character_data AS data_type,\n    (information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_maximum_length,\n    (information_schema._pg_char_octet_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_octet_length,\n    (information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision,\n    (information_schema._pg_numeric_precision_radix(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision_radix,\n    (information_schema._pg_numeric_scale(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_scale,\n    (information_schema._pg_datetime_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS datetime_precision,\n    (information_schema._pg_interval_type(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (\n        CASE\n            WHEN (nco.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS collation_catalog,\n    (nco.nspname)::information_schema.sql_identifier AS collation_schema,\n    (co.collname)::information_schema.sql_identifier AS collation_name,\n    (\n        CASE\n            WHEN (t.typtype = 'd'::\"char\") THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS domain_catalog,\n    (\n        CASE\n            WHEN (t.typtype = 'd'::\"char\") THEN nt.nspname\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS domain_schema,\n    (\n        CASE\n            WHEN (t.typtype = 'd'::\"char\") THEN t.typname\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS domain_name,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (COALESCE(nbt.nspname, nt.nspname))::information_schema.sql_identifier AS udt_schema,\n    (COALESCE(bt.typname, t.typname))::information_schema.sql_identifier AS udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (a.attnum)::information_schema.sql_identifier AS dtd_identifier,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_self_referencing,\n    (\n        CASE\n            WHEN (a.attidentity = ANY (ARRAY['a'::\"char\", 'd'::\"char\"])) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_identity,\n    (\n        CASE a.attidentity\n            WHEN 'a'::\"char\" THEN 'ALWAYS'::text\n            WHEN 'd'::\"char\" THEN 'BY DEFAULT'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS identity_generation,\n    (seq.seqstart)::information_schema.character_data AS identity_start,\n    (seq.seqincrement)::information_schema.character_data AS identity_increment,\n    (seq.seqmax)::information_schema.character_data AS identity_maximum,\n    (seq.seqmin)::information_schema.character_data AS identity_minimum,\n    (\n        CASE\n            WHEN seq.seqcycle THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS identity_cycle,\n    (\n        CASE\n            WHEN (a.attgenerated \u003c\u003e ''::\"char\") THEN 'ALWAYS'::text\n            ELSE 'NEVER'::text\n        END)::information_schema.character_data AS is_generated,\n    (\n        CASE\n            WHEN (a.attgenerated \u003c\u003e ''::\"char\") THEN pg_get_expr(ad.adbin, ad.adrelid)\n            ELSE NULL::text\n        END)::information_schema.character_data AS generation_expression,\n    (\n        CASE\n            WHEN ((c.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) OR ((c.relkind = ANY (ARRAY['v'::\"char\", 'f'::\"char\"])) AND pg_column_is_updatable((c.oid)::regclass, a.attnum, false))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_updatable\n   FROM ((((((pg_attribute a\n     LEFT JOIN pg_attrdef ad ON (((a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))))\n     JOIN (pg_class c\n     JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))) ON ((a.attrelid = c.oid)))\n     JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))\n     LEFT JOIN (pg_type bt\n     JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON (((t.typtype = 'd'::\"char\") AND (t.typbasetype = bt.oid))))\n     LEFT JOIN (pg_collation co\n     JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON (((a.attcollation = co.oid) AND ((nco.nspname \u003c\u003e 'pg_catalog'::name) OR (co.collname \u003c\u003e 'default'::name)))))\n     LEFT JOIN (pg_depend dep\n     JOIN pg_sequence seq ON (((dep.classid = ('pg_class'::regclass)::oid) AND (dep.objid = seq.seqrelid) AND (dep.deptype = 'i'::\"char\")))) ON (((dep.refclassid = ('pg_class'::regclass)::oid) AND (dep.refobjid = c.oid) AND (dep.refobjsubid = a.attnum))))\n  WHERE ((NOT pg_is_other_temp_schema(nc.oid)) AND (a.attnum \u003e 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "constraint_column_usage",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (x.tblschema)::information_schema.sql_identifier AS table_schema,\n    (x.tblname)::information_schema.sql_identifier AS table_name,\n    (x.colname)::information_schema.sql_identifier AS column_name,\n    (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (x.cstrschema)::information_schema.sql_identifier AS constraint_schema,\n    (x.cstrname)::information_schema.sql_identifier AS constraint_name\n   FROM ( SELECT DISTINCT nr.nspname,\n            r.relname,\n            r.relowner,\n            a.attname,\n            nc.nspname,\n            c.conname\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_attribute a,\n            pg_depend d,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::\"char\") AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT a.attisdropped))\n        UNION ALL\n         SELECT nr.nspname,\n            r.relname,\n            r.relowner,\n            a.attname,\n            nc.nspname,\n            c.conname\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_attribute a,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =\n                CASE c.contype\n                    WHEN 'f'::\"char\" THEN c.confrelid\n                    ELSE c.conrelid\n                END) AND (a.attnum = ANY (\n                CASE c.contype\n                    WHEN 'f'::\"char\" THEN c.confkey\n                    ELSE c.conkey\n                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\", 'f'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])))) x(tblschema, tblname, tblowner, colname, cstrschema, cstrname)\n  WHERE pg_has_role(x.tblowner, 'USAGE'::text);"
        },
        {
          "type": "view",
          "name": "constraint_table_usage",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS table_schema,\n    (r.relname)::information_schema.sql_identifier AS table_name,\n    (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (c.conname)::information_schema.sql_identifier AS constraint_name\n   FROM pg_constraint c,\n    pg_namespace nc,\n    pg_class r,\n    pg_namespace nr\n  WHERE ((c.connamespace = nc.oid) AND (r.relnamespace = nr.oid) AND (((c.contype = 'f'::\"char\") AND (c.confrelid = r.oid)) OR ((c.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\"])) AND (c.conrelid = r.oid))) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND pg_has_role(r.relowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "data_type_privileges",
          "columns": [
            {
              "name": "object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS object_catalog,\n    x.objschema AS object_schema,\n    x.objname AS object_name,\n    (x.objtype)::information_schema.character_data AS object_type,\n    x.objdtdid AS dtd_identifier\n   FROM ( SELECT attributes.udt_schema,\n            attributes.udt_name,\n            'USER-DEFINED TYPE'::text AS text,\n            attributes.dtd_identifier\n           FROM information_schema.attributes\n        UNION ALL\n         SELECT columns.table_schema,\n            columns.table_name,\n            'TABLE'::text AS text,\n            columns.dtd_identifier\n           FROM information_schema.columns\n        UNION ALL\n         SELECT domains.domain_schema,\n            domains.domain_name,\n            'DOMAIN'::text AS text,\n            domains.dtd_identifier\n           FROM information_schema.domains\n        UNION ALL\n         SELECT parameters.specific_schema,\n            parameters.specific_name,\n            'ROUTINE'::text AS text,\n            parameters.dtd_identifier\n           FROM information_schema.parameters\n        UNION ALL\n         SELECT routines.specific_schema,\n            routines.specific_name,\n            'ROUTINE'::text AS text,\n            routines.dtd_identifier\n           FROM information_schema.routines) x(objschema, objname, objtype, objdtdid);"
        },
        {
          "type": "view",
          "name": "domain_constraints",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_deferrable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "initially_deferred",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (rs.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (con.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS domain_catalog,\n    (n.nspname)::information_schema.sql_identifier AS domain_schema,\n    (t.typname)::information_schema.sql_identifier AS domain_name,\n    (\n        CASE\n            WHEN con.condeferrable THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_deferrable,\n    (\n        CASE\n            WHEN con.condeferred THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS initially_deferred\n   FROM pg_namespace rs,\n    pg_namespace n,\n    pg_constraint con,\n    pg_type t\n  WHERE ((rs.oid = con.connamespace) AND (n.oid = t.typnamespace) AND (t.oid = con.contypid) AND (pg_has_role(t.typowner, 'USAGE'::text) OR has_type_privilege(t.oid, 'USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "domain_udt_usage",
          "columns": [
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nbt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (bt.typname)::information_schema.sql_identifier AS udt_name,\n    (current_database())::information_schema.sql_identifier AS domain_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS domain_schema,\n    (t.typname)::information_schema.sql_identifier AS domain_name\n   FROM pg_type t,\n    pg_namespace nt,\n    pg_type bt,\n    pg_namespace nbt\n  WHERE ((t.typnamespace = nt.oid) AND (t.typbasetype = bt.oid) AND (bt.typnamespace = nbt.oid) AND (t.typtype = 'd'::\"char\") AND pg_has_role(bt.typowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "domains",
          "columns": [
            {
              "name": "domain_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "domain_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "domain_default",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS domain_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS domain_schema,\n    (t.typname)::information_schema.sql_identifier AS domain_name,\n    (\n        CASE\n            WHEN ((t.typelem \u003c\u003e (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nbt.nspname = 'pg_catalog'::name) THEN format_type(t.typbasetype, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (information_schema._pg_char_max_length(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS character_maximum_length,\n    (information_schema._pg_char_octet_length(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (\n        CASE\n            WHEN (nco.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS collation_catalog,\n    (nco.nspname)::information_schema.sql_identifier AS collation_schema,\n    (co.collname)::information_schema.sql_identifier AS collation_name,\n    (information_schema._pg_numeric_precision(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS numeric_precision,\n    (information_schema._pg_numeric_precision_radix(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS numeric_precision_radix,\n    (information_schema._pg_numeric_scale(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS numeric_scale,\n    (information_schema._pg_datetime_precision(t.typbasetype, t.typtypmod))::information_schema.cardinal_number AS datetime_precision,\n    (information_schema._pg_interval_type(t.typbasetype, t.typtypmod))::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (t.typdefault)::information_schema.character_data AS domain_default,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nbt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (bt.typname)::information_schema.sql_identifier AS udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (1)::information_schema.sql_identifier AS dtd_identifier\n   FROM (((pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))\n     JOIN (pg_type bt\n     JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON (((t.typbasetype = bt.oid) AND (t.typtype = 'd'::\"char\"))))\n     LEFT JOIN (pg_collation co\n     JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON (((t.typcollation = co.oid) AND ((nco.nspname \u003c\u003e 'pg_catalog'::name) OR (co.collname \u003c\u003e 'default'::name)))))\n  WHERE (pg_has_role(t.typowner, 'USAGE'::text) OR has_type_privilege(t.oid, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "element_types",
          "columns": [
            {
              "name": "object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "collection_type_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "domain_default",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    x.objname AS object_name,\n    (x.objtype)::information_schema.character_data AS object_type,\n    (x.objdtdid)::information_schema.sql_identifier AS collection_type_identifier,\n    (\n        CASE\n            WHEN (nbt.nspname = 'pg_catalog'::name) THEN format_type(bt.oid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (\n        CASE\n            WHEN (nco.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS collation_catalog,\n    (nco.nspname)::information_schema.sql_identifier AS collation_schema,\n    (co.collname)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (NULL::character varying)::information_schema.character_data AS domain_default,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nbt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (bt.typname)::information_schema.sql_identifier AS udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (('a'::text || (x.objdtdid)::text))::information_schema.sql_identifier AS dtd_identifier\n   FROM pg_namespace n,\n    pg_type at,\n    pg_namespace nbt,\n    pg_type bt,\n    (( SELECT c.relnamespace,\n            (c.relname)::information_schema.sql_identifier AS relname,\n                CASE\n                    WHEN (c.relkind = 'c'::\"char\") THEN 'USER-DEFINED TYPE'::text\n                    ELSE 'TABLE'::text\n                END AS \"case\",\n            a.attnum,\n            a.atttypid,\n            a.attcollation\n           FROM pg_class c,\n            pg_attribute a\n          WHERE ((c.oid = a.attrelid) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'c'::\"char\", 'p'::\"char\"])) AND (a.attnum \u003e 0) AND (NOT a.attisdropped))\n        UNION ALL\n         SELECT t.typnamespace,\n            (t.typname)::information_schema.sql_identifier AS typname,\n            'DOMAIN'::text AS text,\n            1,\n            t.typbasetype,\n            t.typcollation\n           FROM pg_type t\n          WHERE (t.typtype = 'd'::\"char\")\n        UNION ALL\n         SELECT ss.pronamespace,\n            (nameconcatoid(ss.proname, ss.oid))::information_schema.sql_identifier AS nameconcatoid,\n            'ROUTINE'::text AS text,\n            (ss.x).n AS n,\n            (ss.x).x AS x,\n            0\n           FROM ( SELECT p.pronamespace,\n                    p.proname,\n                    p.oid,\n                    information_schema._pg_expandarray(COALESCE(p.proallargtypes, (p.proargtypes)::oid[])) AS x\n                   FROM pg_proc p) ss\n        UNION ALL\n         SELECT p.pronamespace,\n            (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS nameconcatoid,\n            'ROUTINE'::text AS text,\n            0,\n            p.prorettype,\n            0\n           FROM pg_proc p) x(objschema, objname, objtype, objdtdid, objtypeid, objcollation)\n     LEFT JOIN (pg_collation co\n     JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON (((x.objcollation = co.oid) AND ((nco.nspname \u003c\u003e 'pg_catalog'::name) OR (co.collname \u003c\u003e 'default'::name)))))\n  WHERE ((n.oid = x.objschema) AND (at.oid = x.objtypeid) AND ((at.typelem \u003c\u003e (0)::oid) AND (at.typlen = '-1'::integer)) AND (at.typelem = bt.oid) AND (nbt.oid = bt.typnamespace) AND ((n.nspname, (x.objname)::name, x.objtype, ((x.objdtdid)::information_schema.sql_identifier)::name) IN ( SELECT data_type_privileges.object_schema,\n            data_type_privileges.object_name,\n            data_type_privileges.object_type,\n            data_type_privileges.dtd_identifier\n           FROM information_schema.data_type_privileges)));"
        },
        {
          "type": "view",
          "name": "enabled_roles",
          "columns": [
            {
              "name": "role_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (a.rolname)::information_schema.sql_identifier AS role_name\n   FROM pg_authid a\n  WHERE pg_has_role(a.oid, 'USAGE'::text);"
        },
        {
          "type": "view",
          "name": "foreign_data_wrapper_options",
          "columns": [
            {
              "name": "foreign_data_wrapper_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT w.foreign_data_wrapper_catalog,\n    w.foreign_data_wrapper_name,\n    ((pg_options_to_table(w.fdwoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(w.fdwoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_data_wrappers w;"
        },
        {
          "type": "view",
          "name": "foreign_data_wrappers",
          "columns": [
            {
              "name": "foreign_data_wrapper_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "library_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_language",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT w.foreign_data_wrapper_catalog,\n    w.foreign_data_wrapper_name,\n    w.authorization_identifier,\n    (NULL::character varying)::information_schema.character_data AS library_name,\n    w.foreign_data_wrapper_language\n   FROM information_schema._pg_foreign_data_wrappers w;"
        },
        {
          "type": "view",
          "name": "foreign_server_options",
          "columns": [
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT s.foreign_server_catalog,\n    s.foreign_server_name,\n    ((pg_options_to_table(s.srvoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(s.srvoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_servers s;"
        },
        {
          "type": "view",
          "name": "foreign_servers",
          "columns": [
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_data_wrapper_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_version",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT _pg_foreign_servers.foreign_server_catalog,\n    _pg_foreign_servers.foreign_server_name,\n    _pg_foreign_servers.foreign_data_wrapper_catalog,\n    _pg_foreign_servers.foreign_data_wrapper_name,\n    _pg_foreign_servers.foreign_server_type,\n    _pg_foreign_servers.foreign_server_version,\n    _pg_foreign_servers.authorization_identifier\n   FROM information_schema._pg_foreign_servers;"
        },
        {
          "type": "view",
          "name": "foreign_table_options",
          "columns": [
            {
              "name": "foreign_table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT t.foreign_table_catalog,\n    t.foreign_table_schema,\n    t.foreign_table_name,\n    ((pg_options_to_table(t.ftoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(t.ftoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_tables t;"
        },
        {
          "type": "view",
          "name": "foreign_tables",
          "columns": [
            {
              "name": "foreign_table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT _pg_foreign_tables.foreign_table_catalog,\n    _pg_foreign_tables.foreign_table_schema,\n    _pg_foreign_tables.foreign_table_name,\n    _pg_foreign_tables.foreign_server_catalog,\n    _pg_foreign_tables.foreign_server_name\n   FROM information_schema._pg_foreign_tables;"
        },
        {
          "type": "view",
          "name": "information_schema_catalog_name",
          "columns": [
            {
              "name": "catalog_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS catalog_name;"
        },
        {
          "type": "view",
          "name": "key_column_usage",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordinal_position",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "position_in_unique_constraint",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (ss.nc_nspname)::information_schema.sql_identifier AS constraint_schema,\n    (ss.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (ss.nr_nspname)::information_schema.sql_identifier AS table_schema,\n    (ss.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name,\n    ((ss.x).n)::information_schema.cardinal_number AS ordinal_position,\n    (\n        CASE\n            WHEN (ss.contype = 'f'::\"char\") THEN information_schema._pg_index_position(ss.conindid, ss.confkey[(ss.x).n])\n            ELSE NULL::integer\n        END)::information_schema.cardinal_number AS position_in_unique_constraint\n   FROM pg_attribute a,\n    ( SELECT r.oid AS roid,\n            r.relname,\n            r.relowner,\n            nc.nspname AS nc_nspname,\n            nr.nspname AS nr_nspname,\n            c.oid AS coid,\n            c.conname,\n            c.contype,\n            c.conindid,\n            c.confkey,\n            c.confrelid,\n            information_schema._pg_expandarray(c.conkey) AS x\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = c.conrelid) AND (nc.oid = c.connamespace) AND (c.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\", 'f'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)))) ss\n  WHERE ((ss.roid = a.attrelid) AND (a.attnum = (ss.x).x) AND (NOT a.attisdropped) AND (pg_has_role(ss.relowner, 'USAGE'::text) OR has_column_privilege(ss.roid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "parameters",
          "columns": [
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordinal_position",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "parameter_mode",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_result",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "as_locator",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "parameter_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "parameter_default",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (ss.n_nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(ss.proname, ss.p_oid))::information_schema.sql_identifier AS specific_name,\n    ((ss.x).n)::information_schema.cardinal_number AS ordinal_position,\n    (\n        CASE\n            WHEN (ss.proargmodes IS NULL) THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'i'::\"char\") THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'o'::\"char\") THEN 'OUT'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'b'::\"char\") THEN 'INOUT'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'v'::\"char\") THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 't'::\"char\") THEN 'OUT'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS parameter_mode,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_result,\n    ('NO'::character varying)::information_schema.yes_or_no AS as_locator,\n    (NULLIF(ss.proargnames[(ss.x).n], ''::text))::information_schema.sql_identifier AS parameter_name,\n    (\n        CASE\n            WHEN ((t.typelem \u003c\u003e (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (NULL::name)::information_schema.sql_identifier AS collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (t.typname)::information_schema.sql_identifier AS udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    ((ss.x).n)::information_schema.sql_identifier AS dtd_identifier,\n    (\n        CASE\n            WHEN pg_has_role(ss.proowner, 'USAGE'::text) THEN pg_get_function_arg_default(ss.p_oid, (ss.x).n)\n            ELSE NULL::text\n        END)::information_schema.character_data AS parameter_default\n   FROM pg_type t,\n    pg_namespace nt,\n    ( SELECT n.nspname AS n_nspname,\n            p.proname,\n            p.oid AS p_oid,\n            p.proowner,\n            p.proargnames,\n            p.proargmodes,\n            information_schema._pg_expandarray(COALESCE(p.proallargtypes, (p.proargtypes)::oid[])) AS x\n           FROM pg_namespace n,\n            pg_proc p\n          WHERE ((n.oid = p.pronamespace) AND (pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.oid, 'EXECUTE'::text)))) ss\n  WHERE ((t.oid = (ss.x).x) AND (t.typnamespace = nt.oid));"
        },
        {
          "type": "view",
          "name": "referential_constraints",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "unique_constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "unique_constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "unique_constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "match_option",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "update_rule",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "delete_rule",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (ncon.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (con.conname)::information_schema.sql_identifier AS constraint_name,\n    (\n        CASE\n            WHEN (npkc.nspname IS NULL) THEN NULL::name\n            ELSE current_database()\n        END)::information_schema.sql_identifier AS unique_constraint_catalog,\n    (npkc.nspname)::information_schema.sql_identifier AS unique_constraint_schema,\n    (pkc.conname)::information_schema.sql_identifier AS unique_constraint_name,\n    (\n        CASE con.confmatchtype\n            WHEN 'f'::\"char\" THEN 'FULL'::text\n            WHEN 'p'::\"char\" THEN 'PARTIAL'::text\n            WHEN 's'::\"char\" THEN 'NONE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS match_option,\n    (\n        CASE con.confupdtype\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS update_rule,\n    (\n        CASE con.confdeltype\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS delete_rule\n   FROM ((((((pg_namespace ncon\n     JOIN pg_constraint con ON ((ncon.oid = con.connamespace)))\n     JOIN pg_class c ON (((con.conrelid = c.oid) AND (con.contype = 'f'::\"char\"))))\n     LEFT JOIN pg_depend d1 ON (((d1.objid = con.oid) AND (d1.classid = ('pg_constraint'::regclass)::oid) AND (d1.refclassid = ('pg_class'::regclass)::oid) AND (d1.refobjsubid = 0))))\n     LEFT JOIN pg_depend d2 ON (((d2.refclassid = ('pg_constraint'::regclass)::oid) AND (d2.classid = ('pg_class'::regclass)::oid) AND (d2.objid = d1.refobjid) AND (d2.objsubid = 0) AND (d2.deptype = 'i'::\"char\"))))\n     LEFT JOIN pg_constraint pkc ON (((pkc.oid = d2.refobjid) AND (pkc.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\"])) AND (pkc.conrelid = con.confrelid))))\n     LEFT JOIN pg_namespace npkc ON ((pkc.connamespace = npkc.oid)))\n  WHERE (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'INSERT, UPDATE, REFERENCES'::text));"
        },
        {
          "type": "view",
          "name": "role_column_grants",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT column_privileges.grantor,\n    column_privileges.grantee,\n    column_privileges.table_catalog,\n    column_privileges.table_schema,\n    column_privileges.table_name,\n    column_privileges.column_name,\n    column_privileges.privilege_type,\n    column_privileges.is_grantable\n   FROM information_schema.column_privileges\n  WHERE (((column_privileges.grantor)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)) OR ((column_privileges.grantee)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)));"
        },
        {
          "type": "view",
          "name": "role_routine_grants",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT routine_privileges.grantor,\n    routine_privileges.grantee,\n    routine_privileges.specific_catalog,\n    routine_privileges.specific_schema,\n    routine_privileges.specific_name,\n    routine_privileges.routine_catalog,\n    routine_privileges.routine_schema,\n    routine_privileges.routine_name,\n    routine_privileges.privilege_type,\n    routine_privileges.is_grantable\n   FROM information_schema.routine_privileges\n  WHERE (((routine_privileges.grantor)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)) OR ((routine_privileges.grantee)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)));"
        },
        {
          "type": "view",
          "name": "role_table_grants",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "with_hierarchy",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT table_privileges.grantor,\n    table_privileges.grantee,\n    table_privileges.table_catalog,\n    table_privileges.table_schema,\n    table_privileges.table_name,\n    table_privileges.privilege_type,\n    table_privileges.is_grantable,\n    table_privileges.with_hierarchy\n   FROM information_schema.table_privileges\n  WHERE (((table_privileges.grantor)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)) OR ((table_privileges.grantee)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)));"
        },
        {
          "type": "view",
          "name": "role_udt_grants",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT udt_privileges.grantor,\n    udt_privileges.grantee,\n    udt_privileges.udt_catalog,\n    udt_privileges.udt_schema,\n    udt_privileges.udt_name,\n    udt_privileges.privilege_type,\n    udt_privileges.is_grantable\n   FROM information_schema.udt_privileges\n  WHERE (((udt_privileges.grantor)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)) OR ((udt_privileges.grantee)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)));"
        },
        {
          "type": "view",
          "name": "role_usage_grants",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT usage_privileges.grantor,\n    usage_privileges.grantee,\n    usage_privileges.object_catalog,\n    usage_privileges.object_schema,\n    usage_privileges.object_name,\n    usage_privileges.object_type,\n    usage_privileges.privilege_type,\n    usage_privileges.is_grantable\n   FROM information_schema.usage_privileges\n  WHERE (((usage_privileges.grantor)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)) OR ((usage_privileges.grantee)::name IN ( SELECT enabled_roles.role_name\n           FROM information_schema.enabled_roles)));"
        },
        {
          "type": "view",
          "name": "routine_privileges",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (n.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,\n    (current_database())::information_schema.sql_identifier AS routine_catalog,\n    (n.nspname)::information_schema.sql_identifier AS routine_schema,\n    (p.proname)::information_schema.sql_identifier AS routine_name,\n    ('EXECUTE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, p.proowner, 'USAGE'::text) OR p.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_proc.oid,\n            pg_proc.proname,\n            pg_proc.proowner,\n            pg_proc.pronamespace,\n            (aclexplode(COALESCE(pg_proc.proacl, acldefault('f'::\"char\", pg_proc.proowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_proc.proacl, acldefault('f'::\"char\", pg_proc.proowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_proc.proacl, acldefault('f'::\"char\", pg_proc.proowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_proc.proacl, acldefault('f'::\"char\", pg_proc.proowner)))).is_grantable AS is_grantable\n           FROM pg_proc) p(oid, proname, proowner, pronamespace, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((p.pronamespace = n.oid) AND (grantee.oid = p.grantee) AND (u_grantor.oid = p.grantor) AND (p.prtype = 'EXECUTE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"
        },
        {
          "type": "view",
          "name": "routines",
          "columns": [
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "module_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "module_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "module_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "type_udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "type_udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "type_udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "routine_body",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "routine_definition",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "external_name",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "external_language",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "parameter_style",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_deterministic",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "sql_data_access",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_null_call",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "sql_path",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "schema_level_routine",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "max_dynamic_result_sets",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "is_user_defined_cast",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_implicitly_invocable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "security_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "to_sql_specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "to_sql_specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "to_sql_specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "as_locator",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "created",
              "datatype": {
                "type": "information_schema.time_stamp",
                "nullable": true
              }
            },
            {
              "name": "last_altered",
              "datatype": {
                "type": "information_schema.time_stamp",
                "nullable": true
              }
            },
            {
              "name": "new_savepoint_level",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_udt_dependent",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "result_cast_from_data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "result_cast_as_locator",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "result_cast_char_max_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_char_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_char_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_char_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_char_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "result_cast_interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_type_udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_type_udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_type_udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_scope_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_scope_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_scope_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "result_cast_maximum_cardinality",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "result_cast_dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (n.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,\n    (current_database())::information_schema.sql_identifier AS routine_catalog,\n    (n.nspname)::information_schema.sql_identifier AS routine_schema,\n    (p.proname)::information_schema.sql_identifier AS routine_name,\n    (\n        CASE p.prokind\n            WHEN 'f'::\"char\" THEN 'FUNCTION'::text\n            WHEN 'p'::\"char\" THEN 'PROCEDURE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS routine_type,\n    (NULL::name)::information_schema.sql_identifier AS module_catalog,\n    (NULL::name)::information_schema.sql_identifier AS module_schema,\n    (NULL::name)::information_schema.sql_identifier AS module_name,\n    (NULL::name)::information_schema.sql_identifier AS udt_catalog,\n    (NULL::name)::information_schema.sql_identifier AS udt_schema,\n    (NULL::name)::information_schema.sql_identifier AS udt_name,\n    (\n        CASE\n            WHEN (p.prokind = 'p'::\"char\") THEN NULL::text\n            WHEN ((t.typelem \u003c\u003e (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (NULL::name)::information_schema.sql_identifier AS collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (\n        CASE\n            WHEN (nt.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS type_udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS type_udt_schema,\n    (t.typname)::information_schema.sql_identifier AS type_udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (\n        CASE\n            WHEN (p.prokind \u003c\u003e 'p'::\"char\") THEN 0\n            ELSE NULL::integer\n        END)::information_schema.sql_identifier AS dtd_identifier,\n    (\n        CASE\n            WHEN (l.lanname = 'sql'::name) THEN 'SQL'::text\n            ELSE 'EXTERNAL'::text\n        END)::information_schema.character_data AS routine_body,\n    (\n        CASE\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN p.prosrc\n            ELSE NULL::text\n        END)::information_schema.character_data AS routine_definition,\n    (\n        CASE\n            WHEN (l.lanname = 'c'::name) THEN p.prosrc\n            ELSE NULL::text\n        END)::information_schema.character_data AS external_name,\n    (upper((l.lanname)::text))::information_schema.character_data AS external_language,\n    ('GENERAL'::character varying)::information_schema.character_data AS parameter_style,\n    (\n        CASE\n            WHEN (p.provolatile = 'i'::\"char\") THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_deterministic,\n    ('MODIFIES'::character varying)::information_schema.character_data AS sql_data_access,\n    (\n        CASE\n            WHEN (p.prokind \u003c\u003e 'p'::\"char\") THEN\n            CASE\n                WHEN p.proisstrict THEN 'YES'::text\n                ELSE 'NO'::text\n            END\n            ELSE NULL::text\n        END)::information_schema.yes_or_no AS is_null_call,\n    (NULL::character varying)::information_schema.character_data AS sql_path,\n    ('YES'::character varying)::information_schema.yes_or_no AS schema_level_routine,\n    (0)::information_schema.cardinal_number AS max_dynamic_result_sets,\n    (NULL::character varying)::information_schema.yes_or_no AS is_user_defined_cast,\n    (NULL::character varying)::information_schema.yes_or_no AS is_implicitly_invocable,\n    (\n        CASE\n            WHEN p.prosecdef THEN 'DEFINER'::text\n            ELSE 'INVOKER'::text\n        END)::information_schema.character_data AS security_type,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_catalog,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_schema,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_name,\n    ('NO'::character varying)::information_schema.yes_or_no AS as_locator,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS created,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS last_altered,\n    (NULL::character varying)::information_schema.yes_or_no AS new_savepoint_level,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_udt_dependent,\n    (NULL::character varying)::information_schema.character_data AS result_cast_from_data_type,\n    (NULL::character varying)::information_schema.yes_or_no AS result_cast_as_locator,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_char_max_length,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_char_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_name,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS result_cast_interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_interval_precision,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_name,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_maximum_cardinality,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_dtd_identifier\n   FROM (((pg_namespace n\n     JOIN pg_proc p ON ((n.oid = p.pronamespace)))\n     JOIN pg_language l ON ((p.prolang = l.oid)))\n     LEFT JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON (((p.prorettype = t.oid) AND (p.prokind \u003c\u003e 'p'::\"char\"))))\n  WHERE (pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.oid, 'EXECUTE'::text));"
        },
        {
          "type": "view",
          "name": "schemata",
          "columns": [
            {
              "name": "catalog_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "schema_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "schema_owner",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "default_character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "sql_path",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS catalog_name,\n    (n.nspname)::information_schema.sql_identifier AS schema_name,\n    (u.rolname)::information_schema.sql_identifier AS schema_owner,\n    (NULL::name)::information_schema.sql_identifier AS default_character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS default_character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS default_character_set_name,\n    (NULL::character varying)::information_schema.character_data AS sql_path\n   FROM pg_namespace n,\n    pg_authid u\n  WHERE ((n.nspowner = u.oid) AND (pg_has_role(n.nspowner, 'USAGE'::text) OR has_schema_privilege(n.oid, 'CREATE, USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "sequences",
          "columns": [
            {
              "name": "sequence_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "sequence_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "sequence_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "start_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "minimum_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "maximum_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "increment",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "cycle_option",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS sequence_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS sequence_schema,\n    (c.relname)::information_schema.sql_identifier AS sequence_name,\n    (format_type(s.seqtypid, NULL::integer))::information_schema.character_data AS data_type,\n    (information_schema._pg_numeric_precision(s.seqtypid, '-1'::integer))::information_schema.cardinal_number AS numeric_precision,\n    (2)::information_schema.cardinal_number AS numeric_precision_radix,\n    (0)::information_schema.cardinal_number AS numeric_scale,\n    (s.seqstart)::information_schema.character_data AS start_value,\n    (s.seqmin)::information_schema.character_data AS minimum_value,\n    (s.seqmax)::information_schema.character_data AS maximum_value,\n    (s.seqincrement)::information_schema.character_data AS increment,\n    (\n        CASE\n            WHEN s.seqcycle THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS cycle_option\n   FROM pg_namespace nc,\n    pg_class c,\n    pg_sequence s\n  WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'S'::\"char\") AND (NOT (EXISTS ( SELECT 1\n           FROM pg_depend\n          WHERE ((pg_depend.classid = ('pg_class'::regclass)::oid) AND (pg_depend.objid = c.oid) AND (pg_depend.deptype = 'i'::\"char\"))))) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (c.oid = s.seqrelid) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_sequence_privilege(c.oid, 'SELECT, UPDATE, USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "table_constraints",
          "columns": [
            {
              "name": "constraint_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "constraint_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_deferrable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "initially_deferred",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "enforced",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (c.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS table_schema,\n    (r.relname)::information_schema.sql_identifier AS table_name,\n    (\n        CASE c.contype\n            WHEN 'c'::\"char\" THEN 'CHECK'::text\n            WHEN 'f'::\"char\" THEN 'FOREIGN KEY'::text\n            WHEN 'p'::\"char\" THEN 'PRIMARY KEY'::text\n            WHEN 'u'::\"char\" THEN 'UNIQUE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS constraint_type,\n    (\n        CASE\n            WHEN c.condeferrable THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_deferrable,\n    (\n        CASE\n            WHEN c.condeferred THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS initially_deferred,\n    ('YES'::character varying)::information_schema.yes_or_no AS enforced\n   FROM pg_namespace nc,\n    pg_namespace nr,\n    pg_constraint c,\n    pg_class r\n  WHERE ((nc.oid = c.connamespace) AND (nr.oid = r.relnamespace) AND (c.conrelid = r.oid) AND (c.contype \u003c\u003e ALL (ARRAY['t'::\"char\", 'x'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)))\nUNION ALL\n SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (((((((nr.oid)::text || '_'::text) || (r.oid)::text) || '_'::text) || (a.attnum)::text) || '_not_null'::text))::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS table_schema,\n    (r.relname)::information_schema.sql_identifier AS table_name,\n    ('CHECK'::character varying)::information_schema.character_data AS constraint_type,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_deferrable,\n    ('NO'::character varying)::information_schema.yes_or_no AS initially_deferred,\n    ('YES'::character varying)::information_schema.yes_or_no AS enforced\n   FROM pg_namespace nr,\n    pg_class r,\n    pg_attribute a\n  WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND a.attnotnull AND (a.attnum \u003e 0) AND (NOT a.attisdropped) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "table_privileges",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "with_hierarchy",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (c.prtype)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, c.relowner, 'USAGE'::text) OR c.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable,\n    (\n        CASE\n            WHEN (c.prtype = 'SELECT'::text) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS with_hierarchy\n   FROM ( SELECT pg_class.oid,\n            pg_class.relname,\n            pg_class.relnamespace,\n            pg_class.relkind,\n            pg_class.relowner,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).is_grantable AS is_grantable\n           FROM pg_class) c(oid, relname, relnamespace, relkind, relowner, grantor, grantee, prtype, grantable),\n    pg_namespace nc,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((c.relnamespace = nc.oid) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (c.grantee = grantee.oid) AND (c.grantor = u_grantor.oid) AND (c.prtype = ANY (ARRAY['INSERT'::text, 'SELECT'::text, 'UPDATE'::text, 'DELETE'::text, 'TRUNCATE'::text, 'REFERENCES'::text, 'TRIGGER'::text])) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"
        },
        {
          "type": "view",
          "name": "tables",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "self_referencing_column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "reference_generation",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "is_insertable_into",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_typed",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "commit_action",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (\n        CASE\n            WHEN (nc.oid = pg_my_temp_schema()) THEN 'LOCAL TEMPORARY'::text\n            WHEN (c.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) THEN 'BASE TABLE'::text\n            WHEN (c.relkind = 'v'::\"char\") THEN 'VIEW'::text\n            WHEN (c.relkind = 'f'::\"char\") THEN 'FOREIGN'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS table_type,\n    (NULL::name)::information_schema.sql_identifier AS self_referencing_column_name,\n    (NULL::character varying)::information_schema.character_data AS reference_generation,\n    (\n        CASE\n            WHEN (t.typname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS user_defined_type_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS user_defined_type_schema,\n    (t.typname)::information_schema.sql_identifier AS user_defined_type_name,\n    (\n        CASE\n            WHEN ((c.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) OR ((c.relkind = ANY (ARRAY['v'::\"char\", 'f'::\"char\"])) AND ((pg_relation_is_updatable((c.oid)::regclass, false) \u0026 8) = 8))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_insertable_into,\n    (\n        CASE\n            WHEN (t.typname IS NOT NULL) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_typed,\n    (NULL::character varying)::information_schema.character_data AS commit_action\n   FROM ((pg_namespace nc\n     JOIN pg_class c ON ((nc.oid = c.relnamespace)))\n     LEFT JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((c.reloftype = t.oid)))\n  WHERE ((c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "transforms",
          "columns": [
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "group_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "transform_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (t.typname)::information_schema.sql_identifier AS udt_name,\n    (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (np.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,\n    (l.lanname)::information_schema.sql_identifier AS group_name,\n    ('FROM SQL'::character varying)::information_schema.character_data AS transform_type\n   FROM (((((pg_type t\n     JOIN pg_transform x ON ((t.oid = x.trftype)))\n     JOIN pg_language l ON ((x.trflang = l.oid)))\n     JOIN pg_proc p ON (((x.trffromsql)::oid = p.oid)))\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))\n     JOIN pg_namespace np ON ((p.pronamespace = np.oid)))\nUNION\n SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (t.typname)::information_schema.sql_identifier AS udt_name,\n    (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (np.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,\n    (l.lanname)::information_schema.sql_identifier AS group_name,\n    ('TO SQL'::character varying)::information_schema.character_data AS transform_type\n   FROM (((((pg_type t\n     JOIN pg_transform x ON ((t.oid = x.trftype)))\n     JOIN pg_language l ON ((x.trflang = l.oid)))\n     JOIN pg_proc p ON (((x.trftosql)::oid = p.oid)))\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))\n     JOIN pg_namespace np ON ((p.pronamespace = np.oid)))\n  ORDER BY 1, 2, 3, 7, 8;"
        },
        {
          "type": "view",
          "name": "triggered_update_columns",
          "columns": [
            {
              "name": "trigger_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "trigger_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "trigger_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_table",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_column",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS trigger_catalog,\n    (n.nspname)::information_schema.sql_identifier AS trigger_schema,\n    (t.tgname)::information_schema.sql_identifier AS trigger_name,\n    (current_database())::information_schema.sql_identifier AS event_object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS event_object_schema,\n    (c.relname)::information_schema.sql_identifier AS event_object_table,\n    (a.attname)::information_schema.sql_identifier AS event_object_column\n   FROM pg_namespace n,\n    pg_class c,\n    pg_trigger t,\n    ( SELECT ta0.tgoid,\n            (ta0.tgat).x AS tgattnum,\n            (ta0.tgat).n AS tgattpos\n           FROM ( SELECT pg_trigger.oid AS tgoid,\n                    information_schema._pg_expandarray(pg_trigger.tgattr) AS tgat\n                   FROM pg_trigger) ta0) ta,\n    pg_attribute a\n  WHERE ((n.oid = c.relnamespace) AND (c.oid = t.tgrelid) AND (t.oid = ta.tgoid) AND ((a.attrelid = t.tgrelid) AND (a.attnum = ta.tgattnum)) AND (NOT t.tgisinternal) AND (NOT pg_is_other_temp_schema(n.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "triggers",
          "columns": [
            {
              "name": "trigger_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "trigger_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "trigger_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_manipulation",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "event_object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "event_object_table",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "action_order",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "action_condition",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "action_statement",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "action_orientation",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "action_timing",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "action_reference_old_table",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "action_reference_new_table",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "action_reference_old_row",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "action_reference_new_row",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "created",
              "datatype": {
                "type": "information_schema.time_stamp",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS trigger_catalog,\n    (n.nspname)::information_schema.sql_identifier AS trigger_schema,\n    (t.tgname)::information_schema.sql_identifier AS trigger_name,\n    (em.text)::information_schema.character_data AS event_manipulation,\n    (current_database())::information_schema.sql_identifier AS event_object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS event_object_schema,\n    (c.relname)::information_schema.sql_identifier AS event_object_table,\n    (rank() OVER (PARTITION BY (n.nspname)::information_schema.sql_identifier, (c.relname)::information_schema.sql_identifier, em.num, ((t.tgtype)::integer \u0026 1), ((t.tgtype)::integer \u0026 66) ORDER BY t.tgname))::information_schema.cardinal_number AS action_order,\n    (\n        CASE\n            WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(t.oid), '.{35,} WHEN \\((.+)\\) EXECUTE FUNCTION'::text))[1]\n            ELSE NULL::text\n        END)::information_schema.character_data AS action_condition,\n    (\"substring\"(pg_get_triggerdef(t.oid), (\"position\"(\"substring\"(pg_get_triggerdef(t.oid), 48), 'EXECUTE FUNCTION'::text) + 47)))::information_schema.character_data AS action_statement,\n    (\n        CASE ((t.tgtype)::integer \u0026 1)\n            WHEN 1 THEN 'ROW'::text\n            ELSE 'STATEMENT'::text\n        END)::information_schema.character_data AS action_orientation,\n    (\n        CASE ((t.tgtype)::integer \u0026 66)\n            WHEN 2 THEN 'BEFORE'::text\n            WHEN 64 THEN 'INSTEAD OF'::text\n            ELSE 'AFTER'::text\n        END)::information_schema.character_data AS action_timing,\n    (t.tgoldtable)::information_schema.sql_identifier AS action_reference_old_table,\n    (t.tgnewtable)::information_schema.sql_identifier AS action_reference_new_table,\n    (NULL::name)::information_schema.sql_identifier AS action_reference_old_row,\n    (NULL::name)::information_schema.sql_identifier AS action_reference_new_row,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS created\n   FROM pg_namespace n,\n    pg_class c,\n    pg_trigger t,\n    ( VALUES (4,'INSERT'::text), (8,'DELETE'::text), (16,'UPDATE'::text)) em(num, text)\n  WHERE ((n.oid = c.relnamespace) AND (c.oid = t.tgrelid) AND (((t.tgtype)::integer \u0026 em.num) \u003c\u003e 0) AND (NOT t.tgisinternal) AND (NOT pg_is_other_temp_schema(n.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'INSERT, UPDATE, REFERENCES'::text)));"
        },
        {
          "type": "view",
          "name": "udt_privileges",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "udt_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (n.nspname)::information_schema.sql_identifier AS udt_schema,\n    (t.typname)::information_schema.sql_identifier AS udt_name,\n    ('TYPE USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, t.typowner, 'USAGE'::text) OR t.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_type.oid,\n            pg_type.typname,\n            pg_type.typnamespace,\n            pg_type.typtype,\n            pg_type.typowner,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).is_grantable AS is_grantable\n           FROM pg_type) t(oid, typname, typnamespace, typtype, typowner, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((t.typnamespace = n.oid) AND (t.typtype = 'c'::\"char\") AND (t.grantee = grantee.oid) AND (t.grantor = u_grantor.oid) AND (t.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"
        },
        {
          "type": "view",
          "name": "usage_privileges",
          "columns": [
            {
              "name": "grantor",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "grantee",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "object_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "privilege_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_grantable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (u.rolname)::information_schema.sql_identifier AS grantor,\n    ('PUBLIC'::name)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (c.collname)::information_schema.sql_identifier AS object_name,\n    ('COLLATION'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_grantable\n   FROM pg_authid u,\n    pg_namespace n,\n    pg_collation c\n  WHERE ((u.oid = c.collowner) AND (c.collnamespace = n.oid) AND (c.collencoding = ANY (ARRAY['-1'::integer, ( SELECT pg_database.encoding\n           FROM pg_database\n          WHERE (pg_database.datname = current_database()))])))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (t.typname)::information_schema.sql_identifier AS object_name,\n    ('DOMAIN'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, t.typowner, 'USAGE'::text) OR t.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_type.oid,\n            pg_type.typname,\n            pg_type.typnamespace,\n            pg_type.typtype,\n            pg_type.typowner,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::\"char\", pg_type.typowner)))).is_grantable AS is_grantable\n           FROM pg_type) t(oid, typname, typnamespace, typtype, typowner, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((t.typnamespace = n.oid) AND (t.typtype = 'd'::\"char\") AND (t.grantee = grantee.oid) AND (t.grantor = u_grantor.oid) AND (t.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (''::name)::information_schema.sql_identifier AS object_schema,\n    (fdw.fdwname)::information_schema.sql_identifier AS object_name,\n    ('FOREIGN DATA WRAPPER'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, fdw.fdwowner, 'USAGE'::text) OR fdw.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_foreign_data_wrapper.fdwname,\n            pg_foreign_data_wrapper.fdwowner,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::\"char\", pg_foreign_data_wrapper.fdwowner)))).is_grantable AS is_grantable\n           FROM pg_foreign_data_wrapper) fdw(fdwname, fdwowner, grantor, grantee, prtype, grantable),\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((u_grantor.oid = fdw.grantor) AND (grantee.oid = fdw.grantee) AND (fdw.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (''::name)::information_schema.sql_identifier AS object_schema,\n    (srv.srvname)::information_schema.sql_identifier AS object_name,\n    ('FOREIGN SERVER'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, srv.srvowner, 'USAGE'::text) OR srv.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_foreign_server.srvname,\n            pg_foreign_server.srvowner,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::\"char\", pg_foreign_server.srvowner)))).is_grantable AS is_grantable\n           FROM pg_foreign_server) srv(srvname, srvowner, grantor, grantee, prtype, grantable),\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((u_grantor.oid = srv.grantor) AND (grantee.oid = srv.grantee) AND (srv.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))\nUNION ALL\n SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS object_schema,\n    (c.relname)::information_schema.sql_identifier AS object_name,\n    ('SEQUENCE'::character varying)::information_schema.character_data AS object_type,\n    ('USAGE'::character varying)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(grantee.oid, c.relowner, 'USAGE'::text) OR c.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pg_class.oid,\n            pg_class.relname,\n            pg_class.relnamespace,\n            pg_class.relkind,\n            pg_class.relowner,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantor AS grantor,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantee AS grantee,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).privilege_type AS privilege_type,\n            (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).is_grantable AS is_grantable\n           FROM pg_class) c(oid, relname, relnamespace, relkind, relowner, grantor, grantee, prtype, grantable),\n    pg_namespace n,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((c.relnamespace = n.oid) AND (c.relkind = 'S'::\"char\") AND (c.grantee = grantee.oid) AND (c.grantor = u_grantor.oid) AND (c.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));"
        },
        {
          "type": "view",
          "name": "user_defined_types",
          "columns": [
            {
              "name": "user_defined_type_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "user_defined_type_category",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_instantiable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_final",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "ordering_form",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "ordering_category",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "ordering_routine_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordering_routine_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ordering_routine_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "reference_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "data_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "character_maximum_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_octet_length",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "character_set_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "character_set_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "collation_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_precision_radix",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "numeric_scale",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "datetime_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "interval_type",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "interval_precision",
              "datatype": {
                "type": "information_schema.cardinal_number",
                "nullable": true
              }
            },
            {
              "name": "source_dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "ref_dtd_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS user_defined_type_catalog,\n    (n.nspname)::information_schema.sql_identifier AS user_defined_type_schema,\n    (c.relname)::information_schema.sql_identifier AS user_defined_type_name,\n    ('STRUCTURED'::character varying)::information_schema.character_data AS user_defined_type_category,\n    ('YES'::character varying)::information_schema.yes_or_no AS is_instantiable,\n    (NULL::character varying)::information_schema.yes_or_no AS is_final,\n    (NULL::character varying)::information_schema.character_data AS ordering_form,\n    (NULL::character varying)::information_schema.character_data AS ordering_category,\n    (NULL::name)::information_schema.sql_identifier AS ordering_routine_catalog,\n    (NULL::name)::information_schema.sql_identifier AS ordering_routine_schema,\n    (NULL::name)::information_schema.sql_identifier AS ordering_routine_name,\n    (NULL::character varying)::information_schema.character_data AS reference_type,\n    (NULL::character varying)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (NULL::name)::information_schema.sql_identifier AS collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (NULL::name)::information_schema.sql_identifier AS source_dtd_identifier,\n    (NULL::name)::information_schema.sql_identifier AS ref_dtd_identifier\n   FROM pg_namespace n,\n    pg_class c,\n    pg_type t\n  WHERE ((n.oid = c.relnamespace) AND (t.typrelid = c.oid) AND (c.relkind = 'c'::\"char\") AND (pg_has_role(t.typowner, 'USAGE'::text) OR has_type_privilege(t.oid, 'USAGE'::text)));"
        },
        {
          "type": "view",
          "name": "user_mapping_options",
          "columns": [
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "option_value",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT um.authorization_identifier,\n    um.foreign_server_catalog,\n    um.foreign_server_name,\n    (opts.option_name)::information_schema.sql_identifier AS option_name,\n    (\n        CASE\n            WHEN (((um.umuser \u003c\u003e (0)::oid) AND ((um.authorization_identifier)::name = CURRENT_USER)) OR ((um.umuser = (0)::oid) AND pg_has_role((um.srvowner)::name, 'USAGE'::text)) OR ( SELECT pg_authid.rolsuper\n               FROM pg_authid\n              WHERE (pg_authid.rolname = CURRENT_USER))) THEN opts.option_value\n            ELSE NULL::text\n        END)::information_schema.character_data AS option_value\n   FROM information_schema._pg_user_mappings um,\n    LATERAL pg_options_to_table(um.umoptions) opts(option_name, option_value);"
        },
        {
          "type": "view",
          "name": "user_mappings",
          "columns": [
            {
              "name": "authorization_identifier",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "foreign_server_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT _pg_user_mappings.authorization_identifier,\n    _pg_user_mappings.foreign_server_catalog,\n    _pg_user_mappings.foreign_server_name\n   FROM information_schema._pg_user_mappings;"
        },
        {
          "type": "view",
          "name": "view_column_usage",
          "columns": [
            {
              "name": "view_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "view_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "view_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "column_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT DISTINCT (current_database())::information_schema.sql_identifier AS view_catalog,\n    (nv.nspname)::information_schema.sql_identifier AS view_schema,\n    (v.relname)::information_schema.sql_identifier AS view_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS table_schema,\n    (t.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name\n   FROM pg_namespace nv,\n    pg_class v,\n    pg_depend dv,\n    pg_depend dt,\n    pg_class t,\n    pg_namespace nt,\n    pg_attribute a\n  WHERE ((nv.oid = v.relnamespace) AND (v.relkind = 'v'::\"char\") AND (v.oid = dv.refobjid) AND (dv.refclassid = ('pg_class'::regclass)::oid) AND (dv.classid = ('pg_rewrite'::regclass)::oid) AND (dv.deptype = 'i'::\"char\") AND (dv.objid = dt.objid) AND (dv.refobjid \u003c\u003e dt.refobjid) AND (dt.classid = ('pg_rewrite'::regclass)::oid) AND (dt.refclassid = ('pg_class'::regclass)::oid) AND (dt.refobjid = t.oid) AND (t.relnamespace = nt.oid) AND (t.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (t.oid = a.attrelid) AND (dt.refobjsubid = a.attnum) AND pg_has_role(t.relowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "view_routine_usage",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "specific_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT DISTINCT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nv.nspname)::information_schema.sql_identifier AS table_schema,\n    (v.relname)::information_schema.sql_identifier AS table_name,\n    (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (np.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name\n   FROM pg_namespace nv,\n    pg_class v,\n    pg_depend dv,\n    pg_depend dp,\n    pg_proc p,\n    pg_namespace np\n  WHERE ((nv.oid = v.relnamespace) AND (v.relkind = 'v'::\"char\") AND (v.oid = dv.refobjid) AND (dv.refclassid = ('pg_class'::regclass)::oid) AND (dv.classid = ('pg_rewrite'::regclass)::oid) AND (dv.deptype = 'i'::\"char\") AND (dv.objid = dp.objid) AND (dp.classid = ('pg_rewrite'::regclass)::oid) AND (dp.refclassid = ('pg_proc'::regclass)::oid) AND (dp.refobjid = p.oid) AND (p.pronamespace = np.oid) AND pg_has_role(p.proowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "view_table_usage",
          "columns": [
            {
              "name": "view_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "view_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "view_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT DISTINCT (current_database())::information_schema.sql_identifier AS view_catalog,\n    (nv.nspname)::information_schema.sql_identifier AS view_schema,\n    (v.relname)::information_schema.sql_identifier AS view_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS table_schema,\n    (t.relname)::information_schema.sql_identifier AS table_name\n   FROM pg_namespace nv,\n    pg_class v,\n    pg_depend dv,\n    pg_depend dt,\n    pg_class t,\n    pg_namespace nt\n  WHERE ((nv.oid = v.relnamespace) AND (v.relkind = 'v'::\"char\") AND (v.oid = dv.refobjid) AND (dv.refclassid = ('pg_class'::regclass)::oid) AND (dv.classid = ('pg_rewrite'::regclass)::oid) AND (dv.deptype = 'i'::\"char\") AND (dv.objid = dt.objid) AND (dv.refobjid \u003c\u003e dt.refobjid) AND (dt.classid = ('pg_rewrite'::regclass)::oid) AND (dt.refclassid = ('pg_class'::regclass)::oid) AND (dt.refobjid = t.oid) AND (t.relnamespace = nt.oid) AND (t.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND pg_has_role(t.relowner, 'USAGE'::text));"
        },
        {
          "type": "view",
          "name": "views",
          "columns": [
            {
              "name": "table_catalog",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_schema",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "table_name",
              "datatype": {
                "type": "information_schema.sql_identifier",
                "nullable": true
              }
            },
            {
              "name": "view_definition",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "check_option",
              "datatype": {
                "type": "information_schema.character_data",
                "nullable": true
              }
            },
            {
              "name": "is_updatable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_insertable_into",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_trigger_updatable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_trigger_deletable",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            },
            {
              "name": "is_trigger_insertable_into",
              "datatype": {
                "type": "information_schema.yes_or_no",
                "nullable": true
              }
            }
          ],
          "manual": true,
          "definition": "SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (\n        CASE\n            WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN pg_get_viewdef(c.oid)\n            ELSE NULL::text\n        END)::information_schema.character_data AS view_definition,\n    (\n        CASE\n            WHEN ('check_option=cascaded'::text = ANY (c.reloptions)) THEN 'CASCADED'::text\n            WHEN ('check_option=local'::text = ANY (c.reloptions)) THEN 'LOCAL'::text\n            ELSE 'NONE'::text\n        END)::information_schema.character_data AS check_option,\n    (\n        CASE\n            WHEN ((pg_relation_is_updatable((c.oid)::regclass, false) \u0026 20) = 20) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_updatable,\n    (\n        CASE\n            WHEN ((pg_relation_is_updatable((c.oid)::regclass, false) \u0026 8) = 8) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_insertable_into,\n    (\n        CASE\n            WHEN (EXISTS ( SELECT 1\n               FROM pg_trigger\n              WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer \u0026 81) = 81)))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_trigger_updatable,\n    (\n        CASE\n            WHEN (EXISTS ( SELECT 1\n               FROM pg_trigger\n              WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer \u0026 73) = 73)))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_trigger_deletable,\n    (\n        CASE\n            WHEN (EXISTS ( SELECT 1\n               FROM pg_trigger\n              WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer \u0026 69) = 69)))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_trigger_insertable_into\n   FROM pg_namespace nc,\n    pg_class c\n  WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'v'::\"char\") AND (NOT pg_is_other_temp_schema(nc.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));"
        }
      ]
    }
  ]
}
