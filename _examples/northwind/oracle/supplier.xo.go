package oracle

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Supplier represents a row from 'northwind.suppliers'.
type Supplier struct {
	SupplierID   int            `json:"supplier_id"`   // supplier_id
	CompanyName  string         `json:"company_name"`  // company_name
	ContactName  sql.NullString `json:"contact_name"`  // contact_name
	ContactTitle sql.NullString `json:"contact_title"` // contact_title
	Address      sql.NullString `json:"address"`       // address
	City         sql.NullString `json:"city"`          // city
	Region       sql.NullString `json:"region"`        // region
	PostalCode   sql.NullString `json:"postal_code"`   // postal_code
	Country      sql.NullString `json:"country"`       // country
	Phone        sql.NullString `json:"phone"`         // phone
	Fax          sql.NullString `json:"fax"`           // fax
	Homepage     sql.NullString `json:"homepage"`      // homepage
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Supplier exists in the database.
func (s *Supplier) Exists() bool {
	return s._exists
}

// Deleted returns true when the Supplier has been marked for deletion from
// the database.
func (s *Supplier) Deleted() bool {
	return s._deleted
}

// Insert inserts the Supplier to the database.
func (s *Supplier) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO northwind.suppliers (` +
		`supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage` +
		`) VALUES (` +
		`:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12` +
		`)`
	// run
	logf(sqlstr, s.SupplierID, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierID, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a Supplier in the database.
func (s *Supplier) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE northwind.suppliers SET ` +
		`company_name = :1, contact_name = :2, contact_title = :3, address = :4, city = :5, region = :6, postal_code = :7, country = :8, phone = :9, fax = :10, homepage = :11 ` +
		`WHERE supplier_id = :12`
	// run
	logf(sqlstr, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage, s.SupplierID)
	if _, err := db.ExecContext(ctx, sqlstr, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage, s.SupplierID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Supplier to the database.
func (s *Supplier) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for Supplier.
func (s *Supplier) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `MERGE northwind.supplierst ` +
		`USING (` +
		`SELECT :1 supplier_id, :2 company_name, :3 contact_name, :4 contact_title, :5 address, :6 city, :7 region, :8 postal_code, :9 country, :10 phone, :11 fax, :12 homepage ` +
		`FROM DUAL ) s ` +
		`ON s.supplier_id = t.supplier_id ` +
		`WHEN MATCHED THEN ` +
		`UPDATE SET ` +
		`t.company_name = s.company_name, t.contact_name = s.contact_name, t.contact_title = s.contact_title, t.address = s.address, t.city = s.city, t.region = s.region, t.postal_code = s.postal_code, t.country = s.country, t.phone = s.phone, t.fax = s.fax, t.homepage = s.homepage ` +
		`WHEN NOT MATCHED THEN ` +
		`INSERT (` +
		`supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage` +
		`) VALUES (` +
		`s.supplier_id, s.company_name, s.contact_name, s.contact_title, s.address, s.city, s.region, s.postal_code, s.country, s.phone, s.fax, s.homepage` +
		`);`
	// run
	logf(sqlstr, s.SupplierID, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierID, s.CompanyName, s.ContactName, s.ContactTitle, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone, s.Fax, s.Homepage); err != nil {
		return err
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the Supplier from the database.
func (s *Supplier) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM northwind.suppliers ` +
		`WHERE supplier_id = :1`
	// run
	logf(sqlstr, s.SupplierID)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SupplierBySupplierID retrieves a row from 'northwind.suppliers' as a Supplier.
//
// Generated from index 'suppliers_pkey'.
func SupplierBySupplierID(ctx context.Context, db DB, supplierID int) (*Supplier, error) {
	// query
	const sqlstr = `SELECT ` +
		`supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage ` +
		`FROM northwind.suppliers ` +
		`WHERE supplier_id = :1`
	// run
	logf(sqlstr, supplierID)
	s := Supplier{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, supplierID).Scan(&s.SupplierID, &s.CompanyName, &s.ContactName, &s.ContactTitle, &s.Address, &s.City, &s.Region, &s.PostalCode, &s.Country, &s.Phone, &s.Fax, &s.Homepage); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
