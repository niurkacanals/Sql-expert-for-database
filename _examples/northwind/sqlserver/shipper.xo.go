package sqlserver

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Shipper represents a row from 'northwind.shippers'.
type Shipper struct {
	ShipperID   int16          `json:"shipper_id"`   // shipper_id
	CompanyName string         `json:"company_name"` // company_name
	Phone       sql.NullString `json:"phone"`        // phone
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Shipper exists in the database.
func (s *Shipper) Exists() bool {
	return s._exists
}

// Deleted returns true when the Shipper has been marked for deletion from
// the database.
func (s *Shipper) Deleted() bool {
	return s._deleted
}

// Insert inserts the Shipper to the database.
func (s *Shipper) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO northwind.shippers (` +
		`shipper_id, company_name, phone` +
		`) VALUES (` +
		`@p1, @p2, @p3` +
		`)`
	// run
	logf(sqlstr, s.ShipperID, s.CompanyName, s.Phone)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperID, s.CompanyName, s.Phone); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a Shipper in the database.
func (s *Shipper) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE northwind.shippers SET ` +
		`company_name = @p1, phone = @p2 ` +
		`WHERE shipper_id = @p3`
	// run
	logf(sqlstr, s.CompanyName, s.Phone, s.ShipperID)
	if _, err := db.ExecContext(ctx, sqlstr, s.CompanyName, s.Phone, s.ShipperID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Shipper to the database.
func (s *Shipper) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for Shipper.
func (s *Shipper) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `MERGE northwind.shippers AS t ` +
		`USING (` +
		`SELECT @p1 shipper_id, @p2 company_name, @p3 phone ` +
		`) AS s ` +
		`ON s.shipper_id = t.shipper_id ` +
		`WHEN MATCHED THEN ` +
		`UPDATE SET ` +
		`t.company_name = s.company_name, t.phone = s.phone ` +
		`WHEN NOT MATCHED THEN ` +
		`INSERT (` +
		`shipper_id, company_name, phone` +
		`) VALUES (` +
		`s.shipper_id, s.company_name, s.phone` +
		`);`
	// run
	logf(sqlstr, s.ShipperID, s.CompanyName, s.Phone)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperID, s.CompanyName, s.Phone); err != nil {
		return err
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the Shipper from the database.
func (s *Shipper) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM northwind.shippers ` +
		`WHERE shipper_id = @p1`
	// run
	logf(sqlstr, s.ShipperID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// ShipperByShipperID retrieves a row from 'northwind.shippers' as a Shipper.
//
// Generated from index 'shippers_pkey'.
func ShipperByShipperID(ctx context.Context, db DB, shipperID int16) (*Shipper, error) {
	// query
	const sqlstr = `SELECT ` +
		`shipper_id, company_name, phone ` +
		`FROM northwind.shippers ` +
		`WHERE shipper_id = @p1`
	// run
	logf(sqlstr, shipperID)
	s := Shipper{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, shipperID).Scan(&s.ShipperID, &s.CompanyName, &s.Phone); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
