package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// CustomerCustomerDemo represents a row from 'northwind.customer_customer_demo'.
type CustomerCustomerDemo struct {
	CustomerID     string `json:"customer_id"`      // customer_id
	CustomerTypeID string `json:"customer_type_id"` // customer_type_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the CustomerCustomerDemo exists in the database.
func (ccd *CustomerCustomerDemo) Exists() bool {
	return ccd._exists
}

// Deleted returns true when the CustomerCustomerDemo has been marked for deletion from
// the database.
func (ccd *CustomerCustomerDemo) Deleted() bool {
	return ccd._deleted
}

// Insert inserts the CustomerCustomerDemo to the database.
func (ccd *CustomerCustomerDemo) Insert(ctx context.Context, db DB) error {
	switch {
	case ccd._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ccd._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO northwind.customer_customer_demo (` +
		`customer_id, customer_type_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ccd.CustomerID, ccd.CustomerTypeID)
	if _, err := db.ExecContext(ctx, sqlstr, ccd.CustomerID, ccd.CustomerTypeID); err != nil {
		return logerror(err)
	}
	// set exists
	ccd._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the CustomerCustomerDemo from the database.
func (ccd *CustomerCustomerDemo) Delete(ctx context.Context, db DB) error {
	switch {
	case !ccd._exists: // doesn't exist
		return nil
	case ccd._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM northwind.customer_customer_demo WHERE customer_id = ? AND customer_type_id = ?`
	// run
	logf(sqlstr, ccd.CustomerID, ccd.CustomerTypeID)
	if _, err := db.ExecContext(ctx, sqlstr, ccd.CustomerID, ccd.CustomerTypeID); err != nil {
		return logerror(err)
	}
	// set deleted
	ccd._deleted = true
	return nil
}

// CustomerCustomerDemoByCustomerTypeID retrieves a row from 'northwind.customer_customer_demo' as a CustomerCustomerDemo.
//
// Generated from index 'customer_customer_demo_customer_type_id_pkey'.
func CustomerCustomerDemoByCustomerTypeID(ctx context.Context, db DB, customerTypeID string) (*CustomerCustomerDemo, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, customer_type_id ` +
		`FROM northwind.customer_customer_demo ` +
		`WHERE customer_type_id = ?`
	// run
	logf(sqlstr, customerTypeID)
	ccd := CustomerCustomerDemo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, customerTypeID).Scan(&ccd.CustomerID, &ccd.CustomerTypeID); err != nil {
		return nil, logerror(err)
	}
	return &ccd, nil
}

// CustomerCustomerDemosByCustomerTypeID retrieves a row from 'northwind.customer_customer_demo' as a CustomerCustomerDemo.
//
// Generated from index 'customer_type_id'.
func CustomerCustomerDemosByCustomerTypeID(ctx context.Context, db DB, customerTypeID string) ([]*CustomerCustomerDemo, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, customer_type_id ` +
		`FROM northwind.customer_customer_demo ` +
		`WHERE customer_type_id = ?`
	// run
	logf(sqlstr, customerTypeID)
	rows, err := db.QueryContext(ctx, sqlstr, customerTypeID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*CustomerCustomerDemo
	for rows.Next() {
		ccd := CustomerCustomerDemo{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ccd.CustomerID, &ccd.CustomerTypeID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ccd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Customer returns the Customer associated with the CustomerCustomerDemo's CustomerID (customer_id).
//
// Generated from foreign key 'customer_customer_demo_ibfk_1'.
func (ccd *CustomerCustomerDemo) Customer(ctx context.Context, db DB) (*Customer, error) {
	return CustomerByCustomerID(ctx, db, ccd.CustomerID)
}

// CustomerDemographic returns the CustomerDemographic associated with the CustomerCustomerDemo's CustomerTypeID (customer_type_id).
//
// Generated from foreign key 'customer_customer_demo_ibfk_2'.
func (ccd *CustomerCustomerDemo) CustomerDemographic(ctx context.Context, db DB) (*CustomerDemographic, error) {
	return CustomerDemographicByCustomerTypeID(ctx, db, ccd.CustomerTypeID)
}
