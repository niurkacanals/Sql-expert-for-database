// Package oracle contains the types for schema 'django'.
package oracle

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// AuthGroup represents a row from 'django.auth_group'.
type AuthGroup struct {
	ID   float64        // id
	Name sql.NullString // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AuthGroup exists in the database.
func (ag *AuthGroup) Exists() bool {
	return ag._exists
}

// Deleted provides information if the AuthGroup has been deleted from the database.
func (ag *AuthGroup) Deleted() bool {
	return ag._deleted
}

// Insert inserts the AuthGroup to the database.
func (ag *AuthGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO django.auth_group (` +
		`name` +
		`) VALUES (` +
		`:1` +
		`) RETURNING id /*lastInsertId*/ INTO :pk`

	// run query
	XOLog(sqlstr, ag.Name, nil)
	res, err := db.Exec(sqlstr, ag.Name, nil)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ag.ID = float64(id)
	ag._exists = true

	return nil
}

// Update updates the AuthGroup in the database.
func (ag *AuthGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ag._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE django.auth_group SET ` +
		`name = :1` +
		` WHERE id = :2`

	// run query
	XOLog(sqlstr, ag.Name, ag.ID)
	_, err = db.Exec(sqlstr, ag.Name, ag.ID)
	return err
}

// Save saves the AuthGroup to the database.
func (ag *AuthGroup) Save(db XODB) error {
	if ag.Exists() {
		return ag.Update(db)
	}

	return ag.Insert(db)
}

// Delete deletes the AuthGroup from the database.
func (ag *AuthGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ag._exists {
		return nil
	}

	// if deleted, bail
	if ag._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM django.auth_group WHERE id = :1`

	// run query
	XOLog(sqlstr, ag.ID)
	_, err = db.Exec(sqlstr, ag.ID)
	if err != nil {
		return err
	}

	// set deleted
	ag._deleted = true

	return nil
}

// AuthGroupByID retrieves a row from 'django.auth_group' as a AuthGroup.
//
// Generated from index 'sys_c004961'.
func AuthGroupByID(db XODB, id float64) (*AuthGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM django.auth_group ` +
		`WHERE id = :1`

	// run query
	XOLog(sqlstr, id)
	ag := AuthGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ag.ID, &ag.Name)
	if err != nil {
		return nil, err
	}

	return &ag, nil
}

// AuthGroupByName retrieves a row from 'django.auth_group' as a AuthGroup.
//
// Generated from index 'sys_c004962'.
func AuthGroupByName(db XODB, name sql.NullString) (*AuthGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM django.auth_group ` +
		`WHERE name = :1`

	// run query
	XOLog(sqlstr, name)
	ag := AuthGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&ag.ID, &ag.Name)
	if err != nil {
		return nil, err
	}

	return &ag, nil
}
