package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// BooktestAuthor represents a row from 'public.booktest_author'.
type BooktestAuthor struct {
	AuthorID int64  `json:"author_id"` // author_id
	Name     string `json:"name"`      // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the BooktestAuthor exists in the database.
func (ba *BooktestAuthor) Exists() bool {
	return ba._exists
}

// Deleted returns true when the BooktestAuthor has been marked for deletion from
// the database.
func (ba *BooktestAuthor) Deleted() bool {
	return ba._deleted
}

// Insert inserts the BooktestAuthor to the database.
func (ba *BooktestAuthor) Insert(ctx context.Context, db DB) error {
	switch {
	case ba._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ba._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.booktest_author (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING author_id`
	// run
	logf(sqlstr, ba.Name)
	if err := db.QueryRowContext(ctx, sqlstr, ba.Name).Scan(&ba.AuthorID); err != nil {
		return logerror(err)
	}
	// set exists
	ba._exists = true
	return nil
}

// Update updates a BooktestAuthor in the database.
func (ba *BooktestAuthor) Update(ctx context.Context, db DB) error {
	switch {
	case !ba._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ba._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.booktest_author SET ` +
		`name = $1 ` +
		`WHERE author_id = $2`
	// run
	logf(sqlstr, ba.Name, ba.AuthorID)
	if _, err := db.ExecContext(ctx, sqlstr, ba.Name, ba.AuthorID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the BooktestAuthor to the database.
func (ba *BooktestAuthor) Save(ctx context.Context, db DB) error {
	if ba.Exists() {
		return ba.Update(ctx, db)
	}
	return ba.Insert(ctx, db)
}

// Upsert performs an upsert for BooktestAuthor.
func (ba *BooktestAuthor) Upsert(ctx context.Context, db DB) error {
	switch {
	case ba._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.booktest_author (` +
		`author_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (author_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, ba.AuthorID, ba.Name)
	if _, err := db.ExecContext(ctx, sqlstr, ba.AuthorID, ba.Name); err != nil {
		return err
	}
	// set exists
	ba._exists = true
	return nil
}

// Delete deletes the BooktestAuthor from the database.
func (ba *BooktestAuthor) Delete(ctx context.Context, db DB) error {
	switch {
	case !ba._exists: // doesn't exist
		return nil
	case ba._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.booktest_author ` +
		`WHERE author_id = $1`
	// run
	logf(sqlstr, ba.AuthorID)
	if _, err := db.ExecContext(ctx, sqlstr, ba.AuthorID); err != nil {
		return logerror(err)
	}
	// set deleted
	ba._deleted = true
	return nil
}

// BooktestAuthorByAuthorID retrieves a row from 'public.booktest_author' as a BooktestAuthor.
//
// Generated from index 'booktest_author_pkey'.
func BooktestAuthorByAuthorID(ctx context.Context, db DB, authorID int64) (*BooktestAuthor, error) {
	// query
	const sqlstr = `SELECT ` +
		`author_id, name ` +
		`FROM public.booktest_author ` +
		`WHERE author_id = $1`
	// run
	logf(sqlstr, authorID)
	ba := BooktestAuthor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, authorID).Scan(&ba.AuthorID, &ba.Name); err != nil {
		return nil, logerror(err)
	}
	return &ba, nil
}
