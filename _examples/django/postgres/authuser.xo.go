package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// AuthUser represents a row from 'public.auth_user'.
type AuthUser struct {
	ID          int          `json:"id"`           // id
	Password    string       `json:"password"`     // password
	LastLogin   sql.NullTime `json:"last_login"`   // last_login
	IsSuperuser bool         `json:"is_superuser"` // is_superuser
	Username    string       `json:"username"`     // username
	FirstName   string       `json:"first_name"`   // first_name
	LastName    string       `json:"last_name"`    // last_name
	Email       string       `json:"email"`        // email
	IsStaff     bool         `json:"is_staff"`     // is_staff
	IsActive    bool         `json:"is_active"`    // is_active
	DateJoined  time.Time    `json:"date_joined"`  // date_joined
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AuthUser exists in the database.
func (au *AuthUser) Exists() bool {
	return au._exists
}

// Deleted returns true when the AuthUser has been marked for deletion from
// the database.
func (au *AuthUser) Deleted() bool {
	return au._deleted
}

// Insert inserts the AuthUser to the database.
func (au *AuthUser) Insert(ctx context.Context, db DB) error {
	switch {
	case au._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case au._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.auth_user (` +
		`password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING id`
	// run
	logf(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined)
	if err := db.QueryRowContext(ctx, sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined).Scan(&au.ID); err != nil {
		return logerror(err)
	}
	// set exists
	au._exists = true
	return nil
}

// Update updates a AuthUser in the database.
func (au *AuthUser) Update(ctx context.Context, db DB) error {
	switch {
	case !au._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case au._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.auth_user SET ` +
		`password = $1, last_login = $2, is_superuser = $3, username = $4, first_name = $5, last_name = $6, email = $7, is_staff = $8, is_active = $9, date_joined = $10 ` +
		`WHERE id = $11`
	// run
	logf(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, au.ID)
	if _, err := db.ExecContext(ctx, sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, au.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AuthUser to the database.
func (au *AuthUser) Save(ctx context.Context, db DB) error {
	if au.Exists() {
		return au.Update(ctx, db)
	}
	return au.Insert(ctx, db)
}

// Upsert performs an upsert for AuthUser.
func (au *AuthUser) Upsert(ctx context.Context, db DB) error {
	switch {
	case au._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.auth_user (` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`password = EXCLUDED.password, last_login = EXCLUDED.last_login, is_superuser = EXCLUDED.is_superuser, username = EXCLUDED.username, first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, email = EXCLUDED.email, is_staff = EXCLUDED.is_staff, is_active = EXCLUDED.is_active, date_joined = EXCLUDED.date_joined `
	// run
	logf(sqlstr, au.ID, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined)
	if _, err := db.ExecContext(ctx, sqlstr, au.ID, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined); err != nil {
		return err
	}
	// set exists
	au._exists = true
	return nil
}

// Delete deletes the AuthUser from the database.
func (au *AuthUser) Delete(ctx context.Context, db DB) error {
	switch {
	case !au._exists: // doesn't exist
		return nil
	case au._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.auth_user ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, au.ID)
	if _, err := db.ExecContext(ctx, sqlstr, au.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	au._deleted = true
	return nil
}

// AuthUserByID retrieves a row from 'public.auth_user' as a AuthUser.
//
// Generated from index 'auth_user_pkey'.
func AuthUserByID(ctx context.Context, db DB, id int) (*AuthUser, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined ` +
		`FROM public.auth_user ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	au := AuthUser{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&au.ID, &au.Password, &au.LastLogin, &au.IsSuperuser, &au.Username, &au.FirstName, &au.LastName, &au.Email, &au.IsStaff, &au.IsActive, &au.DateJoined); err != nil {
		return nil, logerror(err)
	}
	return &au, nil
}

// AuthUserByUsername retrieves a row from 'public.auth_user' as a AuthUser.
//
// Generated from index 'auth_user_username_6821ab7c_like'.
func AuthUserByUsername(ctx context.Context, db DB, username string) ([]*AuthUser, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined ` +
		`FROM public.auth_user ` +
		`WHERE username = $1`
	// run
	logf(sqlstr, username)
	rows, err := db.QueryContext(ctx, sqlstr, username)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuthUser
	for rows.Next() {
		au := AuthUser{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&au.ID, &au.Password, &au.LastLogin, &au.IsSuperuser, &au.Username, &au.FirstName, &au.LastName, &au.Email, &au.IsStaff, &au.IsActive, &au.DateJoined); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &au)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuthUserByUsername retrieves a row from 'public.auth_user' as a AuthUser.
//
// Generated from index 'auth_user_username_key'.
func AuthUserByUsername(ctx context.Context, db DB, username string) (*AuthUser, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined ` +
		`FROM public.auth_user ` +
		`WHERE username = $1`
	// run
	logf(sqlstr, username)
	au := AuthUser{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, username).Scan(&au.ID, &au.Password, &au.LastLogin, &au.IsSuperuser, &au.Username, &au.FirstName, &au.LastName, &au.Email, &au.IsStaff, &au.IsActive, &au.DateJoined); err != nil {
		return nil, logerror(err)
	}
	return &au, nil
}
