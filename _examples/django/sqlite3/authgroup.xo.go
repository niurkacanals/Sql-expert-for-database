// Package sqlite3 contains generated code for schema 'django.db'.
package sqlite3

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// AuthGroup represents a row from 'auth_group'.
type AuthGroup struct {
	ID   int    `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AuthGroup exists in the database.
func (ag *AuthGroup) Exists() bool {
	return ag._exists
}

// Deleted returns true when the AuthGroup has been marked for deletion from
// the database.
func (ag *AuthGroup) Deleted() bool {
	return ag._deleted
}

// Insert inserts the AuthGroup to the database.
func (ag *AuthGroup) Insert(ctx context.Context, db DB) error {
	switch {
	case ag._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ag._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO auth_group (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ag.Name)
	res, err := db.ExecContext(ctx, sqlstr, ag.ID, ag.Name)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	ag.ID = int(id)
	// set exists
	ag._exists = true
	return nil
}

// Update updates a AuthGroup in the database.
func (ag *AuthGroup) Update(ctx context.Context, db DB) error {
	switch {
	case !ag._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ag._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE auth_group SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, ag.Name, ag.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ag.Name, ag.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AuthGroup to the database.
func (ag *AuthGroup) Save(ctx context.Context, db DB) error {
	if ag.Exists() {
		return ag.Update(ctx, db)
	}
	return ag.Insert(ctx, db)
}

// Upsert performs an upsert for AuthGroup.
func (ag *AuthGroup) Upsert(ctx context.Context, db DB) error {
	switch {
	case ag._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO auth_group (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, ag.ID, ag.Name)
	if _, err := db.ExecContext(ctx, sqlstr, ag.ID, ag.Name); err != nil {
		return logerror(err)
	}
	// set exists
	ag._exists = true
	return nil
}

// Delete deletes the AuthGroup from the database.
func (ag *AuthGroup) Delete(ctx context.Context, db DB) error {
	switch {
	case !ag._exists: // doesn't exist
		return nil
	case ag._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM auth_group ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ag.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ag.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ag._deleted = true
	return nil
}

// AuthGroupByID retrieves a row from 'auth_group' as a AuthGroup.
//
// Generated from index 'auth_group_id_pkey'.
func AuthGroupByID(ctx context.Context, db DB, id int) (*AuthGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM auth_group ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ag := AuthGroup{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ag.ID, &ag.Name); err != nil {
		return nil, logerror(err)
	}
	return &ag, nil
}

// AuthGroupByName retrieves a row from 'auth_group' as a AuthGroup.
//
// Generated from index 'sqlite_autoindex_auth_group_1'.
func AuthGroupByName(ctx context.Context, db DB, name string) (*AuthGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM auth_group ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	ag := AuthGroup{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&ag.ID, &ag.Name); err != nil {
		return nil, logerror(err)
	}
	return &ag, nil
}
