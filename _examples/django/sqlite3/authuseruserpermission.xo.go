package sqlite3

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// AuthUserUserPermission represents a row from 'auth_user_user_permissions'.
type AuthUserUserPermission struct {
	ID           int `json:"id"`            // id
	UserID       int `json:"user_id"`       // user_id
	PermissionID int `json:"permission_id"` // permission_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AuthUserUserPermission exists in the database.
func (auup *AuthUserUserPermission) Exists() bool {
	return auup._exists
}

// Deleted returns true when the AuthUserUserPermission has been marked for deletion from
// the database.
func (auup *AuthUserUserPermission) Deleted() bool {
	return auup._deleted
}

// Insert inserts the AuthUserUserPermission to the database.
func (auup *AuthUserUserPermission) Insert(ctx context.Context, db DB) error {
	switch {
	case auup._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case auup._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO auth_user_user_permissions (` +
		`id, user_id, permission_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, auup.UserID, auup.PermissionID)
	res, err := db.ExecContext(ctx, sqlstr, auup.ID, auup.UserID, auup.PermissionID)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	auup.ID = int(id)
	// set exists
	auup._exists = true
	return nil
}

// Update updates a AuthUserUserPermission in the database.
func (auup *AuthUserUserPermission) Update(ctx context.Context, db DB) error {
	switch {
	case !auup._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case auup._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE auth_user_user_permissions SET ` +
		`user_id = $1, permission_id = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, auup.UserID, auup.PermissionID, auup.ID)
	if _, err := db.ExecContext(ctx, sqlstr, auup.UserID, auup.PermissionID, auup.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AuthUserUserPermission to the database.
func (auup *AuthUserUserPermission) Save(ctx context.Context, db DB) error {
	if auup.Exists() {
		return auup.Update(ctx, db)
	}
	return auup.Insert(ctx, db)
}

// Upsert performs an upsert for AuthUserUserPermission.
func (auup *AuthUserUserPermission) Upsert(ctx context.Context, db DB) error {
	switch {
	case auup._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO auth_user_user_permissions (` +
		`id, user_id, permission_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, permission_id = EXCLUDED.permission_id `
	// run
	logf(sqlstr, auup.ID, auup.UserID, auup.PermissionID)
	if _, err := db.ExecContext(ctx, sqlstr, auup.ID, auup.UserID, auup.PermissionID); err != nil {
		return logerror(err)
	}
	// set exists
	auup._exists = true
	return nil
}

// Delete deletes the AuthUserUserPermission from the database.
func (auup *AuthUserUserPermission) Delete(ctx context.Context, db DB) error {
	switch {
	case !auup._exists: // doesn't exist
		return nil
	case auup._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM auth_user_user_permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, auup.ID)
	if _, err := db.ExecContext(ctx, sqlstr, auup.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	auup._deleted = true
	return nil
}

// AuthUserUserPermissionByID retrieves a row from 'auth_user_user_permissions' as a AuthUserUserPermission.
//
// Generated from index 'auth_user_user_permissions_id_pkey'.
func AuthUserUserPermissionByID(ctx context.Context, db DB, id int) (*AuthUserUserPermission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, permission_id ` +
		`FROM auth_user_user_permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	auup := AuthUserUserPermission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&auup.ID, &auup.UserID, &auup.PermissionID); err != nil {
		return nil, logerror(err)
	}
	return &auup, nil
}

// AuthUserUserPermissionsByPermissionID retrieves a row from 'auth_user_user_permissions' as a AuthUserUserPermission.
//
// Generated from index 'auth_user_user_permissions_permission_id_1fbb5f2c'.
func AuthUserUserPermissionsByPermissionID(ctx context.Context, db DB, permissionID int) ([]*AuthUserUserPermission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, permission_id ` +
		`FROM auth_user_user_permissions ` +
		`WHERE permission_id = $1`
	// run
	logf(sqlstr, permissionID)
	rows, err := db.QueryContext(ctx, sqlstr, permissionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuthUserUserPermission
	for rows.Next() {
		auup := AuthUserUserPermission{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&auup.ID, &auup.UserID, &auup.PermissionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &auup)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuthUserUserPermissionsByUserID retrieves a row from 'auth_user_user_permissions' as a AuthUserUserPermission.
//
// Generated from index 'auth_user_user_permissions_user_id_a95ead1b'.
func AuthUserUserPermissionsByUserID(ctx context.Context, db DB, userID int) ([]*AuthUserUserPermission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, permission_id ` +
		`FROM auth_user_user_permissions ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuthUserUserPermission
	for rows.Next() {
		auup := AuthUserUserPermission{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&auup.ID, &auup.UserID, &auup.PermissionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &auup)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuthUserUserPermissionByUserIDPermissionID retrieves a row from 'auth_user_user_permissions' as a AuthUserUserPermission.
//
// Generated from index 'auth_user_user_permissions_user_id_permission_id_14a6b632_uniq'.
func AuthUserUserPermissionByUserIDPermissionID(ctx context.Context, db DB, userID, permissionID int) (*AuthUserUserPermission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, permission_id ` +
		`FROM auth_user_user_permissions ` +
		`WHERE user_id = $1 AND permission_id = $2`
	// run
	logf(sqlstr, userID, permissionID)
	auup := AuthUserUserPermission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, permissionID).Scan(&auup.ID, &auup.UserID, &auup.PermissionID); err != nil {
		return nil, logerror(err)
	}
	return &auup, nil
}

// AuthPermission returns the AuthPermission associated with the AuthUserUserPermission's (PermissionID).
//
// Generated from foreign key 'auth_user_user_permissions_permission_id_fkey'.
func (auup *AuthUserUserPermission) AuthPermission(ctx context.Context, db DB) (*AuthPermission, error) {
	return AuthPermissionByID(ctx, db, auup.PermissionID)
}

// AuthUser returns the AuthUser associated with the AuthUserUserPermission's (UserID).
//
// Generated from foreign key 'auth_user_user_permissions_user_id_fkey'.
func (auup *AuthUserUserPermission) AuthUser(ctx context.Context, db DB) (*AuthUser, error) {
	return AuthUserByID(ctx, db, auup.UserID)
}
