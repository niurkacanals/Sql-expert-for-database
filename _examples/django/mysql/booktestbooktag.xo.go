package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// BooktestBookTag represents a row from 'django.booktest_book_tags'.
type BooktestBookTag struct {
	ID     int   `json:"id"`      // id
	BookID int64 `json:"book_id"` // book_id
	TagID  int64 `json:"tag_id"`  // tag_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the BooktestBookTag exists in the database.
func (bbt *BooktestBookTag) Exists() bool {
	return bbt._exists
}

// Deleted returns true when the BooktestBookTag has been marked for deletion from
// the database.
func (bbt *BooktestBookTag) Deleted() bool {
	return bbt._deleted
}

// Insert inserts the BooktestBookTag to the database.
func (bbt *BooktestBookTag) Insert(ctx context.Context, db DB) error {
	switch {
	case bbt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case bbt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO django.booktest_book_tags (` +
		`book_id, tag_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, bbt.BookID, bbt.TagID)
	res, err := db.ExecContext(ctx, sqlstr, bbt.BookID, bbt.TagID)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	bbt.ID = int(id)
	// set exists
	bbt._exists = true
	return nil
}

// Update updates a BooktestBookTag in the database.
func (bbt *BooktestBookTag) Update(ctx context.Context, db DB) error {
	switch {
	case !bbt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case bbt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE django.booktest_book_tags SET ` +
		`book_id = ?, tag_id = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, bbt.BookID, bbt.TagID, bbt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bbt.BookID, bbt.TagID, bbt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the BooktestBookTag to the database.
func (bbt *BooktestBookTag) Save(ctx context.Context, db DB) error {
	if bbt.Exists() {
		return bbt.Update(ctx, db)
	}
	return bbt.Insert(ctx, db)
}

// Upsert performs an upsert for BooktestBookTag.
func (bbt *BooktestBookTag) Upsert(ctx context.Context, db DB) error {
	switch {
	case bbt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO django.booktest_book_tags (` +
		`id, book_id, tag_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`book_id = VALUES(book_id), tag_id = VALUES(tag_id)`
	// run
	logf(sqlstr, bbt.ID, bbt.BookID, bbt.TagID)
	if _, err := db.ExecContext(ctx, sqlstr, bbt.ID, bbt.BookID, bbt.TagID); err != nil {
		return err
	}
	// set exists
	bbt._exists = true
	return nil
}

// Delete deletes the BooktestBookTag from the database.
func (bbt *BooktestBookTag) Delete(ctx context.Context, db DB) error {
	switch {
	case !bbt._exists: // doesn't exist
		return nil
	case bbt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM django.booktest_book_tags ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, bbt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bbt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	bbt._deleted = true
	return nil
}

// BooktestBookTagByBookIDTagID retrieves a row from 'django.booktest_book_tags' as a BooktestBookTag.
//
// Generated from index 'booktest_book_tags_book_id_tag_id_83102575_uniq'.
func BooktestBookTagByBookIDTagID(ctx context.Context, db DB, bookID, tagID int64) (*BooktestBookTag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, book_id, tag_id ` +
		`FROM django.booktest_book_tags ` +
		`WHERE book_id = ? AND tag_id = ?`
	// run
	logf(sqlstr, bookID, tagID)
	bbt := BooktestBookTag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, bookID, tagID).Scan(&bbt.ID, &bbt.BookID, &bbt.TagID); err != nil {
		return nil, logerror(err)
	}
	return &bbt, nil
}

// BooktestBookTagByID retrieves a row from 'django.booktest_book_tags' as a BooktestBookTag.
//
// Generated from index 'booktest_book_tags_id_pkey'.
func BooktestBookTagByID(ctx context.Context, db DB, id int) (*BooktestBookTag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, book_id, tag_id ` +
		`FROM django.booktest_book_tags ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	bbt := BooktestBookTag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&bbt.ID, &bbt.BookID, &bbt.TagID); err != nil {
		return nil, logerror(err)
	}
	return &bbt, nil
}

// BooktestBookTagsByTagID retrieves a row from 'django.booktest_book_tags' as a BooktestBookTag.
//
// Generated from index 'booktest_book_tags_tag_id_858da6e5_fk_booktest_tag_tag_id'.
func BooktestBookTagsByTagID(ctx context.Context, db DB, tagID int64) ([]*BooktestBookTag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, book_id, tag_id ` +
		`FROM django.booktest_book_tags ` +
		`WHERE tag_id = ?`
	// run
	logf(sqlstr, tagID)
	rows, err := db.QueryContext(ctx, sqlstr, tagID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*BooktestBookTag
	for rows.Next() {
		bbt := BooktestBookTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&bbt.ID, &bbt.BookID, &bbt.TagID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &bbt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// BooktestBook returns the BooktestBook associated with the BooktestBookTag's (BookID).
//
// Generated from foreign key 'booktest_book_tags_book_id_04f02754_fk_booktest_book_book_id'.
func (bbt *BooktestBookTag) BooktestBook(ctx context.Context, db DB) (*BooktestBook, error) {
	return BooktestBookByBookID(ctx, db, bbt.BookID)
}

// BooktestTag returns the BooktestTag associated with the BooktestBookTag's (TagID).
//
// Generated from foreign key 'booktest_book_tags_tag_id_858da6e5_fk_booktest_tag_tag_id'.
func (bbt *BooktestBookTag) BooktestTag(ctx context.Context, db DB) (*BooktestTag, error) {
	return BooktestTagByTagID(ctx, db, bbt.TagID)
}
