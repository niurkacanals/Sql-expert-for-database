package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// AEnumNullable is the 'a_enum_nullable' enum type from schema 'a_bit_of_everything'.
type AEnumNullable uint16

// AEnumNullable values.
const (
	// AEnumNullableOne is the 'ONE' a_enum_nullable.
	AEnumNullableOne AEnumNullable = 1
	// AEnumNullableTwo is the 'TWO' a_enum_nullable.
	AEnumNullableTwo AEnumNullable = 2
)

// String satisfies the fmt.Stringer interface.
func (aen AEnumNullable) String() string {
	switch aen {
	case AEnumNullableOne:
		return "ONE"
	case AEnumNullableTwo:
		return "TWO"
	}
	return fmt.Sprintf("AEnumNullable(%d)", aen)
}

// MarshalText marshals AEnumNullable into text.
func (aen AEnumNullable) MarshalText() ([]byte, error) {
	return []byte(aen.String()), nil
}

// UnmarshalText unmarshals AEnumNullable from text.
func (aen *AEnumNullable) UnmarshalText(buf []byte) error {
	switch s := string(buf); s {
	case "ONE":
		*aen = AEnumNullableOne
	case "TWO":
		*aen = AEnumNullableTwo
	default:
		return ErrInvalidAEnumNullable(s)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (aen AEnumNullable) Value() (driver.Value, error) {
	return aen.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (aen *AEnumNullable) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return aen.UnmarshalText(buf)
	}
	return ErrInvalidAEnumNullable(fmt.Sprintf("%T", v))
}

// NullAEnumNullable represents a null 'a_enum_nullable' enum for schema 'a_bit_of_everything'.
type NullAEnumNullable struct {
	AEnumNullable AEnumNullable
	// Valid is true if AEnumNullable is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (naen NullAEnumNullable) Value() (driver.Value, error) {
	if !naen.Valid {
		return nil, nil
	}
	return naen.AEnumNullable.Value()
}

// Scan satisfies the sql.Scanner interface.
func (naen *NullAEnumNullable) Scan(v interface{}) error {
	if v == nil {
		naen.AEnumNullable, naen.Valid = 0, false
		return nil
	}
	err := naen.AEnumNullable.Scan(v)
	naen.Valid = err == nil
	return err
}

// ErrInvalidAEnumNullable is the invalid AEnumNullable error.
type ErrInvalidAEnumNullable string

// Error satisfies the error interface.
func (err ErrInvalidAEnumNullable) Error() string {
	return fmt.Sprintf("invalid AEnumNullable(%s)", string(err))
}
