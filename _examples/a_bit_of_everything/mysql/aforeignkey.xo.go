package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// AForeignKey represents a row from 'a_bit_of_everything.a_foreign_key'.
type AForeignKey struct {
	AKey sql.NullInt64 `json:"a_key"` // a_key
}

// AForeignKeyByAKey retrieves a row from 'a_bit_of_everything.a_foreign_key' as a AForeignKey.
//
// Generated from index 'a_key'.
func AForeignKeyByAKey(ctx context.Context, db DB, aKey sql.NullInt64) ([]*AForeignKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`a_key ` +
		`FROM a_bit_of_everything.a_foreign_key ` +
		`WHERE a_key = ?`
	// run
	logf(sqlstr, aKey)
	rows, err := db.QueryContext(ctx, sqlstr, aKey)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AForeignKey
	for rows.Next() {
		afk := AForeignKey{}
		// scan
		if err := rows.Scan(&afk.AKey); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &afk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// APrimary returns the APrimary associated with the AForeignKey's (AKey).
//
// Generated from foreign key 'a_foreign_key_ibfk_1'.
func (afk *AForeignKey) APrimary(ctx context.Context, db DB) (*APrimary, error) {
	return APrimaryByAKey(ctx, db, int(afk.AKey.Int64))
}
