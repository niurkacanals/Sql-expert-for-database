// Package models contains the types for schema ''.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Book represents a row from .books.
type Book struct {
	BookID    int            // book_id
	AuthorID  sql.NullInt64  // author_id
	Isbn      sql.NullString // isbn
	Title     sql.NullString // title
	Year      sql.NullInt64  // year
	Available sql.NullString // available
	Tags      sql.NullString // tags

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Book exists in the database.
func (b *Book) Exists() bool {
	return b._exists
}

// Deleted provides information if the Book has been deleted from the database.
func (b *Book) Deleted() bool {
	return b._deleted
}

// Insert inserts the Book to the database.
func (b *Book) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO .books (` +
		`author_id, isbn, title, year, available, tags` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`) RETURNING book_id`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	err = db.QueryRow(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags).Scan(&b.BookID)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Book in the database.
func (b *Book) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE .books SET (` +
		`author_id, isbn, title, year, available, tags` +
		`) = ( ` +
		`?, ?, ?, ?, ?, ?` +
		`) WHERE book_id = $7`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	_, err = db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	return err
}

// Save saves the Book to the database.
func (b *Book) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Book.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Book) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO .books (` +
		`book_id, author_id, isbn, title, year, available, tags` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`) ON CONFLICT (book_id) DO UPDATE SET (` +
		`book_id, author_id, isbn, title, year, available, tags` +
		`) = (` +
		`EXCLUDED.book_id, EXCLUDED.author_id, EXCLUDED.isbn, EXCLUDED.title, EXCLUDED.year, EXCLUDED.available, EXCLUDED.tags` +
		`)`

	// run query
	XOLog(sqlstr, b.BookID, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	_, err = db.Exec(sqlstr, b.BookID, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Book from the database.
func (b *Book) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM .books WHERE book_id = $1`

	// run query
	XOLog(sqlstr, b.BookID)
	_, err = db.Exec(sqlstr, b.BookID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}
