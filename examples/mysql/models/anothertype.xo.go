// Package models contains the types for schema 'booktest'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Anothertype is the 'anothertype' enum type.
type Anothertype uint16

const (
	// Fiction2Anothertype is the anothertype for 'FICTION2'.
	Fiction2Anothertype = Anothertype(1)

	// Nonfiction2Anothertype is the anothertype for 'NONFICTION2'.
	Nonfiction2Anothertype = Anothertype(2)
)

// String returns the string value of the Anothertype.
func (a Anothertype) String() string {
	var enumVal string

	switch a {
	case Fiction2Anothertype:
		enumVal = "FICTION2"

	case Nonfiction2Anothertype:
		enumVal = "NONFICTION2"
	}

	return enumVal
}

// MarshalText marshals Anothertype into text.
func (a Anothertype) MarshalText() ([]byte, error) {
	return []byte(a.String()), nil
}

// UnmarshalText unmarshals Anothertype from text.
func (a *Anothertype) UnmarshalText(text []byte) error {
	switch string(text) {
	case "FICTION2":
		*a = Fiction2Anothertype

	case "NONFICTION2":
		*a = Nonfiction2Anothertype

	default:
		return errors.New("invalid Anothertype")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Anothertype.
func (a Anothertype) Value() (driver.Value, error) {
	return a.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Anothertype.
func (a *Anothertype) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Anothertype")
	}

	return a.UnmarshalText(buf)
}
