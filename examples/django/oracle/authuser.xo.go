// Package oracle contains the types for schema 'django'.
package oracle

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// AuthUser represents a row from 'django.auth_user'.
type AuthUser struct {
	ID          float64        // id
	Password    sql.NullString // password
	LastLogin   time.Time      // last_login
	IsSuperuser float64        // is_superuser
	Username    sql.NullString // username
	FirstName   sql.NullString // first_name
	LastName    sql.NullString // last_name
	Email       sql.NullString // email
	IsStaff     float64        // is_staff
	IsActive    float64        // is_active
	DateJoined  time.Time      // date_joined

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AuthUser exists in the database.
func (au *AuthUser) Exists() bool {
	return au._exists
}

// Deleted provides information if the AuthUser has been deleted from the database.
func (au *AuthUser) Deleted() bool {
	return au._deleted
}

// Insert inserts the AuthUser to the database.
func (au *AuthUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if au._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO django.auth_user (` +
		`password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined` +
		`) VALUES (` +
		`:1, :2, :3, :4, :5, :6, :7, :8, :9, :10` +
		`) RETURNING id /*lastInsertId*/ INTO :pk`

	// run query
	XOLog(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, nil)
	res, err := db.Exec(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, nil)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	au.ID = float64(id)
	au._exists = true

	return nil
}

// Update updates the AuthUser in the database.
func (au *AuthUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !au._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if au._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE django.auth_user SET ` +
		`password = :1, last_login = :2, is_superuser = :3, username = :4, first_name = :5, last_name = :6, email = :7, is_staff = :8, is_active = :9, date_joined = :10` +
		` WHERE id = :11`

	// run query
	XOLog(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, au.ID)
	_, err = db.Exec(sqlstr, au.Password, au.LastLogin, au.IsSuperuser, au.Username, au.FirstName, au.LastName, au.Email, au.IsStaff, au.IsActive, au.DateJoined, au.ID)
	return err
}

// Save saves the AuthUser to the database.
func (au *AuthUser) Save(db XODB) error {
	if au.Exists() {
		return au.Update(db)
	}

	return au.Insert(db)
}

// Delete deletes the AuthUser from the database.
func (au *AuthUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !au._exists {
		return nil
	}

	// if deleted, bail
	if au._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM django.auth_user WHERE id = :1`

	// run query
	XOLog(sqlstr, au.ID)
	_, err = db.Exec(sqlstr, au.ID)
	if err != nil {
		return err
	}

	// set deleted
	au._deleted = true

	return nil
}

// AuthUserByID retrieves a row from 'django.auth_user' as a AuthUser.
//
// Generated from index 'sys_c004976'.
func AuthUserByID(db XODB, id float64) (*AuthUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined ` +
		`FROM django.auth_user ` +
		`WHERE id = :1`

	// run query
	XOLog(sqlstr, id)
	au := AuthUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&au.ID, &au.Password, &au.LastLogin, &au.IsSuperuser, &au.Username, &au.FirstName, &au.LastName, &au.Email, &au.IsStaff, &au.IsActive, &au.DateJoined)
	if err != nil {
		return nil, err
	}

	return &au, nil
}

// AuthUserByUsername retrieves a row from 'django.auth_user' as a AuthUser.
//
// Generated from index 'sys_c004977'.
func AuthUserByUsername(db XODB, username sql.NullString) (*AuthUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined ` +
		`FROM django.auth_user ` +
		`WHERE username = :1`

	// run query
	XOLog(sqlstr, username)
	au := AuthUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&au.ID, &au.Password, &au.LastLogin, &au.IsSuperuser, &au.Username, &au.FirstName, &au.LastName, &au.Email, &au.IsStaff, &au.IsActive, &au.DateJoined)
	if err != nil {
		return nil, err
	}

	return &au, nil
}
