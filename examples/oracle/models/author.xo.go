// Package models contains the types for schema 'BOOKTEST'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Author represents a row from 'BOOKTEST.AUTHORS'.
type Author struct {
	AuthorID float64 // AUTHOR_ID
	Name     string  // NAME

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Author exists in the database.
func (a *Author) Exists() bool {
	return a._exists
}

// Deleted provides information if the Author has been deleted from the database.
func (a *Author) Deleted() bool {
	return a._deleted
}

// Insert inserts the Author to the database.
func (a *Author) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO BOOKTEST.AUTHORS (` +
		`NAME` +
		`) VALUES (` +
		`:1` +
		`) RETURNING AUTHOR_ID /*lastInsertId*/ INTO :pk`

	// run query
	XOLog(sqlstr, a.Name, nil)
	res, err := db.Exec(sqlstr, a.Name, nil)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.AuthorID = float64(id)
	a._exists = true

	return nil
}

// Update updates the Author in the database.
func (a *Author) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE BOOKTEST.AUTHORS SET ` +
		`NAME = :1` +
		` WHERE AUTHOR_ID = :1`

	// run query
	XOLog(sqlstr, a.Name, a.AuthorID)
	_, err = db.Exec(sqlstr, a.Name, a.AuthorID)
	return err
}

// Save saves the Author to the database.
func (a *Author) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Author from the database.
func (a *Author) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM BOOKTEST.AUTHORS WHERE AUTHOR_ID = :1`

	// run query
	XOLog(sqlstr, a.AuthorID)
	_, err = db.Exec(sqlstr, a.AuthorID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AuthorsByName retrieves a row from 'BOOKTEST.AUTHORS' as a Author.
//
// Generated from index 'AUTHORS_NAME_IDX'.
func AuthorsByName(db XODB, name string) ([]*Author, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`AUTHOR_ID, NAME ` +
		`FROM BOOKTEST.AUTHORS ` +
		`WHERE NAME = :1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Author{}
	for q.Next() {
		a := Author{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.AuthorID, &a.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AuthorByAuthorID retrieves a row from 'BOOKTEST.AUTHORS' as a Author.
//
// Generated from index 'SYS_C007059'.
func AuthorByAuthorID(db XODB, authorID float64) (*Author, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`AUTHOR_ID, NAME ` +
		`FROM BOOKTEST.AUTHORS ` +
		`WHERE AUTHOR_ID = :1`

	// run query
	XOLog(sqlstr, authorID)
	a := Author{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, authorID).Scan(&a.AuthorID, &a.Name)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
