// Package models contains the types for schema 'BOOKTEST'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Book represents a row from 'BOOKTEST.BOOKS'.
type Book struct {
	BookID    float64   // BOOK_ID
	AuthorID  float64   // AUTHOR_ID
	Isbn      string    // ISBN
	Title     string    // TITLE
	Year      float64   // YEAR
	Available time.Time // AVAILABLE
	Tags      string    // TAGS

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Book exists in the database.
func (b *Book) Exists() bool {
	return b._exists
}

// Deleted provides information if the Book has been deleted from the database.
func (b *Book) Deleted() bool {
	return b._deleted
}

// Insert inserts the Book to the database.
func (b *Book) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO BOOKTEST.BOOKS (` +
		`AUTHOR_ID, ISBN, TITLE, YEAR, AVAILABLE, TAGS` +
		`) VALUES (` +
		`:1, :2, :3, :4, :5, :6` +
		`) RETURNING BOOK_ID /*lastInsertId*/ INTO :pk`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, nil)
	res, err := db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, nil)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.BookID = float64(id)
	b._exists = true

	return nil
}

// Update updates the Book in the database.
func (b *Book) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE BOOKTEST.BOOKS SET ` +
		`AUTHOR_ID = :1, ISBN = :2, TITLE = :3, YEAR = :4, AVAILABLE = :5, TAGS = :6` +
		` WHERE BOOK_ID = :1`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	_, err = db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	return err
}

// Save saves the Book to the database.
func (b *Book) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Delete deletes the Book from the database.
func (b *Book) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM BOOKTEST.BOOKS WHERE BOOK_ID = :1`

	// run query
	XOLog(sqlstr, b.BookID)
	_, err = db.Exec(sqlstr, b.BookID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// Author returns the Author associated with the Book's AuthorID (AUTHOR_ID).
//
// Generated from foreign key 'SYS_C007069'.
func (b *Book) Author(db XODB) (*Author, error) {
	return AuthorByAuthorID(db, b.AuthorID)
}

// BooksByTitleYear retrieves a row from 'BOOKTEST.BOOKS' as a Book.
//
// Generated from index 'BOOKS_TITLE_IDX'.
func BooksByTitleYear(db XODB, title string, year float64) ([]*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`BOOK_ID, AUTHOR_ID, ISBN, TITLE, YEAR, AVAILABLE, TAGS ` +
		`FROM BOOKTEST.BOOKS ` +
		`WHERE TITLE = :1 AND YEAR = :2`

	// run query
	XOLog(sqlstr, title, year)
	q, err := db.Query(sqlstr, title, year)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Book{}
	for q.Next() {
		b := Book{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BookByBookID retrieves a row from 'BOOKTEST.BOOKS' as a Book.
//
// Generated from index 'SYS_C007067'.
func BookByBookID(db XODB, bookID float64) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`BOOK_ID, AUTHOR_ID, ISBN, TITLE, YEAR, AVAILABLE, TAGS ` +
		`FROM BOOKTEST.BOOKS ` +
		`WHERE BOOK_ID = :1`

	// run query
	XOLog(sqlstr, bookID)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, bookID).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// BookByIsbn retrieves a row from 'BOOKTEST.BOOKS' as a Book.
//
// Generated from index 'SYS_C007068'.
func BookByIsbn(db XODB, isbn string) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`BOOK_ID, AUTHOR_ID, ISBN, TITLE, YEAR, AVAILABLE, TAGS ` +
		`FROM BOOKTEST.BOOKS ` +
		`WHERE ISBN = :1`

	// run query
	XOLog(sqlstr, isbn)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, isbn).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
