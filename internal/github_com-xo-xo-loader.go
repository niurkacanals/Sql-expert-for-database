// Code generated by 'yaegi extract github.com/xo/xo/loader'. DO NOT EDIT.

package internal

import (
	"github.com/xo/xo/loader"
	"reflect"
)

func init() {
	Symbols["github.com/xo/xo/loader/loader"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CtxLoader":            reflect.ValueOf(loader.CtxLoader),
		"EnableOids":           reflect.ValueOf(loader.EnableOids),
		"Flags":                reflect.ValueOf(loader.Flags),
		"Get":                  reflect.ValueOf(loader.Get),
		"Int32":                reflect.ValueOf(loader.Int32),
		"MysqlEnumValues":      reflect.ValueOf(loader.MysqlEnumValues),
		"MysqlGoType":          reflect.ValueOf(loader.MysqlGoType),
		"OidsKey":              reflect.ValueOf(loader.OidsKey),
		"OracleGoType":         reflect.ValueOf(loader.OracleGoType),
		"PostgresFlags":        reflect.ValueOf(loader.PostgresFlags),
		"PostgresGoType":       reflect.ValueOf(loader.PostgresGoType),
		"PostgresIndexColumns": reflect.ValueOf(loader.PostgresIndexColumns),
		"PostgresTableColumns": reflect.ValueOf(loader.PostgresTableColumns),
		"PostgresViewStrip":    reflect.ValueOf(loader.PostgresViewStrip),
		"Register":             reflect.ValueOf(loader.Register),
		"SchemaGoType":         reflect.ValueOf(loader.SchemaGoType),
		"Sqlite3GoType":        reflect.ValueOf(loader.Sqlite3GoType),
		"SqlserverGoType":      reflect.ValueOf(loader.SqlserverGoType),
		"SqlserverViewStrip":   reflect.ValueOf(loader.SqlserverViewStrip),
		"Uint32":               reflect.ValueOf(loader.Uint32),

		// type definitions
		"Loader": reflect.ValueOf((*loader.Loader)(nil)),
	}
}
