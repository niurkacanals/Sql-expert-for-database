// Code generated by 'yaegi extract github.com/xo/xo/types'. DO NOT EDIT.

package internal

import (
	"github.com/xo/xo/types"
	"reflect"
)

func init() {
	Symbols["github.com/xo/xo/types/types"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DbKey":                reflect.ValueOf(types.DbKey),
		"DriverKey":            reflect.ValueOf(types.DriverKey),
		"DriverSchemaNthParam": reflect.ValueOf(types.DriverSchemaNthParam),
		"EmitterKey":           reflect.ValueOf(types.EmitterKey),
		"Int32Key":             reflect.ValueOf(types.Int32Key),
		"LoaderKey":            reflect.ValueOf(types.LoaderKey),
		"NthParamKey":          reflect.ValueOf(types.NthParamKey),
		"ParseType":            reflect.ValueOf(types.ParseType),
		"SchemaKey":            reflect.ValueOf(types.SchemaKey),
		"Uint32Key":            reflect.ValueOf(types.Uint32Key),

		// type definitions
		"ContextKey": reflect.ValueOf((*types.ContextKey)(nil)),
		"Datatype":   reflect.ValueOf((*types.Datatype)(nil)),
		"Enum":       reflect.ValueOf((*types.Enum)(nil)),
		"Field":      reflect.ValueOf((*types.Field)(nil)),
		"Flag":       reflect.ValueOf((*types.Flag)(nil)),
		"FlagSet":    reflect.ValueOf((*types.FlagSet)(nil)),
		"ForeignKey": reflect.ValueOf((*types.ForeignKey)(nil)),
		"Index":      reflect.ValueOf((*types.Index)(nil)),
		"Proc":       reflect.ValueOf((*types.Proc)(nil)),
		"Query":      reflect.ValueOf((*types.Query)(nil)),
		"Schema":     reflect.ValueOf((*types.Schema)(nil)),
		"Table":      reflect.ValueOf((*types.Table)(nil)),
		"XO":         reflect.ValueOf((*types.XO)(nil)),
	}
}
