package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// SqlserverIdentity represents a row from 'dbo.[custom sqlserver_identity]'.
type SqlserverIdentity struct {
	TableName string `json:"table_name"` // table_name
}

// SqlserverIdentities runs a custom query, returning results as SqlserverIdentity.
func SqlserverIdentities(ctx context.Context, db DB, schema string) ([]*SqlserverIdentity, error) {
	// query
	const sqlstr = `SELECT o.name AS table_name ` +
		`FROM sys.objects o ` +
		`INNER JOIN sys.columns c ON o.object_id = c.object_id ` +
		`WHERE c.is_identity = 1 AND SCHEMA_NAME(o.schema_id) = @p1 AND o.type = 'U'`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*SqlserverIdentity
	for rows.Next() {
		var si SqlserverIdentity
		// scan
		if err := rows.Scan(&si.TableName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &si)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
