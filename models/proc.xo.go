package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Proc represents a stored procedure.
type Proc struct {
	ProcName   string `json:"proc_name"`   // proc_name
	ReturnType string `json:"return_type"` // return_type
}

// PostgresProcs runs a custom query, returning results as Proc.
func PostgresProcs(ctx context.Context, db DB, schema string) ([]*Proc, error) {
	// query
	const sqlstr = `SELECT ` +
		`p.proname, ` + // ::varchar AS proc_name
		`pg_get_function_result(p.oid) ` + // ::varchar AS return_type
		`FROM pg_proc p ` +
		`JOIN ONLY pg_namespace n ON p.pronamespace = n.oid ` +
		`WHERE n.nspname = $1`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Proc
	for rows.Next() {
		var row Proc
		// scan
		if err := rows.Scan(&row.ProcName, &row.ReturnType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &row)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MysqlProcs runs a custom query, returning results as Proc.
func MysqlProcs(ctx context.Context, db DB, schema string) ([]*Proc, error) {
	// query
	const sqlstr = `SELECT ` +
		`r.routine_name AS proc_name, ` +
		`p.dtd_identifier AS return_type ` +
		`FROM information_schema.routines r ` +
		`INNER JOIN information_schema.parameters p ON p.specific_schema = r.routine_schema ` +
		`AND p.specific_name = r.routine_name ` +
		`AND p.ordinal_position = 0 ` +
		`WHERE r.routine_schema = ?`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Proc
	for rows.Next() {
		var row Proc
		// scan
		if err := rows.Scan(&row.ProcName, &row.ReturnType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &row)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SqlserverProcs runs a custom query, returning results as Proc.
func SqlserverProcs(ctx context.Context, db DB, schema string) ([]*Proc, error) {
	// query
	const sqlstr = `SELECT ` +
		`name AS proc_name, ` +
		`type AS return_type ` +
		`FROM sys.objects o ` +
		`WHERE o.type = 'FN' ` +
		`AND SCHEMA_NAME(o.schema_id) = @p1`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Proc
	for rows.Next() {
		var row Proc
		// scan
		if err := rows.Scan(&row.ProcName, &row.ReturnType); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &row)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
