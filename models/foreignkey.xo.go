package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ForeignKey is a foreign key.
type ForeignKey struct {
	ForeignKeyName string `json:"foreign_key_name"` // foreign_key_name
	ColumnName     string `json:"column_name"`      // column_name
	RefIndexName   string `json:"ref_index_name"`   // ref_index_name
	RefTableName   string `json:"ref_table_name"`   // ref_table_name
	RefColumnName  string `json:"ref_column_name"`  // ref_column_name
	KeyID          int    `json:"key_id"`           // key_id
	SeqNo          int    `json:"seq_no"`           // seq_no
}

// PostgresTableForeignKeys runs a custom query, returning results as ForeignKey.
func PostgresTableForeignKeys(ctx context.Context, db DB, schema, table string) ([]*ForeignKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`r.conname, ` + // ::varchar AS foreign_key_name
		`b.attname, ` + // ::varchar AS column_name
		`i.relname, ` + // ::varchar AS ref_index_name
		`c.relname, ` + // ::varchar AS ref_table_name
		`d.attname, ` + // ::varchar AS ref_column_name
		`0, ` + // ::integer AS key_id
		`0 ` + // ::integer AS seq_no
		`FROM pg_constraint r ` +
		`JOIN ONLY pg_class a ON a.oid = r.conrelid ` +
		`JOIN ONLY pg_attribute b ON b.attisdropped = false ` +
		`AND b.attnum = ANY(r.conkey) ` +
		`AND b.attrelid = r.conrelid ` +
		`JOIN ONLY pg_class i ON i.oid = r.conindid ` +
		`JOIN ONLY pg_class c ON c.oid = r.confrelid ` +
		`JOIN ONLY pg_attribute d ON d.attisdropped = false ` +
		`AND d.attnum = ANY(r.confkey) ` +
		`AND d.attrelid = r.confrelid ` +
		`JOIN ONLY pg_namespace n ON n.oid = r.connamespace ` +
		`WHERE r.contype = 'f' ` +
		`AND n.nspname = $1 ` +
		`AND a.relname = $2 ` +
		`ORDER BY r.conname, b.attname`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ForeignKey
	for rows.Next() {
		var fk ForeignKey
		// scan
		if err := rows.Scan(&fk.ForeignKeyName, &fk.ColumnName, &fk.RefIndexName, &fk.RefTableName, &fk.RefColumnName, &fk.KeyID, &fk.SeqNo); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MysqlTableForeignKeys runs a custom query, returning results as ForeignKey.
func MysqlTableForeignKeys(ctx context.Context, db DB, schema, table string) ([]*ForeignKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`constraint_name AS foreign_key_name, ` +
		`column_name AS column_name, ` +
		`referenced_table_name AS ref_table_name, ` +
		`referenced_column_name AS ref_column_name ` +
		`FROM information_schema.key_column_usage ` +
		`WHERE referenced_table_name IS NOT NULL ` +
		`AND table_schema = ? ` +
		`AND table_name = ?`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ForeignKey
	for rows.Next() {
		var fk ForeignKey
		// scan
		if err := rows.Scan(&fk.ForeignKeyName, &fk.ColumnName, &fk.RefTableName, &fk.RefColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Sqlite3TableForeignKeys runs a custom query, returning results as ForeignKey.
func Sqlite3TableForeignKeys(ctx context.Context, db DB, schema, table string) ([]*ForeignKey, error) {
	// query
	sqlstr := `/* ` + schema + ` */ ` +
		`SELECT ` +
		`id AS key_id, ` +
		`seq AS seq_no, ` +
		`"table" AS ref_table_name, ` +
		`"from" AS column_name, ` +
		`"to" AS ref_column_name ` +
		`FROM pragma_foreign_key_list($1)`
	// run
	logf(sqlstr, table)
	rows, err := db.QueryContext(ctx, sqlstr, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ForeignKey
	for rows.Next() {
		var fk ForeignKey
		// scan
		if err := rows.Scan(&fk.KeyID, &fk.SeqNo, &fk.RefTableName, &fk.ColumnName, &fk.RefColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SqlserverTableForeignKeys runs a custom query, returning results as ForeignKey.
func SqlserverTableForeignKeys(ctx context.Context, db DB, schema, table string) ([]*ForeignKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`f.name AS foreign_key_name, ` +
		`c.name AS column_name, ` +
		`o.name AS ref_table_name, ` +
		`x.name AS ref_column_name ` +
		`FROM sysobjects f ` +
		`INNER JOIN sysobjects t ON f.parent_obj = t.id ` +
		`INNER JOIN sysreferences r ON f.id = r.constid ` +
		`INNER JOIN sysobjects o ON r.rkeyid = o.id ` +
		`INNER JOIN syscolumns c ON r.rkeyid = c.id ` +
		`AND r.rkey1 = c.colid ` +
		`INNER JOIN syscolumns x ON r.fkeyid = x.id ` +
		`AND r.fkey1 = x.colid ` +
		`WHERE f.type = 'F' ` +
		`AND t.type = 'U' ` +
		`AND SCHEMA_NAME(t.uid) = @p1 ` +
		`AND t.name = @p2`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ForeignKey
	for rows.Next() {
		var fk ForeignKey
		// scan
		if err := rows.Scan(&fk.ForeignKeyName, &fk.ColumnName, &fk.RefTableName, &fk.RefColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// OracleTableForeignKeys runs a custom query, returning results as ForeignKey.
func OracleTableForeignKeys(ctx context.Context, db DB, schema, table string) ([]*ForeignKey, error) {
	// query
	const sqlstr = `SELECT ` +
		`LOWER(a.constraint_name) AS foreign_key_name, ` +
		`LOWER(a.column_name) AS column_name, ` +
		`LOWER(r.constraint_name) AS ref_index_name, ` +
		`LOWER(r.table_name) AS ref_table_name ` +
		`FROM all_cons_columns a ` +
		`JOIN all_constraints c ON a.owner = c.owner ` +
		`AND a.constraint_name = c.constraint_name ` +
		`JOIN all_constraints r ON c.r_owner = r.owner ` +
		`AND c.r_constraint_name = r.constraint_name ` +
		`WHERE c.constraint_type = 'R' ` +
		`AND a.owner = UPPER(:1) ` +
		`AND a.table_name = UPPER(:2)`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ForeignKey
	for rows.Next() {
		var fk ForeignKey
		// scan
		if err := rows.Scan(&fk.ForeignKeyName, &fk.ColumnName, &fk.RefIndexName, &fk.RefTableName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
