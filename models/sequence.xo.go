package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Sequence represents a row from 'public.[custom sequence]'.
type Sequence struct {
	TableName string `json:"table_name"` // table_name
}

// PostgresSequences runs a custom query, returning results as Sequence.
func PostgresSequences(ctx context.Context, db DB, schema string) ([]*Sequence, error) {
	// query
	const sqlstr = `SELECT ` +
		`t.relname ` + // ::varchar AS table_name
		`FROM pg_class s ` +
		`JOIN pg_depend d ON d.objid = s.oid ` +
		`JOIN pg_class t ON d.objid = s.oid AND d.refobjid = t.oid ` +
		`JOIN pg_namespace n ON n.oid = s.relnamespace ` +
		`WHERE n.nspname = $1 AND s.relkind = 'S'`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Sequence
	for rows.Next() {
		var s Sequence
		// scan
		if err := rows.Scan(&s.TableName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MysqlSequences runs a custom query, returning results as Sequence.
func MysqlSequences(ctx context.Context, db DB, schema string) ([]*Sequence, error) {
	// query
	const sqlstr = `SELECT ` +
		`table_name ` +
		`FROM information_schema.tables ` +
		`WHERE auto_increment IS NOT NULL AND table_schema = ?`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Sequence
	for rows.Next() {
		var s Sequence
		// scan
		if err := rows.Scan(&s.TableName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Sqlite3Sequences runs a custom query, returning results as Sequence.
func Sqlite3Sequences(ctx context.Context, db DB) ([]*Sequence, error) {
	// query
	const sqlstr = `SELECT ` +
		`name AS table_name ` +
		`FROM sqlite_master ` +
		`WHERE type='table' AND LOWER(sql) LIKE '%autoincrement%' ` +
		`ORDER BY name`
	// run
	logf(sqlstr)
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Sequence
	for rows.Next() {
		var s Sequence
		// scan
		if err := rows.Scan(&s.TableName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
