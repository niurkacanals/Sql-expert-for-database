// Code generated by go-bindata.
// sources:
// templates/db.go.tpl
// templates/enum.go.tpl
// templates/index.go.tpl
// templates/model.go.tpl
// templates/package.go.tpl
// templates/proc.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\x51\x4e\xc3\x30\x0c\x06\xe0\xe7\xe5\x14\xff\xe3\x86\xa6\xf4\x0e\x08\x0e\x00\xec\x02\x59\xea\x92\x88\x36\x1e\xb6\xab\x6d\xaa\x7a\x77\xd2\x4a\x54\x02\x09\xf1\xea\xdf\x9f\xfd\x37\x0d\x9e\x1e\x91\x15\x96\x08\x91\x87\x81\x0b\x72\x31\x92\x2e\x44\x42\xc7\x82\x36\x58\x38\x07\x25\xf0\x85\x24\x58\xe6\xb2\x2c\x07\x43\x0c\x05\x67\xc2\xa8\xd4\xe2\x9a\x2d\xb9\x7a\xcb\xee\x17\x52\x74\xc2\x03\xa6\x09\xfe\x2d\x26\x1a\x02\xe6\xd9\xd7\x70\xc9\x4f\xa9\xbe\xd2\xc4\x63\x5f\x0d\xcb\xc7\x0a\xb7\x17\x8d\x7e\xf6\xbe\xd6\x09\xa5\xfd\x39\x3b\xdd\xbc\x5b\x4e\xaf\x5d\xb7\x76\x93\xdb\x3d\xdf\x28\xee\xd5\x24\x97\xf7\x23\xbc\xf7\x5b\x38\xcd\x07\xec\x1f\x16\xfb\x4a\x3a\xf6\x76\x04\x89\xb0\x1c\xdc\xee\x65\x24\xb9\xff\x67\xf8\xaa\xbf\x44\x1d\xfd\x89\xbe\x8d\x9b\x9d\xfb\x0a\x00\x00\xff\xff\x68\x3e\xe0\x4e\x51\x01\x00\x00"

func dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_dbGoTpl,
		"db.go.tpl",
	)
}

func dbGoTpl() (*asset, error) {
	bytes, err := dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xeb\x20\x14\xc5\x67\xee\xa7\xb8\xf2\x12\x13\x25\x8e\xde\xf2\x86\x27\xbd\xa9\xea\xd8\x2c\x4d\xbb\x54\x1d\xa8\x83\x13\x24\x1b\x57\xfc\x49\x1a\x59\xfe\xee\x05\x83\x25\x88\x92\x2c\x16\xbe\x70\xee\xfd\x9d\x03\x9b\x0d\x0e\x03\x56\xbb\xcb\x37\xc7\x71\x44\xa1\xd1\x1c\x39\x2e\xe6\xda\x96\x19\x71\xf2\x3b\x0b\xe4\xd2\x76\x68\x5c\xad\x02\xff\xcd\x64\x56\x48\xf3\xe7\x2f\x40\xdd\x4b\x6d\xb0\x84\x61\x58\xa3\x62\xf2\xc0\xb1\x7a\x67\xad\xe5\xda\x1d\x02\x12\x67\x3d\xbb\x46\x51\x78\x63\x74\x5a\x6a\x7a\x15\x50\xa6\x26\x9e\xa2\x02\xf2\xa0\x45\xba\xfe\x3f\xfd\x3d\x79\xa0\x59\xed\xb0\x9c\x8b\x3d\xae\xdd\x92\x02\x38\x9c\x57\xa3\x84\x3c\xa0\xe2\xc6\x2a\x19\xe6\xeb\x50\x3a\x4d\x9a\xbe\xb9\x66\xaa\xa0\xb1\xb2\xc6\xb2\x4e\x8b\x34\x36\x2a\xe9\x2c\x1f\x80\x9c\x98\x42\x1d\xff\x01\x88\x3e\x0b\x53\x1f\xd1\xe9\xee\xa4\x53\x33\xcd\x1f\xe4\xf3\x0f\x08\xd1\xce\x55\x91\xe6\x51\xa4\x96\xc8\xe8\xc6\x04\x2b\xa8\x61\x9c\x0c\xbe\x30\xa5\x8f\xac\xdd\xf1\x1f\x83\x5d\x58\xeb\xfc\xc2\xa5\xe9\xd1\xb8\xed\x3b\xc6\x92\x06\xce\x5d\xf9\xf1\xf9\x75\x31\x7c\x85\x5c\xa9\x5e\x51\x6f\x33\x0e\x0c\x1b\x65\x5d\xcd\x49\xd0\x15\x4a\xd1\x46\x8c\x37\xd9\x25\x20\x56\xde\x44\x69\x54\xdf\x5d\xa1\x2c\x33\x96\xac\x4b\xe9\x4f\xc6\xb1\x34\xf0\x78\x9c\x18\x73\x88\x7d\x3a\x43\xc9\xc3\xc4\xf3\x3c\x7d\xca\xcb\x3a\x3e\x9e\xdb\x17\x91\x45\xbe\xe7\x0d\xb3\xad\xf1\xb2\x18\xc4\x44\xa2\xab\x2d\x3f\x97\x85\x90\xee\x19\x89\x7d\xea\xb2\xa0\xd9\x3d\xc5\x88\x7e\x03\x00\x00\xff\xff\x1e\xee\xeb\xff\x86\x03\x00\x00"

func enumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_enumGoTpl,
		"enum.go.tpl",
	)
}

func enumGoTpl() (*asset, error) {
	bytes, err := enumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x02\x04\x00\x00\xff\xff\x93\x06\xd7\x32\x01\x00\x00\x00"

func indexGoTplBytes() ([]byte, error) {
	return bindataRead(
		_indexGoTpl,
		"index.go.tpl",
	)
}

func indexGoTpl() (*asset, error) {
	bytes, err := indexGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdf\x73\xe2\x36\x10\x7e\xc6\x7f\xc5\x1e\xd3\x69\x4d\x8f\xf3\x4d\x1f\xfa\xd0\x9b\xe1\xe1\x5a\x7c\x29\xd3\x94\x24\xfc\x68\x1f\x83\xc0\x4b\xe2\xa9\x91\x88\x24\x93\x30\x4c\xfe\xf7\x6a\x25\xd9\x31\xb5\x4b\x0d\x9d\x7b\x49\xb0\xb4\xbb\xdf\xb7\xd2\xf7\xad\xfd\xf1\x23\x1c\x0e\x10\xcd\xf6\x5b\x84\xd7\x57\x90\xb8\x95\xa8\x90\x6b\x05\x0c\xa4\x78\x86\xb5\x14\x1b\x8a\x48\xd7\x26\x88\x2d\x33\x9c\xae\x1e\x71\xc3\x4c\xac\x4d\x3b\x5a\x89\xcc\x12\xf2\xa4\xba\x37\x66\x1b\xaa\x1b\x05\x9a\x00\xaa\x48\x4a\xcb\x7c\xa5\xe1\x10\x1c\x0e\x1f\x40\x32\xfe\x80\x10\x7d\x49\x31\x4b\x94\xd9\x0d\x3a\x14\x6a\x1f\x29\xd6\x3c\x48\xb4\x15\xa2\x2b\xe1\x0b\x94\x9c\x1e\x28\x62\xe1\x10\xe9\xf7\xa2\x64\x01\xbe\xb9\x5f\x44\x96\x6f\xb8\xa7\x62\xf1\xdc\xbe\xfd\x49\x45\x6e\x65\xba\x61\x72\xff\x1b\xee\x0b\xc8\x20\xe8\x98\xe4\x17\x01\x6b\x4b\x29\xe8\xdc\xe3\x4b\xaa\xb4\xea\xc3\x7d\x82\x19\x6a\x4c\x60\x29\x44\x16\x94\x58\x81\x49\xf1\x94\x1a\xaa\x99\x5a\xb1\xcd\x87\xc4\xe4\xca\x4d\xca\x51\x51\xac\x7e\x3c\x3e\x14\x07\x02\x29\xb7\x3b\x09\xd3\x6c\xc9\x14\x46\xc1\x3a\xe7\x2b\x08\x35\x7c\x5f\x09\xee\xf9\x92\x61\xcf\x52\x31\x27\xd9\x31\x87\x94\x4b\x93\x1b\x79\xb6\x44\xca\x40\x0f\x3d\xe3\xad\x14\xbb\x34\x21\x64\xbe\x16\x72\xc3\x74\x2a\x78\x13\x8b\x47\xa6\x60\x89\xc8\xa1\x68\xd5\x8a\xa0\x0d\x23\x8f\xd4\x48\xc9\x17\xf3\x9c\x46\x5c\xa1\xd4\x86\x09\xfd\x53\x35\x0a\x5a\xb4\xc2\x73\x55\xc2\x64\x09\xc3\x9f\x7b\x80\x52\x0a\x49\xa0\x3b\x26\xe9\xc1\x2d\xb8\xab\x34\x6d\xb2\x4c\x22\x4b\xf6\xee\x90\xfb\xb0\x64\x69\x16\x74\xa8\xfd\xe2\xb8\x28\xb5\x20\x6c\x53\x55\x34\xc6\xe7\xb0\xeb\x48\x1e\xf1\x5b\x9b\x64\x4c\x3e\x1d\xd7\x54\xdd\x5e\xd0\xf1\xd2\x51\x4f\x19\x3c\xe5\x28\xf7\x41\x67\x25\xb8\xd2\xb4\x60\x24\x0f\x03\x58\x8c\xc6\xd3\x78\x32\x83\xd1\x78\x76\x03\xcd\x26\x3a\xf2\x0e\x84\x0b\x78\x6f\x88\x91\xae\x9d\x1a\x4b\xa3\x34\x48\xcd\xc7\xf6\xe0\x8f\xcf\xd7\xf3\x78\x5a\x4d\xde\xb1\x2c\xc7\x76\xc9\x93\x78\x36\x9f\x8c\x47\xe3\x2b\x4b\xf0\x2d\x90\x62\x5c\x7f\x32\xe7\x45\x7f\x74\xd2\x03\x48\x96\xd1\x1d\x3d\x4f\xc4\x73\xe8\x7a\xed\x53\xf2\x4a\x64\x27\x20\xbb\xba\x4b\xf7\x18\x4d\x57\x8c\x87\xdf\xea\xe8\x18\xad\xa0\xd5\xb3\xd7\x44\x30\xef\x06\xc0\xd3\xec\x1f\xf7\xe4\xce\xfc\xed\x16\x07\x60\x46\x0b\x06\xa5\xf6\x4c\x86\x17\xdd\x7c\x6b\x04\x85\x90\xdb\x7f\x75\xd1\xb5\xb4\x9d\xab\xd2\x52\x74\x89\x40\xc5\xbf\xd3\x35\xd1\xbd\xfb\x4f\xd5\x39\x96\x8d\xaa\xa3\xa2\xc0\x85\xaf\x5a\x51\x1d\x01\x3a\x9b\x1d\xeb\xbb\x30\xf2\xf9\x50\xe6\x2a\xfe\xa2\x09\x60\x7a\xb4\x45\xcc\xc8\x68\xa7\xf2\xf9\xed\xf0\xf3\x2c\x6e\x25\xf0\x69\x3c\xbb\x50\xe4\x03\x08\xe1\x22\x81\xff\xf9\x6b\x3c\x89\xeb\xe2\x36\x05\xbf\xb1\xa2\xcd\xb9\x3e\x59\xa7\x66\x82\xfb\x3e\x94\x3e\x88\x5f\x70\x75\xae\x07\xfa\x70\x42\xfd\x15\xad\x3b\x21\x4f\xd9\x0e\x41\x99\x3f\x17\x4f\x4e\xaa\x50\x93\xb0\x15\x4b\xf9\x56\xa9\x88\x45\x47\xa5\xe8\xfd\xe5\x97\x1b\xe5\x08\xee\x95\x26\xb3\xd3\x72\x8b\x92\x5e\x32\xe6\x3b\x82\x1b\xc3\xd9\x25\x12\x51\x85\x44\x64\xa2\x29\x61\x7c\x33\x8b\x3f\xc1\xad\x50\xfa\x41\xe2\xf4\xee\x1a\x7e\x8a\x7e\x7c\x0f\x82\x67\xfb\x7f\x35\x60\xe3\xd4\xaf\xd9\xdd\xbd\x8d\xbc\x23\xea\x27\x75\xe6\x5b\xed\xab\x18\x9e\xc8\x5e\x60\xde\x6a\xda\x09\x0f\x0e\xe3\xeb\xd8\x78\xf0\xcb\xe4\xe6\xf7\x56\x46\x3c\xe1\x8a\x1f\xce\x90\xfc\xff\x9d\xe3\x45\xc3\xcd\x83\xdc\x7f\x72\x7d\xa0\x8f\xb4\xbf\x03\x00\x00\xff\xff\xe4\xdf\x32\x10\xbe\x0a\x00\x00"

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_packageGoTpl,
		"package.go.tpl",
	)
}

func packageGoTpl() (*asset, error) {
	bytes, err := packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _procGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\xdf\x4e\xf2\x40\x10\xc5\xaf\x77\x9f\x62\xbe\xa4\xf9\x28\x49\x53\xee\x4d\x7a\xa3\xa2\x37\x86\x28\xf0\x00\x2c\xed\x20\x4d\xca\x2e\xcc\x6e\x31\xa4\xe9\xbb\x3b\xd3\x82\x8d\x12\x8d\x5e\xb5\x73\x76\xfe\xfc\xce\x99\x4c\xa0\x69\x20\x7d\xa8\x6d\x3e\x33\x3b\x84\xb6\x85\xdc\x54\x95\x87\xb0\x45\xf0\xc1\x11\x16\xb0\x27\x97\x63\x51\x13\xc2\x48\x7a\x17\xf9\x16\x77\x86\x3b\x53\xa9\xce\x53\xb1\xfc\x3f\x1b\xe2\x2a\x20\x2d\x4f\x7b\xf4\xac\x8e\xbb\xe5\x73\x0c\x35\x59\xd1\x58\x1a\x81\xb3\x50\xac\x53\xbd\xe1\x93\x5f\x6f\xc7\xc5\x1a\xee\x6f\x59\x24\x63\x5f\x11\xa2\x32\x81\x28\xc0\x4d\x06\xe9\xa3\xbb\x5a\x9e\xc0\x91\x3b\xa3\x52\x98\x65\x04\x83\x5c\xe0\xfe\xb6\xe5\x12\x6d\xd1\x01\xc4\xc3\x13\x2f\xf9\x84\x92\x00\x12\x39\x62\x48\xad\x8e\x86\xa4\xea\x15\xad\x15\xe7\xe2\x0f\x15\x1c\x6a\xa4\x93\x56\xb9\xb3\x3e\x88\xe0\x03\x41\x06\xab\xc5\xf4\x69\x7a\xb7\x84\x1f\xd3\xf8\x8d\x05\x6e\x2b\x37\xbd\x85\x04\x3e\xa0\xa3\xa6\x29\x39\x9b\x4e\x1e\x9c\xac\x7a\x2a\xaa\xed\x85\x4a\x98\xd9\x1a\x7c\xef\x50\x2b\xf1\x94\x49\xde\x2f\x32\x33\x77\x6f\x71\xef\xe2\xef\x19\x0f\x24\xec\xd9\xd8\xf8\x3f\xdf\x1c\x6b\xc5\xfc\x72\xe3\x5f\x06\xb6\xac\x24\x49\x45\x1d\x41\x4f\xc5\xda\x05\x6c\x56\x56\xd7\xe9\x6b\xd5\xb2\xad\xf3\x04\x7f\x12\xd9\xa2\x59\x7b\x0f\x00\x00\xff\xff\xf0\x13\x37\x2a\x98\x02\x00\x00"

func procGoTplBytes() ([]byte, error) {
	return bindataRead(
		_procGoTpl,
		"proc.go.tpl",
	)
}

func procGoTpl() (*asset, error) {
	bytes, err := procGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db.go.tpl": dbGoTpl,
	"enum.go.tpl": enumGoTpl,
	"index.go.tpl": indexGoTpl,
	"model.go.tpl": modelGoTpl,
	"package.go.tpl": packageGoTpl,
	"proc.go.tpl": procGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db.go.tpl": &bintree{dbGoTpl, map[string]*bintree{}},
	"enum.go.tpl": &bintree{enumGoTpl, map[string]*bintree{}},
	"index.go.tpl": &bintree{indexGoTpl, map[string]*bintree{}},
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"package.go.tpl": &bintree{packageGoTpl, map[string]*bintree{}},
	"proc.go.tpl": &bintree{procGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

