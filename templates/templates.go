// Code generated by go-bindata.
// sources:
// templates/enum.go.tpl
// templates/index.go.tpl
// templates/model.go.tpl
// templates/package.go.tpl
// templates/proc.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xeb\x20\x14\xc5\x67\xee\xa7\xb8\xf2\x12\x13\x25\x8e\xde\xf2\x86\x27\xbd\xa9\xea\xd8\x2c\x4d\xbb\x54\x1d\xa8\x83\x13\x24\x1b\x57\xfc\x49\x1a\x59\xfe\xee\x05\x83\x25\x88\x92\x2c\x16\xbe\x70\xee\xfd\x9d\x03\x9b\x0d\x0e\x03\x56\xbb\xcb\x37\xc7\x71\x44\xa1\xd1\x1c\x39\x2e\xe6\xda\x96\x19\x71\xf2\x3b\x0b\xe4\xd2\x76\x68\x5c\xad\x02\xff\xcd\x64\x56\x48\xf3\xe7\x2f\x40\xdd\x4b\x6d\xb0\x84\x61\x58\xa3\x62\xf2\xc0\xb1\x7a\x67\xad\xe5\xda\x1d\x02\x12\x67\x3d\xbb\x46\x51\x78\x63\x74\x5a\x6a\x7a\x15\x50\xa6\x26\x9e\xa2\x02\xf2\xa0\x45\xba\xfe\x3f\xfd\x3d\x79\xa0\x59\xed\xb0\x9c\x8b\x3d\xae\xdd\x92\x02\x38\x9c\x57\xa3\x84\x3c\xa0\xe2\xc6\x2a\x19\xe6\xeb\x50\x3a\x4d\x9a\xbe\xb9\x66\xaa\xa0\xb1\xb2\xc6\xb2\x4e\x8b\x34\x36\x2a\xe9\x2c\x1f\x80\x9c\x98\x42\x1d\xff\x01\x88\x3e\x0b\x53\x1f\xd1\xe9\xee\xa4\x53\x33\xcd\x1f\xe4\xf3\x0f\x08\xd1\xce\x55\x91\xe6\x51\xa4\x96\xc8\xe8\xc6\x04\x2b\xa8\x61\x9c\x0c\xbe\x30\xa5\x8f\xac\xdd\xf1\x1f\x83\x5d\x58\xeb\xfc\xc2\xa5\xe9\xd1\xb8\xed\x3b\xc6\x92\x06\xce\x5d\xf9\xf1\xf9\x75\x31\x7c\x85\x5c\xa9\x5e\x51\x6f\x33\x0e\x0c\x1b\x65\x5d\xcd\x49\xd0\x15\x4a\xd1\x46\x8c\x37\xd9\x25\x20\x56\xde\x44\x69\x54\xdf\x5d\xa1\x2c\x33\x96\xac\x4b\xe9\x4f\xc6\xb1\x34\xf0\x78\x9c\x18\x73\x88\x7d\x3a\x43\xc9\xc3\xc4\xf3\x3c\x7d\xca\xcb\x3a\x3e\x9e\xdb\x17\x91\x45\xbe\xe7\x0d\xb3\xad\xf1\xb2\x18\xc4\x44\xa2\xab\x2d\x3f\x97\x85\x90\xee\x19\x89\x7d\xea\xb2\xa0\xd9\x3d\x85\x88\x7e\x03\x00\x00\xff\xff\xf5\x1e\xee\xeb\x85\x03\x00\x00"

func enumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_enumGoTpl,
		"enum.go.tpl",
	)
}

func enumGoTpl() (*asset, error) {
	bytes, err := enumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func indexGoTplBytes() ([]byte, error) {
	return bindataRead(
		_indexGoTpl,
		"index.go.tpl",
	)
}

func indexGoTpl() (*asset, error) {
	bytes, err := indexGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x41\x6e\xc2\x30\x10\x45\xd7\xf8\x14\x7f\x09\x48\x35\x77\x68\x51\xbb\xeb\x86\x1e\x00\x27\x99\x40\x24\xc7\xa6\x63\xa7\x55\x65\xe5\xee\x1d\x3b\x11\x0a\x62\x93\x4d\xe2\x99\xf9\xfe\xef\x8f\x0f\x07\xa4\x04\xfd\xf5\x77\x23\x8c\x23\x98\x6e\x4c\x81\x5c\x0c\x30\x60\xff\x8b\x96\x7d\x9f\x15\x5d\x2b\x22\x53\x59\x3a\xd5\x57\xea\x8d\x68\xcb\xb5\x87\x8e\x96\x16\xb9\x66\x39\xfb\x34\x7d\xf6\xd5\x2a\x66\xc0\x92\x14\x22\x0f\x75\x44\x52\x29\xbd\x80\x8d\xbb\x10\xf4\x7b\x47\xb6\x09\x32\x55\x9b\x2c\x2d\x65\xd6\x4a\xc1\x54\x1c\xf4\x87\x9f\x0d\xee\x99\x2e\x59\x71\x9e\x88\xf9\x7c\xbe\xa7\xc0\xbc\xdc\x9b\xb7\x43\xef\xe6\x28\x85\x37\xcd\xd5\xa8\x94\x48\x4e\xe6\x87\x10\xe4\x13\x10\xaf\x8f\x21\xa3\x2f\xad\xc6\x44\x53\x99\x40\x5a\xb5\x83\xab\xb1\xad\xb1\x5f\xa8\x76\xc5\x61\xdb\x54\xd8\x87\x6f\xab\x8f\xaf\x3b\x10\xb3\x67\xd9\x6d\x23\xb1\x07\x76\x70\x9d\x9d\x61\x47\xb2\x14\xc5\xb1\xfc\x9e\x81\xe5\xb9\xd7\x20\x27\x9f\x15\xd0\xff\x00\x00\x00\xff\xff\xb9\xa1\x1a\xd9\xe1\x01\x00\x00"

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_packageGoTpl,
		"package.go.tpl",
	)
}

func packageGoTpl() (*asset, error) {
	bytes, err := packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _procGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x41\x4f\xc2\x40\x10\x85\xcf\xbb\xbf\x62\x4c\x1a\x29\xa6\x29\x77\x93\x5e\x54\xe4\x62\x88\x02\x3f\x80\xa5\x1d\xa4\x49\xd9\x85\xd9\x2d\x86\x34\xfd\xef\xce\xb4\x28\x51\x8c\xd1\xd3\xee\xbc\xbe\xed\xfb\xe6\x8d\x46\xd0\x34\x90\x3e\xd6\x36\x9f\x9a\x2d\x42\xdb\x42\x6e\xaa\xca\x43\xd8\x20\xf8\xe0\x08\x0b\xd8\x91\xcb\xb1\xa8\x09\x61\x20\xde\x79\xbe\xc1\xad\x61\x67\x2a\xd3\xe9\x55\x2c\xf7\x67\x43\x3c\x05\xa4\xc5\x71\x87\x9e\xd5\x61\xf7\xf3\x19\x86\x9a\xac\x68\x2c\x0d\xc0\x59\x28\x56\xa9\x5e\x73\xe4\xf7\xec\xb8\x58\xc1\x8d\xdf\x57\xe9\xc3\x1d\x7f\x21\x63\x5f\x11\xa2\x32\x81\x28\xc0\x6d\x06\xe9\xc4\x5d\x24\x24\x70\x60\x67\x54\x0a\xb8\x5c\x02\x5f\xf8\x44\x5b\x74\xf1\x1d\xd6\xc4\x7d\x21\x48\x00\x89\x1c\x31\x9b\x56\x07\x43\x32\xf5\x8a\xd6\x8a\xeb\xe0\x78\xd8\xd7\x48\x47\xad\x72\x67\x7d\x10\xc1\x07\x82\x0c\x96\xf3\xf1\xd3\xf8\x7e\x01\xbf\x96\xf0\x17\x68\xb6\x95\xeb\x1e\x3a\x81\x4f\xda\xa8\x69\x4a\xae\xa4\x93\xcf\x2b\x2c\x7b\x2a\xaa\xed\x07\x95\x30\x13\x06\xf8\x61\x35\xad\x64\x99\x4c\xfa\x7d\x11\xf3\xcc\xbd\xc5\x3d\xfe\xff\xeb\x3c\x23\xf0\xb2\xc6\xc6\xd7\x9c\x39\xd4\x8a\xc1\x25\xe3\x2a\x03\x5b\x56\x52\xa1\xa2\x8e\xe0\x84\x33\x2d\xab\xcb\xb2\xb5\x6a\x79\x8b\x93\x8f\x8f\x44\xde\xea\x56\xbf\x07\x00\x00\xff\xff\x04\x9e\x0d\xba\x7d\x02\x00\x00"

func procGoTplBytes() ([]byte, error) {
	return bindataRead(
		_procGoTpl,
		"proc.go.tpl",
	)
}

func procGoTpl() (*asset, error) {
	bytes, err := procGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.go.tpl": enumGoTpl,
	"index.go.tpl": indexGoTpl,
	"model.go.tpl": modelGoTpl,
	"package.go.tpl": packageGoTpl,
	"proc.go.tpl": procGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.go.tpl": &bintree{enumGoTpl, map[string]*bintree{}},
	"index.go.tpl": &bintree{indexGoTpl, map[string]*bintree{}},
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"package.go.tpl": &bintree{packageGoTpl, map[string]*bintree{}},
	"proc.go.tpl": &bintree{procGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

