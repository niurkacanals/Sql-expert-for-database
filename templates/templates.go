// Code generated by go-bindata.
// sources:
// templates/db.go.tpl
// templates/enum.go.tpl
// templates/index.go.tpl
// templates/model.go.tpl
// templates/package.go.tpl
// templates/proc.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\x51\x4e\xc3\x30\x0c\x06\xe0\xe7\xe5\x14\xff\xe3\x86\xa6\xf4\x0e\x08\x0e\x00\xec\x02\x59\xea\x92\x88\x36\x1e\xb6\xab\x6d\xaa\x7a\x77\xd2\x4a\x54\x02\x69\xaf\xfe\xfd\xd9\x7f\xd3\xe0\xe5\x19\x59\x61\x89\x10\x79\x18\xb8\x20\x17\x23\xe9\x42\x24\x74\x2c\x68\x83\x85\x73\x50\x02\x5f\x48\x82\x65\x2e\xcb\x72\x30\xc4\x50\x70\x26\x8c\x4a\x2d\xae\xd9\x92\xab\xb7\xec\x7e\x21\x45\x27\x3c\x60\x9a\xe0\x3f\x62\xa2\x21\x60\x9e\x7d\x0d\x97\xfc\x94\xea\x2b\x4d\x3c\xf6\xd5\xb0\x7c\xad\x70\x7b\xd1\xe8\x77\xef\x6b\x9d\x50\xda\xbf\xb3\xd3\xcd\xbb\xe5\xf4\xda\x75\x6b\x37\xb9\xdd\xeb\x8d\xe2\x5e\x4d\x72\xf9\x3c\xc2\x7b\xbf\x85\xd3\x7c\xc0\x7e\xa1\xef\xa4\x63\x6f\x47\x90\x08\xcb\xc1\xed\xde\x46\x92\xfb\x63\xf2\xb4\x1a\xbe\xea\x3f\x51\x47\x0f\xd1\xaf\x71\xb3\x73\x3f\x01\x00\x00\xff\xff\x0a\x76\x8d\x59\x50\x01\x00\x00"

func dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_dbGoTpl,
		"db.go.tpl",
	)
}

func dbGoTpl() (*asset, error) {
	bytes, err := dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xeb\x20\x14\xc5\x67\xee\xa7\xb8\xf2\x12\x13\x25\x8e\xde\xf2\x86\x27\xbd\xa9\xea\xd8\x2c\x4d\xbb\x54\x1d\xa8\x83\x13\x24\x1b\x57\xfc\x49\x1a\x59\xfe\xee\x05\x83\x25\x88\x92\x2c\x16\xbe\x70\xee\xfd\x9d\x03\x9b\x0d\x0e\x03\x56\xbb\xcb\x37\xc7\x71\x44\xa1\xd1\x1c\x39\x2e\xe6\xda\x96\x19\x71\xf2\x3b\x0b\xe4\xd2\x76\x68\x5c\xad\x02\xff\xcd\x64\x56\x48\xf3\xe7\x2f\x40\xdd\x4b\x6d\xb0\x84\x61\x58\xa3\x62\xf2\xc0\xb1\x7a\x67\xad\xe5\xda\x1d\x02\x12\x67\x3d\xbb\x46\x51\x78\x63\x74\x5a\x6a\x7a\x15\x50\xa6\x26\x9e\xa2\x02\xf2\xa0\x45\xba\xfe\x3f\xfd\x3d\x79\xa0\x59\xed\xb0\x9c\x8b\x3d\xae\xdd\x92\x02\x38\x9c\x57\xa3\x84\x3c\xa0\xe2\xc6\x2a\x19\xe6\xeb\x50\x3a\x4d\x9a\xbe\xb9\x66\xaa\xa0\xb1\xb2\xc6\xb2\x4e\x8b\x34\x36\x2a\xe9\x2c\x1f\x80\x9c\x98\x42\x1d\xff\x01\x88\x3e\x0b\x53\x1f\xd1\xe9\xee\xa4\x53\x33\xcd\x1f\xe4\xf3\x0f\x08\xd1\xce\x55\x91\xe6\x51\xa4\x96\xc8\xe8\xc6\x04\x2b\xa8\x61\x9c\x0c\xbe\x30\xa5\x8f\xac\xdd\xf1\x1f\x83\x5d\x58\xeb\xfc\xc2\xa5\xe9\xd1\xb8\xed\x3b\xc6\x92\x06\xce\x5d\xf9\xf1\xf9\x75\x31\x7c\x85\x5c\xa9\x5e\x51\x6f\x33\x0e\x0c\x1b\x65\x5d\xcd\x49\xd0\x15\x4a\xd1\x46\x8c\x37\xd9\x25\x20\x56\xde\x44\x69\x54\xdf\x5d\xa1\x2c\x33\x96\xac\x4b\xe9\x4f\xc6\xb1\x34\xf0\x78\x9c\x18\x73\x88\x7d\x3a\x43\xc9\xc3\xc4\xf3\x3c\x7d\xca\xcb\x3a\x3e\x9e\xdb\x17\x91\x45\xbe\xe7\x0d\xb3\xad\xf1\xb2\x18\xc4\x44\xa2\xab\x2d\x3f\x97\x85\x90\xee\x19\x89\x7d\xea\xb2\xa0\xd9\x3d\xc5\x88\x7e\x03\x00\x00\xff\xff\x1e\xee\xeb\xff\x86\x03\x00\x00"

func enumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_enumGoTpl,
		"enum.go.tpl",
	)
}

func enumGoTpl() (*asset, error) {
	bytes, err := enumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x02\x04\x00\x00\xff\xff\x93\x06\xd7\x32\x01\x00\x00\x00"

func indexGoTplBytes() ([]byte, error) {
	return bindataRead(
		_indexGoTpl,
		"index.go.tpl",
	)
}

func indexGoTpl() (*asset, error) {
	bytes, err := indexGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4f\x73\xfa\x36\x10\x3d\xe3\x4f\xb1\x3f\xa6\xd3\x9a\x86\x38\xd3\x43\x0f\xcd\x0c\x87\xb4\x38\x29\xd3\x94\x24\xfc\x69\x8f\x41\xe0\x25\xf1\xd4\x48\x44\x92\x49\x18\x26\xdf\xbd\x5a\x49\x76\x4c\x4d\xa9\x43\xe7\x77\x01\xdb\xda\xdd\xf7\xb4\x7a\x6f\xed\x8b\x0b\xd8\xed\x20\x9a\x6c\xd7\x08\xef\xef\x20\x71\x2d\x51\x21\xd7\x0a\x18\x48\xf1\x0a\x4b\x29\x56\x14\x91\x2e\x4d\x10\x9b\x67\x38\x5e\x3c\xe3\x8a\x99\x58\x9b\xb6\xf7\x24\x32\x8f\x90\x27\xd5\xb5\x21\x5b\x51\xdd\x28\xd0\x04\x50\x45\x52\x5a\xe6\x0b\x0d\xbb\x60\xb7\x3b\x07\xc9\xf8\x13\x42\x74\x9d\x62\x96\x28\xb3\x1a\xb4\x28\xd4\xde\x52\xac\xb9\x91\x68\x2b\x44\x37\xc2\x17\x28\x39\x3d\x51\xc4\xcc\x21\xd2\xf5\xac\x64\x01\x7e\x73\xbf\x88\x2c\x5f\x71\x4f\xc5\xe2\xb9\x75\x7b\x49\x45\xee\x65\xba\x62\x72\xfb\x1b\x6e\x0b\xc8\x20\x68\x99\xe4\x37\x01\x4b\x4b\x29\x68\x3d\xe2\x5b\xaa\xb4\xea\xc2\x63\x82\x19\x6a\x4c\x60\x2e\x44\x16\x94\x58\x81\x49\xf1\x94\x0e\x54\x33\xb5\x62\x9b\x0f\x89\xc9\x95\xab\x94\xa3\xa2\x58\xfd\xbc\xdf\x14\x07\x02\x29\xb7\x2b\x09\xd3\x6c\xce\x14\x46\xc1\x32\xe7\x0b\x08\x35\x7c\x5f\x09\xee\xf8\x92\x61\xc7\x52\x31\x9d\x6c\x99\x26\xe5\xd2\xe4\x46\x9e\x2d\x91\x32\xd0\x7d\xcf\x78\x2d\xc5\x26\x4d\x08\x99\x2f\x85\x5c\x31\x9d\x0a\x7e\x88\xc5\x33\x53\x30\x47\xe4\x50\x6c\xd5\x8a\xa0\x09\x23\x8f\x74\x90\x92\x2f\xe6\x39\x0d\xb8\x42\xa9\x0d\x13\xfa\x53\x35\x0a\x5a\x34\xc2\x73\x55\xc2\x64\x0e\xfd\x9f\x3b\x80\x52\x0a\x49\xa0\x1b\x26\xe9\xc6\x3d\x70\x47\x69\xb6\xc9\x32\x89\x2c\xd9\xba\x26\x77\x61\xce\xd2\x2c\x68\xd1\xf6\x8b\x76\x51\x6a\x41\xd8\xa6\xaa\x68\x88\xaf\x61\xdb\x91\x84\xa5\x49\xc0\xe4\x72\xbf\x8e\x6a\x77\x82\x96\x97\x8b\x7a\xc9\xe0\x25\x47\xb9\x0d\x5a\x0b\xc1\x95\xa6\x07\x46\xe6\xd0\x83\xd9\x60\x38\x8e\x47\x13\x18\x0c\x27\x77\x70\xd8\x38\x7b\x7e\x81\x70\x06\x67\x86\x0c\x69\xd9\x29\xb0\x34\xc7\x01\x79\xf9\xd8\x0e\xfc\x71\x75\x3b\x8d\xc7\xd5\xe4\x0d\xcb\x72\x6c\x96\x3c\x8a\x27\xd3\xd1\x70\x30\xbc\xb1\x04\x3f\x02\x29\xc6\xed\x4f\xe6\xbc\xd8\x1f\x75\xb7\x07\xc9\x3c\x7a\xa0\xfb\x91\x78\x0d\xdd\x5e\xbb\x94\xbc\x10\xd9\x11\xc8\xb6\x6e\xd3\xd9\x45\xe3\x05\xe3\xe1\xb7\x3a\xda\x47\x2b\x68\x75\xec\xd1\x10\xcc\x97\x1e\xf0\x34\xfb\xc7\xd9\xb8\x9e\x7f\x9c\x5c\x0f\xcc\x38\xc1\xa0\xd4\x9b\xc9\xf0\x42\x9b\xae\x8d\x88\x10\x72\xfb\x57\x17\x5a\x43\xab\xb9\x2a\x0d\x85\x96\x08\x54\xfc\x3b\x5d\x13\xda\x97\xff\x54\x9a\x63\x59\x2a\x8d\x0a\x01\x17\xbe\x52\x45\x69\x04\xe2\xec\xb4\xaf\xe3\xc2\xb0\xcd\xca\x9b\x96\xff\x45\xee\x36\x7b\xb1\x89\x66\x1c\x34\x53\xf3\xf4\xbe\x7f\x35\x89\x1b\x09\x79\x1c\x4f\x4e\x14\x73\x0f\x42\x38\x49\xc8\x7f\xfe\x1a\x8f\xe2\xba\x88\x4d\xc1\x6f\xac\x38\x73\xae\x8f\xd6\xa9\x89\xfd\xb1\x0b\xa5\xde\xe3\x37\x5c\x7c\x56\xeb\x5d\x38\xa2\xf2\x8a\xa6\x9d\x60\xc7\x6c\x83\xa0\xcc\xcf\xc9\x53\x91\x2a\xd4\xa4\x6a\x05\x52\xbe\x31\x2a\x02\xd1\x51\x29\x6e\x7f\xf8\xe5\x42\x39\x5e\x3b\xa5\x99\xec\x24\x5c\xa3\xa4\x17\x88\xf9\x46\xe0\xc6\x58\x6e\x38\x12\xca\x07\x89\xc8\x44\x53\xc2\xf0\x6e\x12\x5f\xc2\xbd\x50\xfa\x49\xe2\xf8\xe1\x16\x7e\x8a\x7e\x3c\x03\xc1\xb3\xed\xbf\x1a\xed\xe0\x44\xaf\xd9\xda\xbd\x69\xbc\x0b\xea\x9d\xfa\xe4\x1b\xeb\xab\x18\x9b\xc8\x9e\x60\xd8\x6a\xda\x11\x0f\xf6\xe3\xdb\xd8\x78\xf0\x7a\x74\xf7\x7b\x23\x23\x1e\x71\xc5\x0f\x9f\x90\xfc\xff\x9d\xd7\xc5\x86\x0f\x0f\x6c\xff\x39\x75\x4e\x1f\x60\x7f\x07\x00\x00\xff\xff\x4c\xeb\x41\x6c\x9a\x0a\x00\x00"

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_packageGoTpl,
		"package.go.tpl",
	)
}

func packageGoTpl() (*asset, error) {
	bytes, err := packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _procGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\xdf\x4e\xf2\x40\x10\xc5\xaf\x77\x9f\x62\xbe\xa4\xf9\x28\x49\x53\xee\x4d\x7a\xa3\xa2\x37\x86\x28\xf0\x00\x2c\xed\x20\x4d\xca\x2e\xcc\x6e\x31\xa4\xe9\xbb\x3b\xd3\x82\x8d\x12\x8d\x5e\xb5\x73\x76\xfe\xfc\xce\x99\x4c\xa0\x69\x20\x7d\xa8\x6d\x3e\x33\x3b\x84\xb6\x85\xdc\x54\x95\x87\xb0\x45\xf0\xc1\x11\x16\xb0\x27\x97\x63\x51\x13\xc2\x48\x7a\x17\xf9\x16\x77\x86\x3b\x53\xa9\xce\x53\xb1\xfc\x3f\x1b\xe2\x2a\x20\x2d\x4f\x7b\xf4\xac\x8e\xbb\xe5\x73\x0c\x35\x59\xd1\x58\x1a\x81\xb3\x50\xac\x53\xbd\xe1\x93\x5f\x6f\xc7\xc5\x1a\xee\x6f\x59\x24\x63\x5f\x11\xa2\x32\x81\x28\xc0\x4d\x06\xe9\xa3\xbb\x5a\x9e\xc0\x91\x3b\xa3\x52\x98\x65\x04\x83\x5c\xe0\xfe\xb6\xe5\x12\x6d\xd1\x01\xc4\xc3\x13\x2f\xf9\x84\x92\x00\x12\x39\x62\x48\xad\x8e\x86\xa4\xea\x15\xad\x15\xe7\xe2\x0f\x15\x1c\x6a\xa4\x93\x56\xb9\xb3\x3e\x88\xe0\x03\x41\x06\xab\xc5\xf4\x69\x7a\xb7\x84\x1f\xd3\xf8\x8d\x05\x6e\x2b\x37\xbd\x85\x04\x3e\xa0\xa3\xa6\x29\x39\x9b\x4e\x1e\x9c\xac\x7a\x2a\xaa\xed\x85\x4a\x98\xd9\x1a\x7c\xef\x50\x2b\xf1\x94\x49\xde\x2f\x32\x33\x77\x6f\x71\xef\xe2\xef\x19\x0f\x24\xec\xd9\xd8\xf8\x3f\xdf\x1c\x6b\xc5\xfc\x72\xe3\x5f\x06\xb6\xac\x24\x49\x45\x1d\x41\x4f\xc5\xda\x05\x6c\x56\x56\xd7\xe9\x6b\xd5\xb2\xad\xf3\x04\x7f\x12\xd9\xa2\x59\x7b\x0f\x00\x00\xff\xff\xf0\x13\x37\x2a\x98\x02\x00\x00"

func procGoTplBytes() ([]byte, error) {
	return bindataRead(
		_procGoTpl,
		"proc.go.tpl",
	)
}

func procGoTpl() (*asset, error) {
	bytes, err := procGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db.go.tpl": dbGoTpl,
	"enum.go.tpl": enumGoTpl,
	"index.go.tpl": indexGoTpl,
	"model.go.tpl": modelGoTpl,
	"package.go.tpl": packageGoTpl,
	"proc.go.tpl": procGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db.go.tpl": &bintree{dbGoTpl, map[string]*bintree{}},
	"enum.go.tpl": &bintree{enumGoTpl, map[string]*bintree{}},
	"index.go.tpl": &bintree{indexGoTpl, map[string]*bintree{}},
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"package.go.tpl": &bintree{packageGoTpl, map[string]*bintree{}},
	"proc.go.tpl": &bintree{procGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

