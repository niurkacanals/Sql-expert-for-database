// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.fkey.go.tpl
// templates/postgres.func.go.tpl
// templates/postgres.idx.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x41\x8f\xd3\x30\x10\x85\xcf\xf1\xaf\x18\x7a\x69\xbc\xea\xba\xe2\xc2\x61\xa5\x9e\x10\x47\xb8\xec\xc2\x05\x71\x70\x13\x7b\x6b\xd1\x38\x60\x3b\x5d\x56\x51\xfe\x3b\xe3\xd8\xa6\x4e\x49\x2a\xe8\xa5\x6a\x26\xe3\x37\x5f\xde\x1b\x6f\xb7\xd0\xf7\xc0\x9e\x5e\x7f\x08\x18\x06\x50\x16\xdc\x41\xc0\xda\xd7\x3e\xe8\xae\x89\xf5\x35\x08\x7c\x00\x87\x4f\x8c\xf8\xdf\xc9\xa1\x4e\x69\xf7\xf6\x1d\x21\x55\xab\xad\x83\x92\xf4\xfd\x3d\x18\xae\x9f\x05\xb0\x2f\xfc\xd8\x09\x8b\x4d\xa4\x88\x93\xc6\x0a\x16\x66\xa6\x5e\x0c\x05\xd9\x9a\x33\x49\x3a\xb7\x66\xa4\x58\xd2\xd9\xe5\x58\xa5\xff\xff\xde\x23\xa5\x56\x8a\x64\xf8\x21\x35\xdc\x23\x0f\x25\x04\x89\x1e\x9d\x51\xfa\x19\x8c\x70\x9d\xd1\x81\xc2\x86\xd2\x69\x3c\xd4\xca\x3f\x64\x51\x96\x11\xd9\xe9\x0a\xbc\xba\x3d\xb4\xc6\x69\xde\x88\x33\x41\xd6\x48\xa3\x78\x49\x93\x64\x4f\x8a\x13\x37\xa3\x95\x88\x14\xab\x84\x14\xf6\x45\xb9\xea\x00\x0b\x8a\x0b\x76\x56\xdc\x8a\x25\x43\x1f\x48\x51\xa4\x29\x3b\x58\x5d\x5a\xb8\xca\x7d\x28\x06\x24\x08\xdf\x9f\xc8\xc8\x30\x7a\xf3\x91\x1b\x7b\xe0\xc7\x27\xf1\xcb\x41\x13\xfe\xdb\xe9\xb2\x68\xd7\x82\xc3\xd7\xff\xe1\x49\x26\x8a\xc6\x94\x5f\xbf\xed\x5f\x9d\xd8\x80\x30\xa6\x35\xd4\x3b\x14\x51\xc2\x8b\x79\x45\x96\x8c\xa5\x1b\xd0\x2a\xe1\x7e\xd6\x4d\x06\xdc\xe9\x59\x64\x69\xda\xe6\x1f\x90\xef\x26\xcc\x13\xe5\xd2\x9f\x8e\x78\x34\x70\x7b\xec\x98\x61\xc8\x74\xec\xa1\xc5\xd5\xe8\xfe\x4e\xc5\xa7\x76\x37\xcf\xb3\x5b\x4a\x3a\x25\x39\xf8\x14\x6b\x21\x79\x77\x74\x5e\x27\x05\xea\xf1\x2c\xfb\x24\x5e\xca\x95\xd2\xb8\xd2\xaa\xce\xed\x58\xd1\x49\xfc\x67\x2f\xc3\x24\xcb\x9d\xb2\x52\x89\x78\x2f\x7e\x1e\xb7\xb5\x51\x27\x61\x02\x88\xf1\xf9\x0b\x23\x79\x25\xc6\x9b\x7a\xdb\x1d\x19\xa5\xfc\x26\xe4\xd2\x33\xfb\x70\x7d\x11\xf2\x3d\x78\xac\xb8\xbe\x40\xaf\xb9\xe3\x7b\x34\x7d\x8b\xdf\xc0\xfc\x7b\x7d\x3b\xfd\x74\x35\xbc\x58\x69\x4d\x75\x56\xeb\x87\x6c\x2b\xf6\x9d\xdc\x40\xfb\x1d\x1e\x76\x80\x4d\x2c\xae\x3b\xba\xae\x24\xbc\xc1\x3a\xb6\x00\xc0\x4d\x61\xcd\x1b\x32\x5d\x55\x1c\x4f\xbd\x2b\xbf\x03\x00\x00\xff\xff\x0e\x16\xf2\x15\xe5\x05\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresFkeyGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x56\xd0\x0b\xa9\x2c\x48\x55\xa8\xad\x55\x28\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x05\x8b\x07\xa5\xa6\xc1\xa4\x12\x8b\x8b\xf3\x93\x33\x13\x4b\x52\x53\x14\xca\x33\x4b\x32\xe0\x4a\xa0\xf2\xea\xc5\x60\x9e\x5b\x66\x6a\x4e\x0a\x48\xb9\x06\x88\xe7\x9c\x9f\x53\x9a\x9b\xe7\x97\x98\x0b\x52\xa1\xa9\xc7\x95\x56\x9a\x97\x0c\x96\x29\xce\xc8\x2f\x2a\xc9\x03\x89\xc3\xad\xd6\x42\x32\x4c\x13\xcd\x72\x8d\x94\x24\x85\x08\x7f\x17\x27\x4d\x05\x0d\x2d\x54\x19\x1d\x85\xd4\xa2\xa2\xfc\x22\xa0\x06\x2e\x4e\x88\xe3\xd1\xb4\x3a\x55\x42\xf9\x30\x97\x01\xcd\xd2\x51\xc0\xea\x04\x3d\x64\x0f\x68\x72\xd5\x72\x71\x01\x02\x00\x00\xff\xff\x74\x85\x56\x18\x1e\x01\x00\x00"

func postgresFkeyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresFkeyGoTpl,
		"postgres.fkey.go.tpl",
	)
}

func postgresFkeyGoTpl() (*asset, error) {
	bytes, err := postgresFkeyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.fkey.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresFuncGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x4d\x6f\x9c\x30\x10\x3d\xc3\xaf\x98\x22\xb4\x82\x96\x90\xf6\x1a\x89\x4b\x53\xf5\x98\xed\xd7\xa1\x52\x14\xa9\xde\xc5\xa4\x48\x5e\x1b\x6c\xd3\x66\x85\xf2\xdf\x3b\xe3\x61\x59\x68\x1a\x29\xea\xcd\x7e\x33\xe3\x79\x6f\xde\x78\x1c\x21\xfd\x3c\x48\x7b\xbc\x36\x87\x83\xd4\xde\xc1\x55\x05\xe5\x1a\x79\x7c\x8c\xc7\xf1\x02\xda\x06\xca\x09\x83\x0b\xc4\x2e\x2f\x01\xab\x67\x68\xca\x92\xca\xc9\x65\xf8\x46\x1c\x24\xc6\xc0\x0e\xda\x81\x80\xfd\xe0\xbc\x39\x40\x4f\x0d\x0a\xb0\xd2\x0f\x56\xb7\xfa\x1e\x4f\x6e\x50\xd8\x4b\xb8\x50\xf5\xed\xd8\x51\x55\xc9\x4f\xea\x9a\x5e\x6f\x06\xbd\x5f\x3d\x99\xd5\x3b\xf8\xbe\xfd\xf0\x1e\x31\x2b\xf4\xbd\x84\xb4\x2d\x20\xed\x82\x82\x4f\xc2\x62\x96\x97\x96\xe8\x17\x54\xd6\xea\x5a\x3e\x50\xf8\x2d\xd5\x2e\x81\x77\x08\xe0\x9d\xdb\xe4\x90\x51\xac\x01\x6d\x3c\x94\x5b\xad\x8e\x5b\x4d\xdd\x6e\xef\xe6\x94\xd7\x0b\x86\x05\x48\x6b\x8d\xcd\x61\x8c\xa3\x5f\xc2\xd2\x8d\x91\x38\x8e\x70\x02\xae\x57\xac\x35\x8e\xf6\x46\x3b\x4f\x80\xf3\x16\x2a\x58\x93\x56\xe7\xb1\x33\x19\x24\x90\xb6\x44\xf4\xcd\xdc\x96\xd1\x6c\xa2\xbd\xb6\x28\x6d\x73\x4a\xe6\x99\x3f\x93\xb1\x54\xb9\xe8\x10\x47\xe3\x48\x20\x7a\xf6\x83\xb6\x41\x01\x1f\xa6\xa9\x07\x19\x68\xde\x24\xe3\xb4\x08\xe7\xc1\xb0\x6e\x74\x72\x69\x5c\x1c\xd1\x20\x2a\xa8\x77\x2c\xea\x8b\xf9\x9d\xb1\xf4\x59\xf7\xb3\x16\x95\xc1\xa1\xb3\x21\xe5\xd7\xbd\xd0\x64\x4a\xd3\x4a\x55\x6b\xac\x71\xd8\x47\xec\x94\x2c\x3f\x12\xe2\x20\x49\x20\xd9\x20\x83\x84\xd2\xe3\x08\xf9\x51\xf7\x57\x15\xe8\x56\x91\x31\x11\xef\x19\x5d\x83\x5f\x71\x44\xba\x26\x90\x0a\x0b\x0a\x9d\xd7\x97\xf8\xf7\x21\x93\x6c\x39\x69\xf8\x6f\x01\x2f\x64\x14\xd5\xb2\x91\x16\xfa\xf2\x5a\x19\x27\xb3\x9c\x47\xaf\x8c\xa8\x4f\xbf\x83\x38\x87\x0f\x7a\x7b\xb7\xdc\xc1\x11\x6b\x1b\x43\x95\x37\xf2\xc1\x67\x61\x17\xd1\x54\x70\x3f\x8d\xf5\x34\x2f\xce\xc4\xfd\xb8\xaa\x60\x5d\x87\x89\xb4\xa5\x38\x60\x3c\xb1\x65\xfd\x8b\xe6\x9d\x75\xb6\xc5\x4f\x9f\x6c\xf0\xf8\x57\x9f\x3c\x67\xd1\xff\x50\xfd\x54\x76\x70\x22\xc8\xaa\x40\x74\x1d\x4e\x2c\xc3\x4b\x01\x9b\xa7\xfc\xf9\xd5\x85\x73\x21\x71\x36\x8e\xd7\x15\xc3\x7f\x02\x00\x00\xff\xff\x13\x70\xa8\x10\xd3\x04\x00\x00"

func postgresFuncGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresFuncGoTpl,
		"postgres.func.go.tpl",
	)
}

func postgresFuncGoTpl() (*asset, error) {
	bytes, err := postgresFuncGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.func.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIdxGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\x41\x4f\xdc\x3c\x10\x3d\xc7\xbf\x62\x3e\xb4\x42\xc9\xd7\x25\xa8\x57\xa4\x3d\x14\x58\x54\x54\x0a\x14\xa8\x5a\xa9\xaa\xba\x26\x71\x16\xab\x8e\x9d\xb5\x13\x60\x15\xf1\xdf\x3b\x63\x27\xcb\x6e\x59\xa4\x1c\xaa\x9e\x2a\xe5\x60\x8f\xdf\x64\xde\xbc\x99\xd7\xb6\x20\x0b\x48\x4f\xdd\x67\x2d\x17\x8d\x80\xa7\x27\xb6\xbf\x0f\x18\x4d\x6f\x96\x15\x5d\x0f\x97\x01\x32\xaf\x21\x56\x42\x43\x7a\x22\x85\xca\x5d\x02\x6f\xf1\x91\x70\xe7\xbc\x14\xe1\x28\x94\xeb\x4e\x96\xeb\xb9\xe8\xa1\x1d\xce\x5f\x3a\xa0\xde\x38\x80\x15\xb5\x95\xe2\x5e\x38\xe0\x60\xcd\x03\x14\xd6\x94\x81\x03\xbf\x55\xe2\x3a\xbb\x13\x25\x47\x5c\xba\x0a\x75\x35\x81\x53\xc6\x1a\xd9\x14\xc9\x13\xff\x33\x63\x7e\x3a\x68\x2a\x68\x9c\xd4\x73\x90\x3a\x17\x8f\x1e\x77\x4a\xa7\x2e\x3b\x65\x45\xa3\xb3\xbf\xdc\x6b\x9c\xdf\xc2\xd7\x8b\xe3\x43\x0c\xcc\x4d\xc5\x2d\x2f\x95\x74\xf5\x2a\xbd\xb6\x7e\x06\x09\xc4\xff\xaf\xf1\x1a\x83\xb0\xd6\xd8\x04\x5a\x16\xdd\x73\x4b\xb7\x10\x61\x2c\xc2\x6e\xdd\x42\x01\xce\xce\x2e\x59\x94\x19\x8d\x7f\xc3\x80\xab\x2d\x4c\x60\x76\x3d\x3d\x9b\x1e\xdd\xc0\x0c\xde\xb0\x28\x9a\xe1\x2f\x33\xa3\x34\x36\xe1\x3a\x21\xfb\xba\x3b\x3b\x24\x67\x07\x3b\xb9\xba\xf8\x38\x48\xfe\x0e\xff\xe5\xfd\xf4\x6a\x0a\x2b\x29\x46\x72\x0c\xa3\x02\x0e\x26\x9b\xa2\xa0\xae\x23\x49\x59\xef\xce\x8f\x61\x5d\x98\x51\x91\x1e\x19\xd5\x94\xba\xff\xed\x04\x46\x84\xc7\xd9\xf8\x84\x15\x76\x16\xda\xb5\x8d\xee\xdb\xc5\xc5\xa1\x3a\x6b\x52\xa1\x42\x6d\xbb\xe7\x77\x3a\x34\x78\x69\x65\xc9\xed\xf2\x83\x58\xf6\x43\x41\xca\x3f\xc4\x23\xaa\xee\x0e\xbc\xde\x63\x4a\xf1\x25\xf6\xe8\x11\x3f\xd2\x77\x02\xf9\x6d\xfa\x89\xca\x5c\x99\x87\x38\x28\xfa\xca\xd0\x0a\x1e\x96\x21\x49\xaf\x33\xae\x63\x44\x15\xf4\xf0\x8a\xce\x3b\xbb\xc8\x9a\xe4\x4e\x58\x84\x34\xa9\xd6\x7f\x13\xd0\x52\xd1\x74\xa9\xa3\xc6\x6a\xba\xfa\xa1\x13\x1d\xd6\x07\x29\x71\x4c\x4f\xec\x89\x3d\xaf\x60\xef\xd7\x4b\xd5\x58\xae\xfa\x2d\xee\x57\x75\xcd\x5b\xe8\x2c\x37\xd8\x5a\x58\x9d\x67\x77\x7f\xcc\x60\xdb\xc9\x0d\x36\xc3\xb7\xef\xff\xec\x30\xc0\x0e\x0b\xaf\x0c\x95\xea\x77\x77\xe0\xe2\x0e\xdc\xc4\x28\x17\x85\xb0\xb0\x48\x8f\x94\x71\x22\x4e\x02\x01\x65\x78\x8e\x6b\xe6\x1a\x55\x3b\xda\x55\x47\x04\x36\x27\xd6\x62\x6e\x61\x28\xf3\x5c\x3c\xd6\xb1\x9f\x1c\x99\xce\xdd\x19\x5b\xd3\x00\x56\xc8\x97\x76\x1e\xe2\xe7\x17\x86\xde\x70\xb4\xf7\x90\xdf\x0c\xb4\x27\x9e\x82\xbd\x17\x83\xdc\x1a\x57\x56\xea\x1a\x4d\x8b\xc7\xdf\xd8\x26\x49\x90\x6e\x8b\x76\x2f\xc5\x0b\x1c\x48\x9c\x09\xf0\xaa\x42\x6e\x31\x5e\xc6\xb0\xbb\x55\x85\x64\xc3\xf7\x1e\xf8\x6c\x7b\x3f\x7c\xc6\x7e\x05\x00\x00\xff\xff\xb9\xe5\x4f\x82\xba\x07\x00\x00"

func postgresIdxGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIdxGoTpl,
		"postgres.idx.go.tpl",
	)
}

func postgresIdxGoTpl() (*asset, error) {
	bytes, err := postgresIdxGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.idx.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x72\xdb\x46\x0c\x3d\x8b\x5f\x81\x64\x3a\x2d\xd5\x28\xcc\xf4\xd0\x43\x33\xa3\x43\x5a\x33\xad\xa7\xae\xec\x48\x72\xdb\x9b\xbd\x22\x21\x9b\x53\x72\x57\xd9\x5d\xda\xd6\x68\xf2\xef\x05\x76\x49\x8a\xb6\x28\x85\x51\xdc\x5e\x6c\x71\x09\x3c\x3c\x2c\xf0\x00\x6e\x36\xaf\x21\x5b\x42\xf4\x8b\x2a\x0a\x94\x16\x5e\x7f\xfa\x14\xbc\x79\x03\x9b\xcd\xf6\x88\x4e\xd8\x0a\x73\x83\xed\xd7\xf3\xf5\x0a\xe9\x1d\x68\x5c\x69\x34\x64\x68\x40\x80\x56\xf7\xb0\xd4\xaa\xf0\x16\x62\x91\xe3\x2c\xb9\xc5\x42\x90\x61\xd4\x1c\x4d\x44\xc1\x9e\x91\x87\x95\x29\x47\xb0\x8c\xd6\x86\x35\x56\x97\x89\x85\x8d\x33\xd2\x42\xde\x20\x44\xef\x33\xcc\x53\xc3\xe6\x03\x36\x75\x8f\x6c\x4b\x0f\x1a\x1d\x42\xed\x4e\x27\x9c\xd5\x5c\xdc\xf0\xfb\x6b\x1f\x9a\x7f\xf3\x4f\x1f\x12\x9a\x34\xf3\xb2\x90\x15\xa7\x36\xa5\xfa\x6a\x2e\x74\x56\x08\xbd\xfe\x1d\xd7\x75\xc0\x20\x18\x90\xf3\x83\x82\xa5\x23\x14\x0c\xae\xf0\x21\x33\xd6\x8c\xe0\x2a\xc5\x1c\x2d\xa6\xb0\x50\x2a\x0f\x9a\x58\x01\xb9\x54\x94\x3a\xd0\x08\x2b\x76\xfe\x90\x92\xaf\x2e\x32\x89\x86\x6d\xed\xed\xe3\x2b\xf1\x41\x20\x93\xee\x4d\x2a\xac\x58\x08\x83\x51\xb0\x2c\x65\x02\x21\x59\x9a\x5b\xa5\xad\xe4\x4c\x1a\x9f\xef\x5b\x00\xc3\x2a\x4c\x38\x74\xf4\xe8\x6e\x07\x74\x6d\xa5\x96\xd0\xe9\x1b\x55\x59\x31\x79\xa2\x78\x52\x65\xb6\xd2\xea\x2e\x4b\x99\xa1\x5c\x2a\x5d\x08\x9b\x29\xd9\xc5\xf6\x56\x18\x58\x20\x4a\xa8\xaf\xc4\xf5\xc5\xb1\xcc\xab\xe8\xbd\xa9\x57\x41\x2b\xee\xa7\xd2\xa0\xb6\xc4\x98\xff\x99\x1d\xaa\x56\x1d\xcd\xcb\x23\x87\xe9\x02\xfe\x3e\x3f\xf9\x79\x08\xa8\xb5\xd2\x4c\xef\x4e\x68\x7e\xf0\x07\xbe\x61\xe8\x92\x44\xae\x51\xa4\x6b\x5f\xca\x11\x2c\x44\x96\x07\x03\x3a\x3f\x58\x00\x86\xab\xd3\x75\x70\x26\x9a\xe0\x7d\xf8\xd2\xa7\x03\x4b\x02\xc1\xf4\xed\x63\x6c\xf3\x72\x18\x0c\xaa\x46\x35\x1f\x73\xf8\x58\xa2\x5e\x07\x83\x44\x49\x63\xf9\x80\xe4\x05\x63\xb8\x3e\x9d\xcc\xe2\xe9\x1c\x4e\x27\xf3\xf3\x3e\x92\x85\xf0\x1a\x5e\x11\x19\x56\x51\xa2\x72\x66\x6b\x1a\x59\x76\xb4\x76\x65\x3d\x84\x3f\xdf\x9d\x5d\xc6\xb3\x27\xee\x77\x22\xef\xe7\x3d\x8d\xe7\x97\xd3\xc9\xe9\xe4\x57\xc7\x71\x6b\xc8\x36\x3e\x45\x5d\xca\x3a\x45\xbe\xf4\x31\xa4\x8b\xe8\x03\x3f\x4f\xd5\x7d\xe8\xd3\x1d\xb1\xb3\x13\xec\x67\x68\x87\x4f\x2b\x31\xe4\x4a\x47\xb3\x44\xc8\xf0\xdb\xee\x42\x3d\xa6\x55\xf3\x1f\xba\xd2\x32\x9f\x17\x63\x90\x59\xfe\xa4\x8e\xdb\xfa\xa0\xf5\x45\x43\x99\xa0\x1b\x6d\x07\x7a\x61\x0c\x34\x18\x31\x68\xfa\x9f\x70\xab\x26\xbf\x5c\x51\x03\x23\x94\xee\xdf\x6e\x93\x7f\xc5\xd8\xf0\xc8\xbd\x9b\x3c\x55\x68\xe4\x77\x76\xa7\xc9\x5f\x1c\xd5\xe5\x3e\x9f\xa6\xcb\x19\x1c\xa4\xaa\xd0\x5b\x5d\xce\x81\xbd\xe8\x3f\xaf\xab\x7a\x24\xf5\x0b\x49\x65\xfd\x87\xe7\x17\xe5\xec\x1c\x69\xe0\xf5\x53\xd7\xe5\xc5\xc9\xbb\x79\xdc\x4b\x58\xb3\x78\x7e\xb4\xb8\xc6\x10\xc2\x71\xc2\xfa\xeb\xb7\x78\x1a\xef\x8a\x8a\x10\xbf\xf1\x48\x89\x2a\xe9\x0b\xe0\x10\xd4\x8e\xfe\xae\x46\xd0\x48\x30\x7e\xc0\xe4\x6b\xe5\xc7\xea\x1b\xed\x29\xe4\x5e\xdd\xb5\x54\xe6\xc5\x31\x13\x77\x08\x86\xfe\x3c\xeb\xf4\x67\xd4\x0e\x59\xec\x6d\xbc\x66\xff\xb6\x1a\xaf\xdb\xb2\x91\x5c\xd5\x68\x07\x8d\x9b\x25\x34\x6c\x46\x81\xdb\x0c\x2b\xd4\xbc\xa2\xe9\xc3\x4c\xd2\x58\xf0\xcb\x82\x19\x6e\x53\x88\xc8\x9a\x1d\x26\xe7\xf3\xf8\x2d\x5c\x28\x63\x6f\x34\xce\x3e\x9c\xc1\x4f\xd1\x8f\xaf\x40\xc9\x7c\xfd\x45\x63\x62\xcf\x2e\xdc\x19\x55\x7e\x9b\x57\x7a\xdd\xad\xc8\x33\x7c\x29\xfc\x8f\xc3\x8a\xd3\x7a\xa6\x21\xd4\x86\x3a\x30\x57\x4e\xe2\xb3\x98\xe6\xca\xfb\xe9\xf9\x1f\xbd\x86\xcb\x01\x99\xff\xf0\x65\x02\xfe\x4f\x76\x5f\xfd\xad\xb6\x6f\xf3\xd5\x17\xd5\xbd\xfa\x5a\x5f\xec\xc1\xbf\x01\x00\x00\xff\xff\x9b\xf4\x43\xe1\xce\x0c\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xf6\x53\xec\xcf\xe1\x27\x48\x28\x3c\x01\x97\xb6\xdc\x2a\x4a\x81\x43\x8f\x18\x67\x29\x91\x8c\x0d\x6b\x9b\x0a\xa1\xbc\x7b\x77\x13\x22\x51\x55\xad\x7a\xb2\x3c\x5e\xcf\x7c\x3b\x93\x09\x5c\xaf\x50\xce\xcd\x01\xa1\x69\xc0\x1a\xe7\x22\xa4\x3d\x42\x4c\x81\xb0\x82\x23\x05\x8b\x55\x26\x84\xa1\xcc\xad\xcd\xd6\xe1\xca\xee\xf1\x60\x78\xbc\x14\x69\xc1\x13\xb7\xef\x45\x7f\x5f\x18\x62\x25\x21\xad\x2f\x47\x8c\xfc\x32\x82\xfe\x69\x89\x29\x93\x17\x9d\xe5\x21\x04\x0f\xd5\xb6\xd4\xbb\xec\xed\x3d\x48\x51\x6d\xe1\xed\xe5\xe9\x81\xa5\xf7\x70\x14\x37\x57\xc7\xc4\x0e\xbd\x31\x43\x52\xc6\xd6\x59\x52\x09\x93\x38\x96\x5f\xdc\xc7\x80\x44\x81\x38\x5b\xab\xb3\x21\xb9\x75\x8a\xd6\x8a\xf7\x8e\x27\x07\xa7\x8c\x74\xd1\xca\x06\xcf\xee\x2c\xc4\x44\x30\x85\xcd\x6a\xf6\x3c\x7b\x5c\xc3\xdf\x36\xb6\xc1\x9d\x0d\xb7\x76\x0f\x37\x18\x08\xda\xa6\x0b\xa2\xec\xfb\x20\xc1\x60\x56\xf8\x09\x59\x2b\x81\x9c\x4a\x27\xaf\xf2\x63\x19\x3e\x8a\x0e\xeb\x97\x26\x76\x9c\xde\x56\x51\xae\xac\xf1\xc5\x7f\x76\x1e\x69\x55\xef\xda\x85\xff\x4d\xc1\xd7\x4e\x2a\x50\xd4\x26\x75\xd9\xac\x75\xf1\xf3\xda\x7d\x2f\x4d\xab\x86\xd1\x6f\xf3\x7c\x8c\xc5\x43\xb3\xf6\x19\x00\x00\xff\xff\x50\x0d\x9b\xaa\x2f\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\xcb\x6e\xeb\x38\x0c\x5d\xc7\x5f\xc1\x1a\x33\x80\x9d\x49\x9d\xc9\x2c\x0b\x64\x31\x8f\x6e\x06\x98\xc7\x6d\x8b\x8b\x0b\x24\xb9\x88\xe2\xd0\x8d\x50\x5b\x72\x25\x39\x4d\x10\xe4\xdf\x2f\x29\x3f\x6a\xa7\x8f\x8d\x61\x51\x3c\x87\xe4\xd1\x91\xa6\x53\xf8\xf6\xdf\x5f\x7f\x80\xb4\xe0\x76\x08\xa9\x2e\x0a\xad\x40\x2a\x87\x26\x13\x29\x42\xa6\x0d\x6c\x85\x13\x1b\x61\x11\x74\x89\x46\x38\xa9\x15\x27\x0b\x07\xa9\x50\xb0\x41\xa8\x2c\x6e\xe1\x45\xba\x5d\x40\x6c\xee\x58\xa2\x85\xcc\xe8\x02\x4e\x27\x48\xee\xd3\x1d\x16\x02\xce\xe7\x84\x36\x79\xff\x61\x47\xa5\xec\x4e\x57\x39\x61\xb4\x79\xf2\xc0\xae\xc4\xd4\x3e\xe7\x09\xb5\x23\xd4\x76\x18\x7b\x38\x24\x01\x53\x37\xdd\x76\xfd\x9d\x82\xd1\xed\x01\xd3\xc8\x3a\x23\xd5\xe3\x04\x92\x24\xe9\x36\x4f\xe7\x18\x22\x06\xdf\xa1\xad\x72\x37\x01\x34\x46\x9b\x38\x18\x7d\xa9\xd0\x1c\x3f\x86\x8c\x3d\x46\xbf\xd8\x0b\x04\x85\x3e\x04\xb5\x98\xe0\x1c\xf0\x94\xf7\x24\x8d\x42\xf3\x55\xe4\x04\xfc\x54\xdc\x5a\x2f\x2f\xa7\x2c\xca\x1c\x0b\x54\x0e\x36\x9a\x34\x21\x08\x53\x0d\x64\x68\x78\xbd\x3e\xb4\x9e\x6e\x8d\xdc\xa3\x49\xda\x3a\x2d\xb3\x6d\xc4\xba\x68\xa3\xaf\x5a\x8f\x2d\x18\x0d\x68\xda\x11\xfc\xa4\xf7\xb9\xa4\x7c\x1a\x40\x80\xf5\xbf\x3a\x83\x5a\x83\xae\x46\x2f\x6f\xb1\xaa\xf7\x3c\xc1\x73\xa5\x1d\xde\xda\x54\x94\x78\x87\x8f\x78\x68\x65\x30\x7e\xe1\x34\x14\xc2\xa5\x3b\x40\x9f\xb1\x85\x74\x27\x8c\x48\xa9\x43\x4b\x8d\x72\x39\xcf\x94\x04\x7b\x61\xde\x52\xcd\x6b\x96\x32\xf9\xa7\xb2\xee\x4f\x5d\x94\x32\xc7\x68\x1d\x2d\xbe\x2f\x97\xab\x68\x41\x9f\xd3\x6f\xe7\x78\x1c\x2f\x97\xe1\x3a\xee\x0e\x04\x2c\x99\xd7\x66\x12\xeb\x3e\xfa\x7a\x0e\xcf\xa4\x37\x52\x12\x64\x95\x4a\xc9\x46\x16\xc6\xbd\x70\xec\x09\x23\x6b\x52\x18\xd8\xc0\xfb\x85\xe5\xdd\x54\xd9\x04\xf4\x13\xdc\xcc\x81\x92\x92\x68\xb1\xda\x1c\x1d\x92\x93\x64\x06\x57\x14\xa7\x94\x91\x41\x57\x19\x55\x63\x6c\xf2\x2f\xbe\x44\xa1\x54\x7b\x91\xcb\x6d\xbf\x83\x90\x40\x74\x22\x23\x1a\x82\x24\x52\x8f\x58\xab\xd1\xe8\x66\x7d\xc3\xa9\xdd\x43\x29\x8c\xe5\xb3\x24\xdd\xb8\xea\xa5\x64\x74\x09\xca\x9c\xba\xfc\x3d\xcf\x6b\xf2\xc6\xca\x11\x75\x1a\x4f\x60\xfd\xd3\x2c\x64\xad\x3c\x7c\xde\x1d\x71\x03\xe2\x5c\xca\x59\x2e\xd7\xfc\xa5\xcf\xf5\x2c\xae\x5b\x32\x58\xe8\x3d\xc2\xc6\xb0\xeb\x7a\xe8\xc5\xec\x26\x47\xc5\xb8\xf8\x7a\xb6\xaa\x73\x37\x42\xe6\x40\xf3\x6b\x95\x1f\xe9\x83\x5e\x8c\x36\x0b\xe6\x73\xf8\xd5\xcb\x32\x26\xad\xe7\x7d\x05\xa2\xd6\x56\xa4\xf0\xab\x6c\x4a\xe6\x9d\x30\x7e\xf6\xfa\x25\x61\x29\x0c\x8a\x2d\x4b\x91\x7a\x25\x28\xc2\xe2\xde\xf9\x60\xd4\x4e\x36\x88\xc4\x3c\x38\x97\xf2\x37\xde\x83\x4c\xc2\xdb\x51\x7d\x62\x1c\xbc\x9a\x73\x49\xdf\x61\x56\xb8\xe4\x7f\xa2\x71\x59\x14\xe2\x41\x3a\x22\xbc\xba\x81\x9f\xf7\x4b\x15\x7a\x82\x78\x70\xb8\x75\x97\x6f\xa7\xf2\x05\x59\xc6\xde\x40\xf5\xd5\xf3\xf7\xf0\xc2\xad\x1f\xdc\xf4\x4f\xfc\x3a\xb0\xab\xc7\x45\xf4\xb8\xf5\x79\xda\xf7\x8d\x87\x62\x1e\x39\x01\xcb\xc3\x1b\x6f\x33\xa2\xe0\x61\xad\x5d\xc8\x15\xb5\xbe\x0e\xd7\xf0\xcb\x7b\xc6\x18\xae\x1b\x83\x90\x57\x1a\x9f\x4c\x18\xc9\x81\xb0\x5e\x13\x09\x05\x58\x94\x76\xf0\xf0\x14\xf6\x98\xff\xd6\x92\x1c\x41\x3c\xe1\x24\xe4\xe4\xf0\x4c\xa2\xbe\x6a\xf3\xde\x83\x34\x78\xe6\xba\x77\xa9\x79\x91\x06\x9b\x41\xf0\x23\x00\x00\xff\xff\x81\x7e\xd8\xa8\xf1\x06\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xbf\x4e\x03\x31\x0c\xc6\x67\xfc\x14\xd6\x2d\x85\x25\x79\x06\xd0\x45\x88\xa5\x87\xe0\x06\x18\x43\xce\xbd\x46\x90\x3f\xd8\x56\x05\xaa\xf2\xee\x34\x45\x2c\xa8\x93\x7f\x9f\xfd\x93\x3f\x6b\xf1\xd1\x87\x77\xbf\x12\x1e\x8f\x68\xfe\xb8\x35\x0c\x25\xab\x8f\x59\x50\xf7\x84\xfa\x5d\x49\x70\x57\x18\x25\xec\x29\x79\xdc\x74\xfb\xf9\x97\x5b\xdb\x18\xa8\x17\xbf\x00\x9c\x0a\xee\xdd\xd6\x3d\xdd\xce\x6e\xc4\xbb\x57\x7c\x99\x0c\x8e\x13\x6e\xa7\x19\xdd\xf8\x30\x1b\x80\x98\x6a\x61\xc5\x6b\xb8\x1a\x16\xaf\xfe\xcd\x0b\x59\xf9\xfc\x18\xfe\x65\xbb\x70\x3c\x10\xf7\x35\xe5\x50\x96\x98\x57\x1b\xe4\x70\xce\xcc\x85\xa5\xd3\x2e\x69\x1f\x4c\x2b\x7d\xd5\x4e\xa2\x7c\x12\xcf\x37\x8d\x89\x06\xb8\x01\xf8\x09\x00\x00\xff\xff\xce\x48\x5a\xf1\xf4\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.fkey.go.tpl": postgresFkeyGoTpl,
	"postgres.func.go.tpl": postgresFuncGoTpl,
	"postgres.idx.go.tpl": postgresIdxGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.fkey.go.tpl": &bintree{postgresFkeyGoTpl, map[string]*bintree{}},
	"postgres.func.go.tpl": &bintree{postgresFuncGoTpl, map[string]*bintree{}},
	"postgres.idx.go.tpl": &bintree{postgresIdxGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

