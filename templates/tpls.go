// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.fkey.go.tpl
// templates/postgres.idx.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x6f\xa3\x30\x10\xc5\xcf\x9e\x4f\x31\xe2\x12\x1c\x25\x44\x7b\xd9\xc3\x4a\x39\xad\xf6\xb8\xbd\x34\xed\xa5\xea\xc1\x25\x26\x20\x05\x53\xf9\x4f\xd2\x08\xf1\xdd\x6b\x63\xbb\x81\x14\xaa\xf6\x82\x60\x98\x79\xf3\xf3\x7b\xde\x6c\xb0\x6d\x31\xdb\x5d\x5e\x39\x76\x1d\x56\x0a\x75\xc9\x71\xe1\x6a\xff\x84\xa9\x43\x7d\x81\xdc\x7e\xa0\xb6\x5f\x19\xb8\xe7\x68\xc8\x54\x42\xff\xfa\x0d\x90\x37\x42\x69\x4c\xa1\x6d\xd7\x28\x99\x38\x70\xcc\x1e\xd9\xd1\x70\x65\x9b\x80\x84\x4d\x7d\xc5\x16\x26\xb6\xde\x2c\xc5\xa2\x91\x57\x92\x38\xb7\xc8\x80\xcc\xe9\x6c\x87\x58\xa9\x7b\xff\xeb\x90\x62\x2b\xb5\x64\xf6\x20\x7b\x5c\x5b\x1e\x0a\x60\x89\xee\xb5\xac\xc4\x01\x25\xd7\x46\x0a\x4f\xa1\x7c\xe9\xd4\x0f\x35\xc5\x07\x59\x90\xcd\xa0\x30\x22\x47\xa7\xae\xca\x46\x6a\xc1\x6a\x7e\x25\x18\x34\xd2\x20\x9e\xd2\x28\xd9\x02\x39\x31\xd9\x5b\x69\x91\x42\x15\x80\xa8\x73\xa5\xf3\x12\x67\x14\x67\xec\xcc\x99\xe2\x73\x86\xfe\x01\x42\xe2\x96\x2d\x26\xb7\x16\x26\x43\x1f\x48\x67\x09\xfc\xf9\x23\x19\x74\xbd\x37\xff\x99\x54\x25\x3b\xee\xf8\x9b\xc6\xda\xbf\xab\xf1\x65\x11\xba\x41\x6d\x7f\xff\xc0\x93\x81\xa8\x35\x26\x7d\x7a\x7e\xb9\x68\xbe\x42\x2e\x65\x23\xa9\x73\x28\xa0\xf8\x1f\xd3\x8a\x59\x34\x96\xae\x50\x54\x11\xf7\x41\xd4\x03\x60\x23\x26\x91\x0b\xd9\xd4\xdf\x40\x5e\x8e\x98\x47\xca\xa9\x9b\x0e\x78\xd4\x73\x3b\xec\x90\xa1\xcf\xb4\xef\xa1\xe4\xcb\xe8\x3e\xa7\xe2\x52\x5b\x4e\xf3\x6c\xe7\x92\x8e\x49\x76\x2e\xc5\x3d\x2f\x98\x39\x6a\xa7\x13\x03\x75\x78\x2a\xbb\xe3\xe7\x34\xa9\x84\xbd\xd2\xd5\x7e\x68\x47\x42\x47\xf1\x07\x2f\xdf\x03\x00\x00\xff\xff\xe1\xf5\x8e\x9d\x13\x04\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresFkeyGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x0e\x82\x30\x10\x44\xef\xfd\x8a\xbd\x49\x09\x81\x7f\x40\xe3\x51\x13\xe3\xc1\x2b\xc2\x12\x9a\x40\x6b\xb6\x6d\x0c\x21\xfd\x77\xdb\x0a\x04\x89\xbd\xcd\xbe\xd9\x9d\x69\x51\xc0\x34\x41\x7e\x1f\x5f\x08\xce\x01\xa1\xb1\x24\x35\x98\x0e\xe3\xfc\x86\xed\x82\x2a\xad\x55\x2d\x2a\x83\x0d\xbc\x85\xe9\x56\xcb\xcc\x0f\x3a\xaa\xb3\xc0\xbe\x09\xf6\x24\xa8\xa3\xea\xed\x20\x2f\xd5\x10\x1c\x3c\x67\xad\x95\x75\x24\xba\x53\x64\x64\x98\xaf\xd1\xe9\xe6\x18\xdf\x85\x27\xcd\x13\x1e\xd7\x53\xc9\x21\x49\x7f\x49\x06\x48\xa4\xc8\x2f\x30\xf0\xef\xdb\x7f\xb7\x5d\x8e\xb3\x5e\xca\xf9\x73\x19\xfc\x6d\x91\x6f\xff\xc0\x99\x63\xec\x13\x00\x00\xff\xff\xd1\x43\xc2\xb5\x21\x01\x00\x00"

func postgresFkeyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresFkeyGoTpl,
		"postgres.fkey.go.tpl",
	)
}

func postgresFkeyGoTpl() (*asset, error) {
	bytes, err := postgresFkeyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.fkey.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIdxGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\x41\x6b\xdb\x4c\x10\x3d\x6b\x7f\xc5\x7c\xc1\x04\xe9\xab\xa3\xd0\x6b\x40\x87\x26\x71\x68\x68\x9a\xa4\x76\x4a\x0b\xa5\xd4\x6b\x69\xe5\x88\xae\x76\xed\x5d\x29\xb1\x11\xfe\xef\x9d\xd9\x95\x5c\x9b\x38\xa0\x43\xe9\xa9\xa0\xc3\xee\xec\x8c\xe6\xcd\x9b\xf7\x9a\x06\x8a\x1c\xe2\x6b\xfb\x59\x15\xcb\x5a\xc0\x66\xc3\x4e\x4f\x01\xa3\xf1\xc3\x7a\x41\xd7\xf3\xb5\x4f\x99\x57\x10\x4a\xa1\x20\xbe\x2a\x84\xcc\x6c\x04\x6f\xf1\x91\xf2\x6e\x79\x29\xfc\x51\x48\xdb\x9e\x0c\x57\x73\xd1\xa5\xb6\x79\xee\xd2\x26\xaa\xbd\x03\x18\x51\x99\x42\x3c\x09\x0b\x1c\x8c\x7e\x86\xdc\xe8\xd2\x63\xe0\x33\x29\x26\xe9\xa3\x28\x39\xe6\xc5\xdb\x50\xdb\x13\x38\x55\xec\x80\x8d\x11\x3c\xe1\xbf\xd1\xfa\xa7\x85\x7a\x01\xb5\x2d\xd4\x1c\x0a\x95\x89\x95\xcb\xbb\xa6\x53\x5b\x1d\xb3\xbc\x56\xe9\x5f\x9e\x35\xcc\x66\xf0\xf5\xee\xf2\x1c\x03\x73\xbd\xe0\x86\x97\xb2\xb0\xd5\xb6\xbc\x32\x6e\x07\x11\x84\xff\xef\xe0\x1a\x82\x30\x46\x9b\x08\x1a\x16\x3c\x71\x43\x37\x1f\x61\x2c\xc0\x69\xed\x52\x02\xee\xce\xac\x59\x90\x6a\x85\x7f\xc3\x80\xad\x0c\x24\x30\x9d\x8c\x6e\x46\x17\x0f\x30\x85\x37\x2c\x08\xa6\xf8\xcb\x54\x4b\x85\x43\xd8\x96\xc8\xae\xef\xd1\x11\xd1\xd9\xa6\x5d\x8d\xef\x3e\xf6\xa2\xbf\xcd\xff\xf2\x7e\x34\x1e\xc1\x96\x8a\x41\x31\x84\x41\x0e\x67\xc9\x3e\x29\xc8\xeb\xa0\xa0\xaa\x77\xb7\x97\xb0\x4b\xcc\x20\x8f\x2f\xb4\xac\x4b\xd5\xfd\x36\x81\x01\xe5\xe3\x6e\x5c\xc1\x36\x77\xea\xc7\x35\xb5\xea\xc6\x45\xe1\x50\x9f\x1d\xaa\x90\xa1\xa6\x39\x71\x9a\xf6\x03\xde\x9b\xa2\xe4\x66\xfd\x41\xac\xbb\xa5\x20\xe4\x1f\x62\x85\xac\xdb\x33\xc7\xf7\x90\x4a\x5c\x8b\x13\x7a\xc4\x8f\xf8\x4d\x20\x9b\xc5\x9f\xa8\xcd\x58\x3f\x87\x9e\xd1\x57\x96\x96\x73\x2f\x86\x28\x9e\xa4\x5c\x85\x98\x95\xd3\xc3\x2b\x3c\x1f\x1d\x23\x6a\xa2\x3b\x62\x01\xc2\xa4\x5e\xff\x25\xa0\x0a\x49\xdb\xa5\x89\x6a\xa3\xe8\xea\x96\x4e\x70\x58\x17\xa4\xc2\x21\x3d\xb1\x0d\xfb\x2d\xc1\xce\xaf\xf7\xb2\x36\x5c\x76\x2a\xee\xa4\xba\xe3\x2d\x74\x96\xed\x6d\x2d\xec\xce\xd3\xc7\x3f\x66\xb0\xc3\xe0\x7a\x9b\xe1\xdb\xf7\x7f\x76\xe8\x61\x87\xa5\x63\x86\x5a\x75\xda\xed\x29\xdc\x9e\x4a\x0c\x32\x91\x0b\x03\xcb\xf8\x42\x6a\x2b\xc2\xc8\x03\x90\x9a\x67\x28\x33\x5b\xcb\xca\x92\x56\x2d\x01\xd8\xdf\x58\x83\xb5\xb9\xa6\xca\x5b\xb1\xaa\x42\xb7\xb9\xe0\x80\x75\xfb\x78\xf7\x85\x79\xf7\xdc\xeb\xfc\xe2\x54\x80\x56\xc4\x93\xb7\xf2\xb2\xa7\x33\x3b\x5f\x1e\xa0\xe3\x25\x1f\xbe\x15\xcd\x9b\x00\x5f\x2c\x10\x42\x88\x97\x21\x1c\x57\xd1\x9e\x6d\x5d\xd0\xbb\x96\x6d\x97\xc7\xd8\xaf\x00\x00\x00\xff\xff\x77\x69\x0b\x7d\x7a\x07\x00\x00"

func postgresIdxGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIdxGoTpl,
		"postgres.idx.go.tpl",
	)
}

func postgresIdxGoTpl() (*asset, error) {
	bytes, err := postgresIdxGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.idx.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5d\x73\xea\x46\x0c\x7d\xc6\xbf\x42\xf7\x4e\xa7\xb5\x7b\xa9\x33\x7d\xe8\x43\x33\xc3\x43\x5a\x9c\x96\x69\x0a\x09\x1f\x6d\xdf\x92\xc5\x16\xc1\x53\xb3\x4b\x76\xd7\x24\x0c\x93\xff\xde\xd5\xae\xed\x90\x60\x88\x43\xd2\xfb\x02\xfe\x90\x8e\x8e\x56\x3a\x92\x4f\x4e\x60\xb3\x81\x70\xbc\x5e\x22\x3c\x3e\x82\xc4\xa5\x44\x85\x5c\x2b\x60\x20\xc5\x3d\xcc\xa4\x58\x38\x0b\x36\xcd\x70\x14\xcf\x71\xc1\x8c\x61\x58\x3d\xea\xb3\x05\x79\x86\x9e\x26\x88\x6d\x2c\xa5\x65\x1e\x6b\xd8\x78\x9b\xcd\x0f\x20\x19\xbf\x45\x08\xcf\x53\xcc\x12\x65\xde\x7a\x2d\x32\xb5\xb7\x64\x6b\x6e\x24\x5a\x84\xd2\xdd\x3c\x49\x67\x14\xe3\x96\xde\xdf\xb8\x78\x74\x4d\x97\xc8\xad\x57\x41\xfe\x57\x91\xe5\x0b\x5e\x10\xb1\xd1\xdc\x7b\x7b\x49\x20\x97\x32\x5d\x30\xb9\xfe\x03\xd7\x65\x40\xcf\x6b\x19\xe7\x07\x01\x33\x4b\xc8\x6b\x5d\xe3\x43\xaa\xb4\x6a\xc3\x75\x82\x19\x6a\x4c\x60\x2a\x44\xe6\x55\xb1\x3c\xe3\x52\x50\xaa\x41\x33\x58\x91\xf5\x87\xc4\xf8\xca\x45\xca\x51\x91\xad\x9e\x3f\x3f\x12\x17\x04\x52\x6e\xdf\x24\x4c\xb3\x29\x53\x18\x7a\xb3\x9c\xc7\xe0\x1b\x4b\x35\x17\x52\x73\xca\xa4\xf2\xf9\x7e\x0b\x20\x28\xc2\xf8\x81\xa5\x67\xce\xb6\x65\x8e\x2d\x97\x1c\x6a\x7d\xc3\x22\x2b\x22\x6f\x28\x76\x8b\xcc\x96\x52\xac\xd2\x84\x18\xf2\x99\x90\x0b\xa6\x53\xc1\xeb\xd8\xce\x99\x82\x29\x22\x87\xf2\x48\x6c\x33\x1c\xcb\xbc\x88\xde\x98\x7a\x11\xb4\xe0\xde\xe3\x0a\xa5\x36\x8c\xe9\x4f\xed\x50\xd5\xe2\x68\x5e\x0e\xd9\x4f\xa6\xf0\xcf\xa0\xfb\x4b\x00\x28\xa5\x90\x44\x6f\xc5\x24\xdd\xb8\x07\xae\x61\xcc\x21\xb1\x4c\x22\x4b\xd6\xae\x94\x6d\x98\xb2\x34\xf3\x5a\xe6\xf9\xc1\x02\x10\x5c\x99\xae\x85\x53\x61\x1f\xef\xfd\xcf\x2e\x1d\x98\x19\x10\x4c\x4e\x9f\x63\xab\xcf\x81\xd7\x2a\x1a\x55\xdd\x65\x70\x97\xa3\x5c\x7b\xad\x58\x70\xa5\xe9\x81\x91\x17\x74\xe0\xa6\xd7\x1f\x45\xc3\x31\xf4\xfa\xe3\x41\x13\x9d\x82\x7f\x03\x5f\x0c\x19\x52\x51\x2c\x32\x62\xab\x2a\x59\xd6\xb4\x76\x61\x1d\xc0\x5f\x67\x17\x93\x68\xf4\xc2\x7d\xc5\xb2\x66\xde\xc3\x68\x3c\x19\xf6\x7b\xfd\xdf\x2c\xc7\x27\x43\xb2\x71\x29\xca\x9c\x97\x29\xd2\xa1\x77\x20\x99\x86\x57\x74\x3f\x14\xf7\xbe\x4b\xb7\x4d\xce\x56\xb0\xaf\xd0\xf6\x5f\x56\x22\xa0\x4a\x87\xa3\x98\x71\xff\xdb\xfa\x42\x3d\xa7\x55\xf2\x0f\x6c\x69\x89\xcf\xa7\x0e\xf0\x34\x7b\x51\xc7\xa7\xfa\xa0\x76\x45\x43\x1e\xa3\x1d\x6d\x07\x7a\xa1\x03\x66\x30\xa2\x57\xf5\xbf\xc1\x2d\x9a\x7c\xb2\x34\x0d\x8c\x90\xdb\xbf\xdd\x26\x7f\xc7\xd8\x70\xc8\x8d\x9b\x3c\x11\xa8\xf8\x77\x7a\xa7\xc9\x3f\x1d\xd5\xe5\x2e\x9f\xaa\xcb\x09\x1c\xb8\x28\xd0\xb7\xba\x9c\x02\x3b\xd1\xbf\xae\xab\x72\x24\x35\x0b\x69\xca\xfa\x2f\xcd\x2f\x93\xb3\x75\x34\x03\xaf\x99\xba\x26\x97\xdd\xb3\x71\xd4\x48\x58\xa3\x68\x7c\xb4\xb8\x3a\xe0\xc3\x71\xc2\xfa\xfb\xf7\x68\x18\xed\x8a\xca\x20\x7e\xe3\x90\x62\x91\x73\x7d\x10\x6a\x47\x7f\xd7\x6d\xa8\x24\x18\x3d\x60\xfc\x5e\xf9\x91\xfa\xda\x7b\x0a\xb9\x57\x77\x5b\x2a\x73\xe2\x18\xb1\x15\x82\x32\x3f\x1f\x3a\xfd\x09\xb5\x46\x16\x7b\x1b\xaf\xda\xbf\x5b\x8d\x57\x6f\x59\x49\xae\x68\xb4\x83\xc6\xd5\x12\x0a\xaa\x51\x60\x37\xc3\x12\x25\xad\x68\xf3\x35\xc6\xcd\x58\x70\xcb\x82\x18\x3e\xa5\x10\x1a\x6b\x72\xe8\x0f\xc6\xd1\x29\x5c\x0a\xa5\x6f\x25\x8e\xae\x2e\xe0\xe7\xf0\xa7\x2f\x20\x78\xb6\x7e\xd3\x98\xd8\xb3\x0b\x77\x46\x95\xdb\xe6\x85\x5e\x77\x2b\xf2\x01\x5f\x0a\x5f\x71\x58\x51\x5a\x1f\x34\x84\xb6\xa1\x0e\xcc\x95\x6e\x74\x11\x99\xb9\x72\x3e\x1c\xfc\xd9\x68\xb8\x1c\x90\xf9\x8f\x6f\x13\xf0\xff\xb2\xfb\xca\x6f\xb5\x7d\x9b\xaf\x3c\xa8\xfa\xd5\xb7\xf5\xc5\xee\xfd\x17\x00\x00\xff\xff\x60\xb3\x92\xab\x90\x0c\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xf6\x53\xec\xcf\xe1\x27\x48\x28\x3c\x01\x97\xb6\xdc\x2a\x4a\x81\x43\x8f\x18\x67\x29\x91\x8c\x0d\x6b\x9b\x0a\xa1\xbc\x7b\x77\x13\x22\x51\x55\xad\x7a\xb2\x3c\x5e\xcf\x7c\x3b\x93\x09\x5c\xaf\x50\xce\xcd\x01\xa1\x69\xc0\x1a\xe7\x22\xa4\x3d\x42\x4c\x81\xb0\x82\x23\x05\x8b\x55\x26\x84\xa1\xcc\xad\xcd\xd6\xe1\xca\xee\xf1\x60\x78\xbc\x14\x69\xc1\x13\xb7\xef\x45\x7f\x5f\x18\x62\x25\x21\xad\x2f\x47\x8c\xfc\x32\x82\xfe\x69\x89\x29\x93\x17\x9d\xe5\x21\x04\x0f\xd5\xb6\xd4\xbb\xec\xed\x3d\x48\x51\x6d\xe1\xed\xe5\xe9\x81\xa5\xf7\x70\x14\x37\x57\xc7\xc4\x0e\xbd\x31\x43\x52\xc6\xd6\x59\x52\x09\x93\x38\x96\x5f\xdc\xc7\x80\x44\x81\x38\x5b\xab\xb3\x21\xb9\x75\x8a\xd6\x8a\xf7\x8e\x27\x07\xa7\x8c\x74\xd1\xca\x06\xcf\xee\x2c\xc4\x44\x30\x85\xcd\x6a\xf6\x3c\x7b\x5c\xc3\xdf\x36\xb6\xc1\x9d\x0d\xb7\x76\x0f\x37\x18\x08\xda\xa6\x0b\xa2\xec\xfb\x20\xc1\x60\x56\xf8\x09\x59\x2b\x81\x9c\x4a\x27\xaf\xf2\x63\x19\x3e\x8a\x0e\xeb\x97\x26\x76\x9c\xde\x56\x51\xae\xac\xf1\xc5\x7f\x76\x1e\x69\x55\xef\xda\x85\xff\x4d\xc1\xd7\x4e\x2a\x50\xd4\x26\x75\xd9\xac\x75\xf1\xf3\xda\x7d\x2f\x4d\xab\x86\xd1\x6f\xf3\x7c\x8c\xc5\x43\xb3\xf6\x19\x00\x00\xff\xff\x50\x0d\x9b\xaa\x2f\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\x4e\xc3\x30\x0c\x06\xe0\xf3\xf2\x14\xff\x71\x43\x53\xfa\x0e\x08\xce\x13\xb0\x03\xd7\xac\x75\x49\x44\x1b\x17\xc7\xd5\x36\x55\x7d\x77\x92\x02\x95\x86\xb4\xab\x7f\x7f\xf6\x5f\x55\x78\x3f\x3c\x3d\x22\x24\xa8\x27\xd4\xdc\xf7\x1c\x11\xa2\x92\xb4\xae\x26\xb4\x2c\x68\x9c\xba\x93\x4b\x04\x1e\x48\x9c\x06\x8e\x65\xd9\x29\x6a\x17\x71\x22\x8c\x89\x1a\x9c\x83\x7a\x93\xaf\xe9\x75\xa0\x84\x56\xb8\xc7\x34\xc1\xbe\xd5\x9e\x7a\x87\x79\xb6\x39\x2c\xf9\xd1\xe7\x57\xc9\xf3\xd8\x65\xc3\xf2\xb9\xc0\xf5\x45\x95\xbe\x3a\x9b\xeb\xb8\xd8\xdc\xce\x8e\x17\x6b\xca\xe9\xdf\xb6\x6b\xbf\xc9\x6c\x9e\x2f\x54\x6f\x93\x4a\x88\x1f\x7b\x58\x6b\xd7\x70\x9a\x77\xd8\x16\xfc\x4a\x69\xec\x74\x0f\x12\x61\xd9\x99\xcd\xcb\x48\x72\xbd\x4f\x1e\x16\xc3\xe7\xf4\x4f\xe4\xd1\x5d\xf4\x67\xcc\x6c\x7e\x7a\x2e\xe2\x30\xe8\x4d\xd7\x92\x7e\x07\x00\x00\xff\xff\x17\xda\xf6\x85\x72\x01\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.fkey.go.tpl": postgresFkeyGoTpl,
	"postgres.idx.go.tpl": postgresIdxGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.fkey.go.tpl": &bintree{postgresFkeyGoTpl, map[string]*bintree{}},
	"postgres.idx.go.tpl": &bintree{postgresIdxGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

