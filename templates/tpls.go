// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.index.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xeb\x20\x14\xc5\x67\xee\xa7\xb8\xf2\x12\x13\x25\x8e\xde\xf2\x86\x27\xbd\xa9\xea\xd8\x2c\x4d\xbb\x54\x1d\xa8\x83\x13\x24\x1b\x57\xfc\x49\x1a\x59\xfe\xee\x05\x83\x25\x88\x92\x2c\x16\xbe\x70\xee\xfd\x9d\x03\x9b\x0d\x0e\x03\x56\xbb\xcb\x37\xc7\x71\x44\xa1\xd1\x1c\x39\x2e\xe6\xda\x96\x19\x71\xf2\x3b\x0b\xe4\xd2\x76\x68\x5c\xad\x02\xff\xcd\x64\x56\x48\xf3\xe7\x2f\x40\xdd\x4b\x6d\xb0\x84\x61\x58\xa3\x62\xf2\xc0\xb1\x7a\x67\xad\xe5\xda\x1d\x02\x12\x67\x3d\xbb\x46\x51\x78\x63\x74\x5a\x6a\x7a\x15\x50\xa6\x26\x9e\xa2\x02\xf2\xa0\x45\xba\xfe\x3f\xfd\x3d\x79\xa0\x59\xed\xb0\x9c\x8b\x3d\xae\xdd\x92\x02\x38\x9c\x57\xa3\x84\x3c\xa0\xe2\xc6\x2a\x19\xe6\xeb\x50\x3a\x4d\x9a\xbe\xb9\x66\xaa\xa0\xb1\xb2\xc6\xb2\x4e\x8b\x34\x36\x2a\xe9\x2c\x1f\x80\x9c\x98\x42\x1d\xff\x01\x88\x3e\x0b\x53\x1f\xd1\xe9\xee\xa4\x53\x33\xcd\x1f\xe4\xf3\x0f\x08\xd1\xce\x55\x91\xe6\x51\xa4\x96\xc8\xe8\xc6\x04\x2b\xa8\x61\x9c\x0c\xbe\x30\xa5\x8f\xac\xdd\xf1\x1f\x83\x5d\x58\xeb\xfc\xc2\xa5\xe9\xd1\xb8\xed\x3b\xc6\x92\x06\xce\x5d\xf9\xf1\xf9\x75\x31\x7c\x85\x5c\xa9\x5e\x51\x6f\x33\x0e\x0c\x1b\x65\x5d\xcd\x49\xd0\x15\x4a\xd1\x46\x8c\x37\xd9\x25\x20\x56\xde\x44\x69\x54\xdf\x5d\xa1\x2c\x33\x96\xac\x4b\xe9\x4f\xc6\xb1\x34\xf0\x78\x9c\x18\x73\x88\x7d\x3a\x43\xc9\xc3\xc4\xf3\x3c\x7d\xca\xcb\x3a\x3e\x9e\xdb\x17\x91\x45\xbe\xe7\x0d\xb3\xad\xf1\xb2\x18\xc4\x44\xa2\xab\x2d\x3f\x97\x85\x90\xee\x19\x89\x7d\xea\xb2\xa0\xd9\x3d\xc5\x88\x7e\x03\x00\x00\xff\xff\x1e\xee\xeb\xff\x86\x03\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIndexGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\x02\x04\x00\x00\xff\xff\x93\x06\xd7\x32\x01\x00\x00\x00"

func postgresIndexGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIndexGoTpl,
		"postgres.index.go.tpl",
	)
}

func postgresIndexGoTpl() (*asset, error) {
	bytes, err := postgresIndexGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.index.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x97\xcf\x72\xdb\x36\x10\xc6\xcf\xe2\x53\x6c\x34\x9d\x54\x6a\x14\x7a\x7a\xe8\xa1\x99\xd1\xc1\x89\x19\xd7\x53\x57\x76\x24\xb9\xed\xcd\x86\xc4\x95\xcd\x31\x05\x28\x00\x24\x5b\xa3\xc9\xbb\x77\x17\x80\x68\x3a\x24\x55\xc6\x4d\x4f\xe2\x1f\xec\xee\x47\xec\xef\x03\xa0\xa3\x23\xd8\xed\x20\x9e\x6e\x57\x08\x5f\xbe\x80\xc6\x95\x46\x83\xd2\x1a\x10\xa0\xd5\x03\x2c\xb4\x5a\xfa\x11\x62\x96\xe3\x64\x7e\x87\x4b\x41\x03\xe3\xe2\xd1\x48\x2c\x39\x32\x8e\x2c\xa7\x28\xe7\x32\x56\xaf\xe7\x16\x76\xd1\x6e\xf7\x16\xb4\x90\xb7\x08\xf1\xc7\x0c\xf3\xd4\xd0\xdb\xa8\xc3\x43\xdd\x2d\x8f\xa5\x1b\x8d\x2e\x43\x7c\xaa\x42\x02\x7a\x96\x2d\xb8\xca\x2d\x8f\xb8\xf1\x15\xf9\x9a\x2f\x51\xba\xb8\x20\xff\x83\xca\xd7\x4b\x19\xa4\xb8\x7a\xfe\xbd\xbb\xe4\x24\x97\x3a\x5b\x0a\xbd\xfd\x1d\xb7\xfb\x92\x51\xd4\xa1\xe0\x47\x05\x0b\x27\x29\xea\x5c\xe3\x63\x66\xac\x19\xc0\x75\x8a\x39\x5a\x4c\x61\xa6\x54\x1e\x15\xb5\x22\x0a\x09\x92\x6a\xb2\x51\xae\xc4\xc5\x43\x4a\xb1\x7a\x99\x49\x34\x3c\xd6\xde\x3d\x9f\x14\x5f\x04\x32\xe9\xde\xa4\xc2\x8a\x99\x30\x18\x47\x8b\xb5\x9c\x43\xcf\xc2\x4f\xa5\xc1\xfd\x90\xb2\xd7\x77\x52\x68\x26\x3b\x34\x49\x6b\x4d\xb1\x71\x50\xcb\xa2\xa8\xf4\x49\x50\xbc\xd2\x6a\x93\xa5\x5c\x59\x2e\x94\x5e\x0a\x9b\x29\x59\xa7\xe2\x4e\x18\x98\x21\x4a\xd8\x7f\xaa\x6b\x73\x1b\x45\xa1\x52\xad\xa4\x90\x2c\x68\x3a\x45\x5b\x8a\x7c\xbf\xbd\xbc\xc7\x2d\x37\x59\x67\xb8\x41\xc6\xcb\x64\xf2\x36\xc7\x6f\xa2\x0c\x04\x07\x96\xd2\x06\x99\x75\xb5\x7a\xe9\x0c\xfe\xbe\x38\x79\x3f\x80\xd5\xbd\x0b\x79\xea\x5a\xf1\x35\xbd\xf2\xc7\x0d\x00\xb5\x56\xba\xcf\x1f\xb5\x11\x9a\xef\xfc\x13\x8f\x8a\xf9\x9c\xc3\xe7\x35\xea\x6d\xd4\x99\x2b\x69\x2c\x3f\x20\xc4\x61\x08\x37\x93\xe4\x3c\xf9\x30\x85\x1b\x78\x13\x75\x3a\x4c\xe7\x5c\xe5\x92\x14\x9b\x02\xf8\x6e\xd7\x31\xec\x07\x7c\x1c\x5f\xfc\xd1\xea\x6b\xc3\xf8\xbf\x7e\x4b\xc6\x09\xd5\xf9\xe1\xe7\x1b\x2f\x45\xaf\xe5\x5e\x0a\x4d\x28\xbc\x1b\x96\xa7\x64\x47\xde\x62\xe9\x43\x48\x67\xf1\x27\x1e\x35\x56\x0f\x3d\x2f\x96\xe7\xa2\x1f\x4f\xe6\x42\xf6\x28\xc2\x91\x5f\xd1\xd9\x7d\x4d\x39\x59\x6e\x3f\xea\x10\x3a\x9c\xea\xd5\x10\x64\xe6\x9a\xbd\xef\x36\xdd\xba\xe9\x8a\x3a\xc1\x48\x86\x74\x38\x24\x51\xce\xd1\xc9\xda\x23\x4a\x42\x68\x21\xc0\xa8\x20\x85\xf3\x0f\x38\x43\x03\x28\xcf\x7b\x55\x2c\x11\xdf\x1f\x9d\xa3\x23\x2e\x7f\x9c\x67\xf4\x8a\xec\x52\x4b\x51\x03\x60\xf5\x1a\xff\x13\x72\x61\x76\x1a\x50\x76\x9d\x0b\x13\x76\x26\x0d\x6a\x4b\x1e\xe7\x1f\x53\x31\xb7\x55\xad\x9c\xec\xb3\xec\x25\xf7\xbd\x92\x06\xf6\x89\x03\x91\x6b\x14\xe9\xd6\x37\x79\x00\x33\x41\xfd\x63\x3e\x9e\xfa\x5c\xc2\xc3\x85\x9a\x78\x84\x0f\xbd\xae\x97\x09\x0b\x0a\xc0\xf4\xdd\xf3\x3c\xa6\xdb\x7f\x22\xa8\xd9\x5f\x67\xa3\x49\x32\x9e\xc2\xd9\x68\x7a\xd1\xaa\xd5\xbd\x03\x4e\xac\x69\x5b\x18\xdd\x87\x3f\x8f\xcf\xaf\x92\xc9\x57\xe1\x1b\x91\xb7\x8b\x1e\x27\xd3\xab\xf1\xe8\x6c\x74\xfa\x55\xeb\x79\x4c\xc5\xb7\xcd\x0e\xad\x37\x66\xa5\x70\xd7\x7b\xd4\x9b\xf9\xb5\x8d\xeb\x89\x3c\xe4\xe1\x03\xf6\x6d\x36\xef\x93\x6d\xaf\x56\x44\x18\xc2\xda\xfd\x54\x29\x6c\xb9\xc3\xf9\x2c\xad\x29\x4c\x15\x1a\xf9\xa3\xad\x50\xf8\xea\x5f\x31\xf4\x3a\x0b\x0c\x39\x11\x48\x15\x32\x95\x30\xe4\x22\x7e\x1f\x7b\x0e\xf9\x7e\xa7\x6c\x97\x9e\xda\x70\xcf\xdb\x2a\x7d\x8b\x0b\xa4\x7d\xb8\x1d\xea\x57\x97\x27\xc7\xd3\xa4\x15\xe5\x93\x64\xfa\x62\xd2\x87\xd0\x83\x97\x51\xee\x37\xa3\x0a\xe1\xbc\x3d\xf9\x4c\x73\xb5\x96\xf6\x60\xaa\x8a\x19\xae\xdd\x3a\xe8\xfd\x90\x3c\xe2\xfc\x65\x5e\x18\xc0\x01\x17\x94\x98\xf7\xf8\x4e\xc4\x06\xc1\x88\x4d\x0d\xba\x2d\x17\x50\xce\x50\x03\xae\xc3\xa5\x38\xb8\x95\x70\xb1\x71\x01\x7b\x40\xa1\x78\x51\xac\xc5\xfd\xc2\x5c\x6e\xd1\x5c\xa1\xe6\x73\x1c\xed\x5c\x92\x8c\xe6\xd7\x51\xae\x52\xdd\xc5\x46\x17\xd3\xe4\x1d\x5c\x2a\x63\x6f\x35\x4e\x3e\x9d\xc3\xaf\xf1\x2f\x6f\x40\xc9\x7c\xdb\x68\xbc\x86\xe5\xbf\x62\x74\x7f\xe4\x0b\xae\xa8\xce\xd6\x37\x1e\x1d\xff\x27\xab\xb3\xdc\x17\x58\xb8\x1c\x76\xc0\x95\x27\x74\xc0\x23\x57\xb6\x3e\xb8\x1d\x30\x49\xcd\x19\xae\x11\xff\xef\xb1\xaa\xef\x0f\xe5\x9d\xd2\x04\xd4\x2f\xea\xe1\x9f\xce\x5b\xfe\x6f\xf4\x4f\x00\x00\x00\xff\xff\xf5\x53\x34\xcc\x17\x0e\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x4f\x4f\xf2\x40\x10\xc6\xcf\xbb\x9f\x62\xde\xa4\x79\x29\x49\x53\xee\x26\xbd\xa8\xe8\xc5\xa0\x02\x07\x8f\x2c\xed\x20\x4d\xca\x2e\xcc\x6e\x31\xa4\xe9\x77\x77\xa6\x05\x89\x12\x8d\x9e\xda\x79\x76\xfe\xfc\x9e\x67\x34\x82\xa6\x81\xf4\xae\xb6\xf9\xc4\x6c\x10\xda\x16\x72\x53\x55\x1e\xc2\x1a\xc1\x07\x47\x58\xc0\x96\x5c\x8e\x45\x4d\x08\x03\xe9\x9d\xe5\x6b\xdc\x18\xee\x4c\xa5\x3a\x4e\xc5\xf2\xff\x64\x88\xab\x80\x34\x3f\x6c\xd1\xb3\x3a\xec\x96\x4f\x31\xd4\x64\x45\x63\x69\x00\xce\x42\xb1\x4c\xf5\x8a\x4f\x7e\xbd\x1d\x17\x4b\x78\x79\xbc\xbd\x66\x99\x8c\x7d\x45\x88\xca\x04\xa2\x00\x57\x19\xa4\xf7\xee\x62\x7d\x02\x7b\xee\x8c\x4a\xa1\x96\x11\x0c\x72\x83\xfb\xdb\x96\x4b\xb4\x45\x87\x10\x9f\x9f\x78\xc9\x27\x98\x04\x90\xc8\x11\x63\x6a\xb5\x37\x24\x55\xaf\x68\xad\x38\x19\xbf\xab\x60\x57\x23\x1d\xb4\xca\x9d\xf5\x41\x04\x1f\x08\x32\x58\xcc\xc6\x0f\xe3\x9b\x39\xfc\x98\xc7\x6f\x2c\x70\x5b\xb9\xea\x2d\x24\xf0\x01\x1d\x35\x4d\xc9\xe9\x74\xf2\xd9\xc9\xa2\xa7\xa2\xda\x9e\xa8\x84\x99\xad\xc1\xf7\x0e\xb5\x12\x4f\x99\x24\xfe\x2c\x33\x53\xf7\x16\xf7\x2e\xfe\x9e\xf1\x99\x84\x3d\x1b\x1b\xff\xe7\x9b\x43\xad\x98\x5f\x6e\xfc\xcb\xc0\x96\x95\x24\xa9\xa8\x23\xe8\xa9\x58\x3b\x81\x4d\xca\xea\x32\x7d\xad\x5a\xb6\x75\x9c\xe0\x4f\x22\x5b\x34\x6b\xef\x01\x00\x00\xff\xff\x5c\xcb\xe6\x92\x9a\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\x4e\xc3\x30\x0c\x06\xe0\xf3\xf2\x14\xff\x71\x43\x53\xfa\x0e\x08\xce\x13\xb0\x03\xd7\xac\x75\x49\x44\x1b\x17\xc7\xd5\x36\x55\x7d\x77\x92\x22\x2a\x6d\xd2\xae\xfe\xfd\xd9\x7f\x55\xe1\xe5\x19\x21\x41\x3d\xa1\xe6\xbe\xe7\x88\x10\x95\xa4\x75\x35\xa1\x65\x41\xe3\xd4\x9d\x5c\x22\xf0\x40\xe2\x34\x70\x2c\xcb\x4e\x51\xbb\x88\x13\x61\x4c\xd4\xe0\x1c\xd4\x9b\x7c\x4b\xaf\x03\x25\xb4\xc2\x3d\xa6\x09\xf6\xa3\xf6\xd4\x3b\xcc\xb3\xcd\x61\xc9\x8f\x3e\xbf\x4a\x9e\xc7\x2e\x1b\x96\xef\x05\xae\x2f\xaa\xf4\xd3\xd9\x5c\xc7\xc5\xe6\x76\x76\xbc\x58\x53\x4e\xe3\xf3\x50\xda\xae\xfd\x26\xb3\x79\xbd\x50\xbd\x4d\x2a\x21\x7e\xed\x61\xad\x5d\xc3\x69\xde\x61\x5b\xf0\x3b\xa5\xb1\xd3\x3d\x48\x84\x65\x67\x36\x6f\x23\xc9\xf5\x31\x79\x5a\x0c\x9f\xd3\x9d\xc8\xa3\x87\xe8\xdf\x98\xd9\xfc\xf5\x5c\xc4\x61\xd0\x9b\xae\x25\xfd\x0d\x00\x00\xff\xff\x5a\xbc\x45\xff\x70\x01\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.index.go.tpl": postgresIndexGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.index.go.tpl": &bintree{postgresIndexGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

