// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.fkey.go.tpl
// templates/postgres.func.go.tpl
// templates/postgres.idx.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x6f\xa3\x30\x10\xc5\xcf\x9e\x4f\x31\xe2\x12\x1c\x25\x44\x7b\xd9\xc3\x4a\x39\xad\xf6\xb8\xbd\x34\xed\xa5\xea\xc1\x25\x26\x20\x05\x53\xf9\x4f\xd2\x08\xf1\xdd\x6b\x63\xbb\x81\x14\xaa\xf6\x82\x60\x98\x79\xf3\xf3\x7b\xde\x6c\xb0\x6d\x31\xdb\x5d\x5e\x39\x76\x1d\x56\x0a\x75\xc9\x71\xe1\x6a\xff\x84\xa9\x43\x7d\x81\xdc\x7e\xa0\xb6\x5f\x19\xb8\xe7\x68\xc8\x54\x42\xff\xfa\x0d\x90\x37\x42\x69\x4c\xa1\x6d\xd7\x28\x99\x38\x70\xcc\x1e\xd9\xd1\x70\x65\x9b\x80\x84\x4d\x7d\xc5\x16\x26\xb6\xde\x2c\xc5\xa2\x91\x57\x92\x38\xb7\xc8\x80\xcc\xe9\x6c\x87\x58\xa9\x7b\xff\xeb\x90\x62\x2b\xb5\x64\xf6\x20\x7b\x5c\x5b\x1e\x0a\x60\x89\xee\xb5\xac\xc4\x01\x25\xd7\x46\x0a\x4f\xa1\x7c\xe9\xd4\x0f\x35\xc5\x07\x59\x90\xcd\xa0\x30\x22\x47\xa7\xae\xca\x46\x6a\xc1\x6a\x7e\x25\x18\x34\xd2\x20\x9e\xd2\x28\xd9\x02\x39\x31\xd9\x5b\x69\x91\x42\x15\x80\xa8\x73\xa5\xf3\x12\x67\x14\x67\xec\xcc\x99\xe2\x73\x86\xfe\x01\x42\xe2\x96\x2d\x26\xb7\x16\x26\x43\x1f\x48\x67\x09\xfc\xf9\x23\x19\x74\xbd\x37\xff\x99\x54\x25\x3b\xee\xf8\x9b\xc6\xda\xbf\xab\xf1\x65\x11\xba\x41\x6d\x7f\xff\xc0\x93\x81\xa8\x35\x26\x7d\x7a\x7e\xb9\x68\xbe\x42\x2e\x65\x23\xa9\x73\x28\xa0\xf8\x1f\xd3\x8a\x59\x34\x96\xae\x50\x54\x11\xf7\x41\xd4\x03\x60\x23\x26\x91\x0b\xd9\xd4\xdf\x40\x5e\x8e\x98\x47\xca\xa9\x9b\x0e\x78\xd4\x73\x3b\xec\x90\xa1\xcf\xb4\xef\xa1\xe4\xcb\xe8\x3e\xa7\xe2\x52\x5b\x4e\xf3\x6c\xe7\x92\x8e\x49\x76\x2e\xc5\x3d\x2f\x98\x39\x6a\xa7\x13\x03\x75\x78\x2a\xbb\xe3\xe7\x34\xa9\x84\xbd\xd2\xd5\x7e\x68\x47\x42\x47\xf1\x07\x2f\xdf\x03\x00\x00\xff\xff\xe1\xf5\x8e\x9d\x13\x04\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresFkeyGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x0e\x82\x30\x10\x44\xef\xfd\x8a\xbd\x49\x09\x81\x7f\x40\xe3\x51\x13\xe3\xc1\x2b\xc2\x12\x9a\x40\x6b\xb6\x6d\x0c\x21\xfd\x77\xdb\x0a\x04\x89\xbd\xcd\xbe\xd9\x9d\x69\x51\xc0\x34\x41\x7e\x1f\x5f\x08\xce\x01\xa1\xb1\x24\x35\x98\x0e\xe3\xfc\x86\xed\x82\x2a\xad\x55\x2d\x2a\x83\x0d\xbc\x85\xe9\x56\xcb\xcc\x0f\x3a\xaa\xb3\xc0\xbe\x09\xf6\x24\xa8\xa3\xea\xed\x20\x2f\xd5\x10\x1c\x3c\x67\xad\x95\x75\x24\xba\x53\x64\x64\x98\xaf\xd1\xe9\xe6\x18\xdf\x85\x27\xcd\x13\x1e\xd7\x53\xc9\x21\x49\x7f\x49\x06\x48\xa4\xc8\x2f\x30\xf0\xef\xdb\x7f\xb7\x5d\x8e\xb3\x5e\xca\xf9\x73\x19\xfc\x6d\x91\x6f\xff\xc0\x99\x63\xec\x13\x00\x00\xff\xff\xd1\x43\xc2\xb5\x21\x01\x00\x00"

func postgresFkeyGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresFkeyGoTpl,
		"postgres.fkey.go.tpl",
	)
}

func postgresFkeyGoTpl() (*asset, error) {
	bytes, err := postgresFkeyGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.fkey.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresFuncGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x4d\x6f\x9c\x30\x10\x3d\xe3\x5f\x31\x45\x68\x05\x2d\x21\xed\x35\x12\x97\xa6\xea\x31\xdb\xaf\x43\xa5\x28\x52\xbd\x8b\x49\x2d\x79\x6d\xb0\x4d\x9b\x15\xca\x7f\xef\x8c\xcd\xb2\xd0\x34\x52\x54\x4e\xe6\xcd\x8c\xe7\xbd\x79\xe3\x71\x84\xec\xf3\x20\xec\xf1\xda\x1c\x0e\x42\x7b\x07\x57\x35\x54\x6b\xe4\xf1\x91\x8d\xe3\x05\xc8\x16\xaa\x09\x83\x0b\xc4\x2e\x2f\x01\xab\x67\x68\xca\x12\xca\x89\x65\xf8\x86\x1f\x04\xc6\xc0\x0e\xda\x01\x87\xfd\xe0\xbc\x39\x40\x4f\x0d\x4a\xb0\xc2\x0f\x56\x4b\x7d\x8f\x27\x37\x28\xec\xc5\x5d\xa8\xfa\x76\xec\xa8\xaa\x8a\x57\xea\x86\x6e\x6f\x07\xbd\x5f\x5d\x99\x37\x3b\xf8\xbe\xfd\xf0\x1e\x31\xcb\xf5\xbd\x80\x4c\x96\x90\x75\x41\xc1\x27\x6e\x31\xcb\x0b\x4b\xf4\x4b\x2a\x93\xba\x11\x0f\x14\x7e\x4b\xb5\x4b\xe0\x1d\x02\xf8\x1f\xdb\x14\x90\x53\xac\x05\x6d\x3c\x54\x5b\xad\x8e\x5b\x4d\xdd\x6e\xef\xe6\x94\xd7\x0b\x86\x25\x08\x6b\x8d\x2d\x60\x64\x80\xdf\x2f\x6e\x09\x88\x20\x0b\x10\xce\xc1\xf5\x2a\x2a\x0e\xc0\xde\x68\xe7\x09\x73\xde\x42\x0d\x6b\xf6\xea\x3c\xff\xc8\x0a\x99\x64\x92\x18\xbf\x99\xfb\x47\x34\x9f\xf8\xaf\xbd\xca\x64\x41\xc9\x71\xf8\xcf\x64\x2c\xe5\x2e\x3a\xb0\x64\x1c\x09\x44\xf3\x7e\xd0\x5a\x28\x88\x87\x69\xfc\x2c\xc1\x4b\xd1\xc5\x49\xc9\x69\x23\xce\x13\x62\x09\xa9\x47\x4b\x97\x0e\xb2\x84\xc6\x51\x43\xb3\x8b\xa2\xbe\x98\xdf\x79\x94\x3e\xeb\x7e\xd6\xab\x2a\x58\x75\x76\xa6\xfa\xba\xe7\x9a\xdc\x69\xa5\x50\x8d\xc6\x1a\x87\x7d\xf8\x4e\x89\xea\x23\x21\x0e\xd2\x14\xd2\x0d\x32\x48\x29\x9d\x25\xc8\x8f\xba\xbf\xaa\x41\x4b\x85\x0e\x25\x49\x5c\x38\xfa\x0d\xc6\xb1\x84\x74\x4d\x20\x15\x96\x14\x3a\xef\x31\xf1\xef\x43\x26\xd9\x72\xd2\xf0\xdf\x02\x5e\xc8\x28\x69\x44\x2b\x2c\xf4\xd5\xb5\x32\x4e\xe4\x45\x1c\xbd\x32\xbc\x39\x3d\x13\xe2\x1c\x5e\xea\xed\xdd\x72\x19\x47\xac\x6d\x0d\x55\xde\x88\x07\x9f\x17\xa1\x01\xc6\xdd\x4f\x63\x3d\xcd\x2b\x66\xe2\x7e\x5c\xd5\xb0\xae\xc3\x44\x5a\x54\x1c\x30\x9e\xa2\x65\xfd\x8b\xe6\x9d\x77\x56\xe2\xeb\x4f\x37\x78\xfc\xab\x4f\x51\x44\xd1\xff\x50\xfd\x54\x76\x70\x22\xc8\xaa\x81\x77\x1d\x4e\x2c\xc7\x9f\x12\x36\x4f\xf9\xc7\x5b\x17\xce\x85\xc4\xd9\xb8\xb8\xae\x18\xfe\x13\x00\x00\xff\xff\x43\xe1\xaa\x91\xdc\x04\x00\x00"

func postgresFuncGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresFuncGoTpl,
		"postgres.func.go.tpl",
	)
}

func postgresFuncGoTpl() (*asset, error) {
	bytes, err := postgresFuncGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.func.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIdxGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\x41\x4f\xdc\x3c\x10\x3d\xc7\xbf\x62\x3e\xb4\x42\xc9\xd7\x25\xa8\x57\xa4\x3d\x14\x58\x54\x54\x0a\x14\xa8\x5a\xa9\xaa\xba\x26\x71\x16\xab\x8e\x9d\xb5\x13\x60\x15\xf1\xdf\x3b\x63\x27\xcb\x6e\x59\xa4\x1c\xaa\x9e\x2a\xe5\x60\x8f\xdf\x64\xde\xbc\x99\xd7\xb6\x20\x0b\x48\x4f\xdd\x67\x2d\x17\x8d\x80\xa7\x27\xb6\xbf\x0f\x18\x4d\x6f\x96\x15\x5d\x0f\x97\x01\x32\xaf\x21\x56\x42\x43\x7a\x22\x85\xca\x5d\x02\x6f\xf1\x91\x70\xe7\xbc\x14\xe1\x28\x94\xeb\x4e\x96\xeb\xb9\xe8\xa1\x1d\xce\x5f\x3a\xa0\xde\x38\x80\x15\xb5\x95\xe2\x5e\x38\xe0\x60\xcd\x03\x14\xd6\x94\x81\x03\xbf\x55\xe2\x3a\xbb\x13\x25\x47\x5c\xba\x0a\x75\x35\x81\x53\xc6\x1a\xd9\x14\xc9\x13\xff\x33\x63\x7e\x3a\x68\x2a\x68\x9c\xd4\x73\x90\x3a\x17\x8f\x1e\x77\x4a\xa7\x2e\x3b\x65\x45\xa3\xb3\xbf\xdc\x6b\x9c\xdf\xc2\xd7\x8b\xe3\x43\x0c\xcc\x4d\xc5\x2d\x2f\x95\x74\xf5\x2a\xbd\xb6\x7e\x06\x09\xc4\xff\xaf\xf1\x1a\x83\xb0\xd6\xd8\x04\x5a\x16\xdd\x73\x4b\xb7\x10\x61\x2c\xc2\x6e\xdd\x42\x01\xce\xce\x2e\x59\x94\x19\x8d\x7f\xc3\x80\xab\x2d\x4c\x60\x76\x3d\x3d\x9b\x1e\xdd\xc0\x0c\xde\xb0\x28\x9a\xe1\x2f\x33\xa3\x34\x36\xe1\x3a\x21\xfb\xba\x3b\x3b\x24\x67\x07\x3b\xb9\xba\xf8\x38\x48\xfe\x0e\xff\xe5\xfd\xf4\x6a\x0a\x2b\x29\x46\x72\x0c\xa3\x02\x0e\x26\x9b\xa2\xa0\xae\x23\x49\x59\xef\xce\x8f\x61\x5d\x98\x51\x91\x1e\x19\xd5\x94\xba\xff\xed\x04\x46\x84\xc7\xd9\xf8\x84\x15\x76\x16\xda\xb5\x8d\xee\xdb\xc5\xc5\xa1\x3a\x6b\x52\xa1\x42\x6d\xbb\xe7\x77\x3a\x34\x78\x69\x65\xc9\xed\xf2\x83\x58\xf6\x43\x41\xca\x3f\xc4\x23\xaa\xee\x0e\xbc\xde\x63\x4a\xf1\x25\xf6\xe8\x11\x3f\xd2\x77\x02\xf9\x6d\xfa\x89\xca\x5c\x99\x87\x38\x28\xfa\xca\xd0\x0a\x1e\x96\x21\x49\xaf\x33\xae\x63\x44\x15\xf4\xf0\x8a\xce\x3b\xbb\xc8\x9a\xe4\x4e\x58\x84\x34\xa9\xd6\x7f\x13\xd0\x52\xd1\x74\xa9\xa3\xc6\x6a\xba\xfa\xa1\x13\x1d\xd6\x07\x29\x71\x4c\x4f\xec\x89\x3d\xaf\x60\xef\xd7\x4b\xd5\x58\xae\xfa\x2d\xee\x57\x75\xcd\x5b\xe8\x2c\x37\xd8\x5a\x58\x9d\x67\x77\x7f\xcc\x60\xdb\xc9\x0d\x36\xc3\xb7\xef\xff\xec\x30\xc0\x0e\x0b\xaf\x0c\x95\xea\x77\x77\xe0\xe2\x0e\xdc\xc4\x28\x17\x85\xb0\xb0\x48\x8f\x94\x71\x22\x4e\x02\x01\x65\x78\x8e\x6b\xe6\x1a\x55\x3b\xda\x55\x47\x04\x36\x27\xd6\x62\x6e\x61\x28\xf3\x5c\x3c\xd6\xb1\x9f\x1c\x99\xce\xdd\x19\x5b\xd3\x00\x56\xc8\x97\x76\x1e\xe2\xe7\x17\x86\xde\x70\xb4\xf7\x90\xdf\x0c\xb4\x27\x9e\x82\xbd\x17\x83\xdc\x1a\x57\x56\xea\x1a\x4d\x8b\xc7\xdf\xd8\x26\x49\x90\x6e\x8b\x76\x2f\xc5\x0b\x1c\x48\x9c\x09\xf0\xaa\x42\x6e\x31\x5e\xc6\xb0\xbb\x55\x85\x64\xc3\xf7\x1e\xf8\x6c\x7b\x3f\x7c\xc6\x7e\x05\x00\x00\xff\xff\xb9\xe5\x4f\x82\xba\x07\x00\x00"

func postgresIdxGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIdxGoTpl,
		"postgres.idx.go.tpl",
	)
}

func postgresIdxGoTpl() (*asset, error) {
	bytes, err := postgresIdxGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.idx.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xc1\x72\xdb\x46\x0c\x3d\x8b\x5f\x81\x64\x3a\x2d\xd5\x28\xcc\xf4\xd0\x43\x33\xa3\x43\x5a\x33\xad\xa7\xae\xec\x48\x72\xdb\x9b\xbd\x22\x21\x9b\x53\x72\x57\xd9\x5d\xda\xd6\x68\xf2\xef\x05\x76\x49\x8a\xb6\x28\x85\x51\xdc\x5e\x6c\x71\x09\x3c\x3c\x2c\xf0\x00\x6e\x36\xaf\x21\x5b\x42\xf4\x8b\x2a\x0a\x94\x16\x5e\x7f\xfa\x14\xbc\x79\x03\x9b\xcd\xf6\x88\x4e\xd8\x0a\x73\x83\xed\xd7\xf3\xf5\x0a\xe9\x1d\x68\x5c\x69\x34\x64\x68\x40\x80\x56\xf7\xb0\xd4\xaa\xf0\x16\x62\x91\xe3\x2c\xb9\xc5\x42\x90\x61\xd4\x1c\x4d\x44\xc1\x9e\x91\x87\x95\x29\x47\xb0\x8c\xd6\x86\x35\x56\x97\x89\x85\x8d\x33\xd2\x42\xde\x20\x44\xef\x33\xcc\x53\xc3\xe6\x03\x36\x75\x8f\x6c\x4b\x0f\x1a\x1d\x42\xed\x4e\x27\x9c\xd5\x5c\xdc\xf0\xfb\x6b\x1f\x9a\x7f\xf3\x4f\x1f\x12\x9a\x34\xf3\xb2\x90\x15\xa7\x36\xa5\xfa\x6a\x2e\x74\x56\x08\xbd\xfe\x1d\xd7\x75\xc0\x20\x18\x90\xf3\x83\x82\xa5\x23\x14\x0c\xae\xf0\x21\x33\xd6\x8c\xe0\x2a\xc5\x1c\x2d\xa6\xb0\x50\x2a\x0f\x9a\x58\x01\xb9\x54\x94\x3a\xd0\x08\x2b\x76\xfe\x90\x92\xaf\x2e\x32\x89\x86\x6d\xed\xed\xe3\x2b\xf1\x41\x20\x93\xee\x4d\x2a\xac\x58\x08\x83\x51\xb0\x2c\x65\x02\x21\x59\x9a\x5b\xa5\xad\xe4\x4c\x1a\x9f\xef\x5b\x00\xc3\x2a\x4c\x38\x74\xf4\xe8\x6e\x07\x74\x6d\xa5\x96\xd0\xe9\x1b\x55\x59\x31\x79\xa2\x78\x52\x65\xb6\xd2\xea\x2e\x4b\x99\xa1\x5c\x2a\x5d\x08\x9b\x29\xd9\xc5\xf6\x56\x18\x58\x20\x4a\xa8\xaf\xc4\xf5\xc5\xb1\xcc\xab\xe8\xbd\xa9\x57\x41\x2b\xee\xa7\xd2\xa0\xb6\xc4\x98\xff\x99\x1d\xaa\x56\x1d\xcd\xcb\x23\x87\xe9\x02\xfe\x3e\x3f\xf9\x79\x08\xa8\xb5\xd2\x4c\xef\x4e\x68\x7e\xf0\x07\xbe\x61\xe8\x92\x44\xae\x51\xa4\x6b\x5f\xca\x11\x2c\x44\x96\x07\x03\x3a\x3f\x58\x00\x86\xab\xd3\x75\x70\x26\x9a\xe0\x7d\xf8\xd2\xa7\x03\x4b\x02\xc1\xf4\xed\x63\x6c\xf3\x72\x18\x0c\xaa\x46\x35\x1f\x73\xf8\x58\xa2\x5e\x07\x83\x44\x49\x63\xf9\x80\xe4\x05\x63\xb8\x3e\x9d\xcc\xe2\xe9\x1c\x4e\x27\xf3\xf3\x3e\x92\x85\xf0\x1a\x5e\x11\x19\x56\x51\xa2\x72\x66\x6b\x1a\x59\x76\xb4\x76\x65\x3d\x84\x3f\xdf\x9d\x5d\xc6\xb3\x27\xee\x77\x22\xef\xe7\x3d\x8d\xe7\x97\xd3\xc9\xe9\xe4\x57\xc7\x71\x6b\xc8\x36\x3e\x45\x5d\xca\x3a\x45\xbe\xf4\x31\xa4\x8b\xe8\x03\x3f\x4f\xd5\x7d\xe8\xd3\x1d\xb1\xb3\x13\xec\x67\x68\x87\x4f\x2b\x31\xe4\x4a\x47\xb3\x44\xc8\xf0\xdb\xee\x42\x3d\xa6\x55\xf3\x1f\xba\xd2\x32\x9f\x17\x63\x90\x59\xfe\xa4\x8e\xdb\xfa\xa0\xf5\x45\x43\x99\xa0\x1b\x6d\x07\x7a\x61\x0c\x34\x18\x31\x68\xfa\x9f\x70\xab\x26\xbf\x5c\x51\x03\x23\x94\xee\xdf\x6e\x93\x7f\xc5\xd8\xf0\xc8\xbd\x9b\x3c\x55\x68\xe4\x77\x76\xa7\xc9\x5f\x1c\xd5\xe5\x3e\x9f\xa6\xcb\x19\x1c\xa4\xaa\xd0\x5b\x5d\xce\x81\xbd\xe8\x3f\xaf\xab\x7a\x24\xf5\x0b\x49\x65\xfd\x87\xe7\x17\xe5\xec\x1c\x69\xe0\xf5\x53\xd7\xe5\xc5\xc9\xbb\x79\xdc\x4b\x58\xb3\x78\x7e\xb4\xb8\xc6\x10\xc2\x71\xc2\xfa\xeb\xb7\x78\x1a\xef\x8a\x8a\x10\xbf\xf1\x48\x89\x2a\xe9\x0b\xe0\x10\xd4\x8e\xfe\xae\x46\xd0\x48\x30\x7e\xc0\xe4\x6b\xe5\xc7\xea\x1b\xed\x29\xe4\x5e\xdd\xb5\x54\xe6\xc5\x31\x13\x77\x08\x86\xfe\x3c\xeb\xf4\x67\xd4\x0e\x59\xec\x6d\xbc\x66\xff\xb6\x1a\xaf\xdb\xb2\x91\x5c\xd5\x68\x07\x8d\x9b\x25\x34\x6c\x46\x81\xdb\x0c\x2b\xd4\xbc\xa2\xe9\xc3\x4c\xd2\x58\xf0\xcb\x82\x19\x6e\x53\x88\xc8\x9a\x1d\x26\xe7\xf3\xf8\x2d\x5c\x28\x63\x6f\x34\xce\x3e\x9c\xc1\x4f\xd1\x8f\xaf\x40\xc9\x7c\xfd\x45\x63\x62\xcf\x2e\xdc\x19\x55\x7e\x9b\x57\x7a\xdd\xad\xc8\x33\x7c\x29\xfc\x8f\xc3\x8a\xd3\x7a\xa6\x21\xd4\x86\x3a\x30\x57\x4e\xe2\xb3\x98\xe6\xca\xfb\xe9\xf9\x1f\xbd\x86\xcb\x01\x99\xff\xf0\x65\x02\xfe\x4f\x76\x5f\xfd\xad\xb6\x6f\xf3\xd5\x17\xd5\xbd\xfa\x5a\x5f\xec\xc1\xbf\x01\x00\x00\xff\xff\x9b\xf4\x43\xe1\xce\x0c\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xf6\x53\xec\xcf\xe1\x27\x48\x28\x3c\x01\x97\xb6\xdc\x2a\x4a\x81\x43\x8f\x18\x67\x29\x91\x8c\x0d\x6b\x9b\x0a\xa1\xbc\x7b\x77\x13\x22\x51\x55\xad\x7a\xb2\x3c\x5e\xcf\x7c\x3b\x93\x09\x5c\xaf\x50\xce\xcd\x01\xa1\x69\xc0\x1a\xe7\x22\xa4\x3d\x42\x4c\x81\xb0\x82\x23\x05\x8b\x55\x26\x84\xa1\xcc\xad\xcd\xd6\xe1\xca\xee\xf1\x60\x78\xbc\x14\x69\xc1\x13\xb7\xef\x45\x7f\x5f\x18\x62\x25\x21\xad\x2f\x47\x8c\xfc\x32\x82\xfe\x69\x89\x29\x93\x17\x9d\xe5\x21\x04\x0f\xd5\xb6\xd4\xbb\xec\xed\x3d\x48\x51\x6d\xe1\xed\xe5\xe9\x81\xa5\xf7\x70\x14\x37\x57\xc7\xc4\x0e\xbd\x31\x43\x52\xc6\xd6\x59\x52\x09\x93\x38\x96\x5f\xdc\xc7\x80\x44\x81\x38\x5b\xab\xb3\x21\xb9\x75\x8a\xd6\x8a\xf7\x8e\x27\x07\xa7\x8c\x74\xd1\xca\x06\xcf\xee\x2c\xc4\x44\x30\x85\xcd\x6a\xf6\x3c\x7b\x5c\xc3\xdf\x36\xb6\xc1\x9d\x0d\xb7\x76\x0f\x37\x18\x08\xda\xa6\x0b\xa2\xec\xfb\x20\xc1\x60\x56\xf8\x09\x59\x2b\x81\x9c\x4a\x27\xaf\xf2\x63\x19\x3e\x8a\x0e\xeb\x97\x26\x76\x9c\xde\x56\x51\xae\xac\xf1\xc5\x7f\x76\x1e\x69\x55\xef\xda\x85\xff\x4d\xc1\xd7\x4e\x2a\x50\xd4\x26\x75\xd9\xac\x75\xf1\xf3\xda\x7d\x2f\x4d\xab\x86\xd1\x6f\xf3\x7c\x8c\xc5\x43\xb3\xf6\x19\x00\x00\xff\xff\x50\x0d\x9b\xaa\x2f\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\x4e\xc3\x30\x0c\x06\xe0\xf3\xf2\x14\xff\x71\x43\x53\xfa\x0e\x08\xce\x13\xb0\x03\xd7\xac\x75\x49\x44\x1b\x17\xc7\xd5\x36\x55\x7d\x77\x92\x02\x95\x86\xb4\xab\x7f\x7f\xf6\x5f\x55\x78\x3f\x3c\x3d\x22\x24\xa8\x27\xd4\xdc\xf7\x1c\x11\xa2\x92\xb4\xae\x26\xb4\x2c\x68\x9c\xba\x93\x4b\x04\x1e\x48\x9c\x06\x8e\x65\xd9\x29\x6a\x17\x71\x22\x8c\x89\x1a\x9c\x83\x7a\x93\xaf\xe9\x75\xa0\x84\x56\xb8\xc7\x34\xc1\xbe\xd5\x9e\x7a\x87\x79\xb6\x39\x2c\xf9\xd1\xe7\x57\xc9\xf3\xd8\x65\xc3\xf2\xb9\xc0\xf5\x45\x95\xbe\x3a\x9b\xeb\xb8\xd8\xdc\xce\x8e\x17\x6b\xca\xe9\xdf\xb6\x6b\xbf\xc9\x6c\x9e\x2f\x54\x6f\x93\x4a\x88\x1f\x7b\x58\x6b\xd7\x70\x9a\x77\xd8\x16\xfc\x4a\x69\xec\x74\x0f\x12\x61\xd9\x99\xcd\xcb\x48\x72\xbd\x4f\x1e\x16\xc3\xe7\xf4\x4f\xe4\xd1\x5d\xf4\x67\xcc\x6c\x7e\x7a\x2e\xe2\x30\xe8\x4d\xd7\x92\x7e\x07\x00\x00\xff\xff\x17\xda\xf6\x85\x72\x01\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.fkey.go.tpl": postgresFkeyGoTpl,
	"postgres.func.go.tpl": postgresFuncGoTpl,
	"postgres.idx.go.tpl": postgresIdxGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.fkey.go.tpl": &bintree{postgresFkeyGoTpl, map[string]*bintree{}},
	"postgres.func.go.tpl": &bintree{postgresFuncGoTpl, map[string]*bintree{}},
	"postgres.idx.go.tpl": &bintree{postgresIdxGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

