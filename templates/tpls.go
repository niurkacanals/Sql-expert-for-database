// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.idx.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xb3\x30\x10\xc6\x67\xdf\xa7\x38\xb1\xc4\x8e\x12\xa2\x77\x79\x87\x4a\x9d\xaa\x8e\xed\xd2\xb4\x4b\xd5\x81\x12\x93\x20\x81\xa9\xec\x23\x69\x84\xf8\xee\x3d\x83\x69\x21\x0d\x5d\x10\x3e\xdf\x9f\xdf\xf3\x9c\x37\x1b\x6c\x1a\x8c\xb7\xe7\x0f\x8d\x6d\x8b\xb9\x43\x3a\x68\x5c\xf8\xd8\xbd\xa9\xcb\x10\x5f\xa0\xe6\x03\x12\x9f\x62\xf0\xdf\x49\x51\x9d\x1b\xfa\xf7\x1f\x20\xad\x8c\x23\x94\xd0\x34\x6b\xb4\x89\xd9\x6b\x8c\x5f\x92\xa2\xd6\x8e\x93\x40\x84\x49\x5d\x84\x03\x57\xa6\x5e\x0c\xc5\xac\xb2\x3f\x24\x43\xdd\x22\x06\x31\xd7\xe7\x76\x8c\x25\xfd\xff\x9d\x47\x1a\x52\x15\x93\xb1\x90\x1d\xae\x99\x47\x01\x30\xd1\x13\xd9\xdc\xec\xd1\x6a\xaa\xad\xe9\x29\x5c\x1f\x3a\x76\x45\x55\xf6\x4d\x16\xda\xc6\x90\xd5\x26\x45\x49\xe3\xa0\x0a\x8d\xa4\x1a\xca\x1b\x10\xc7\xc4\xa2\x0b\x67\x00\xe1\x4e\x39\xa5\x07\xe4\xba\x19\x83\xd2\xc4\xe9\x39\x8b\x6e\x40\x08\xc7\xfa\xa2\x4b\x3b\xa2\xb1\x26\xd1\xf2\x9c\x5e\x0b\x3a\x68\x3b\x85\x0f\x89\x75\x87\xa4\xd8\xea\x4f\xc2\xb2\xff\x77\xd3\x95\x1b\xaa\x90\xf8\x7a\x46\xd9\xa8\x01\xcb\x93\xaf\x6f\xef\x67\xd2\x2b\xd4\xd6\x56\x56\x79\x9d\x61\x60\x7f\x21\x29\x1e\xac\x50\x2b\x34\x79\x11\x30\x9e\x4d\x39\x02\xa9\xcd\x55\x94\xcc\x56\xe5\x05\xca\x72\xc2\x32\xe9\x22\x7d\x66\x18\xab\x7a\x1e\x8f\x13\x7c\xee\x7d\xef\x72\x94\xf8\xd3\xf2\xdf\x9e\x7a\xb7\x97\x14\x9e\xd3\x95\x6d\x4c\x3c\xdf\xe9\x2c\xa9\x0b\xf2\x35\xc1\x89\x0e\xc5\xc5\x8f\xfa\x24\xa3\xdc\xf0\x43\xca\x77\x63\x99\x91\x9a\x2c\x2a\x78\xf4\x15\x00\x00\xff\xff\x51\xd4\xf7\xa2\x89\x03\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIdxGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\x41\x6b\xdb\x4c\x10\x3d\x6b\x7f\xc5\x7c\xc1\x04\xe9\xab\xa3\xd0\x6b\x40\x87\x26\x71\x68\x68\x9a\xa4\x76\x4a\x0b\xa5\xd4\x6b\x69\xe5\x88\xae\x76\xed\x5d\x29\xb1\x11\xfe\xef\x9d\xd9\x95\x5c\x9b\x38\xa0\x43\xe9\xa9\xa0\xc3\xee\xec\x8c\xe6\xcd\x9b\xf7\x9a\x06\x8a\x1c\xe2\x6b\xfb\x59\x15\xcb\x5a\xc0\x66\xc3\x4e\x4f\x01\xa3\xf1\xc3\x7a\x41\xd7\xf3\xb5\x4f\x99\x57\x10\x4a\xa1\x20\xbe\x2a\x84\xcc\x6c\x04\x6f\xf1\x91\xf2\x6e\x79\x29\xfc\x51\x48\xdb\x9e\x0c\x57\x73\xd1\xa5\xb6\x79\xee\xd2\x26\xaa\xbd\x03\x18\x51\x99\x42\x3c\x09\x0b\x1c\x8c\x7e\x86\xdc\xe8\xd2\x63\xe0\x33\x29\x26\xe9\xa3\x28\x39\xe6\xc5\xdb\x50\xdb\x13\x38\x55\xec\x80\x8d\x11\x3c\xe1\xbf\xd1\xfa\xa7\x85\x7a\x01\xb5\x2d\xd4\x1c\x0a\x95\x89\x95\xcb\xbb\xa6\x53\x5b\x1d\xb3\xbc\x56\xe9\x5f\x9e\x35\xcc\x66\xf0\xf5\xee\xf2\x1c\x03\x73\xbd\xe0\x86\x97\xb2\xb0\xd5\xb6\xbc\x32\x6e\x07\x11\x84\xff\xef\xe0\x1a\x82\x30\x46\x9b\x08\x1a\x16\x3c\x71\x43\x37\x1f\x61\x2c\xc0\x69\xed\x52\x02\xee\xce\xac\x59\x90\x6a\x85\x7f\xc3\x80\xad\x0c\x24\x30\x9d\x8c\x6e\x46\x17\x0f\x30\x85\x37\x2c\x08\xa6\xf8\xcb\x54\x4b\x85\x43\xd8\x96\xc8\xae\xef\xd1\x11\xd1\xd9\xa6\x5d\x8d\xef\x3e\xf6\xa2\xbf\xcd\xff\xf2\x7e\x34\x1e\xc1\x96\x8a\x41\x31\x84\x41\x0e\x67\xc9\x3e\x29\xc8\xeb\xa0\xa0\xaa\x77\xb7\x97\xb0\x4b\xcc\x20\x8f\x2f\xb4\xac\x4b\xd5\xfd\x36\x81\x01\xe5\xe3\x6e\x5c\xc1\x36\x77\xea\xc7\x35\xb5\xea\xc6\x45\xe1\x50\x9f\x1d\xaa\x90\xa1\xa6\x39\x71\x9a\xf6\x03\xde\x9b\xa2\xe4\x66\xfd\x41\xac\xbb\xa5\x20\xe4\x1f\x62\x85\xac\xdb\x33\xc7\xf7\x90\x4a\x5c\x8b\x13\x7a\xc4\x8f\xf8\x4d\x20\x9b\xc5\x9f\xa8\xcd\x58\x3f\x87\x9e\xd1\x57\x96\x96\x73\x2f\x86\x28\x9e\xa4\x5c\x85\x98\x95\xd3\xc3\x2b\x3c\x1f\x1d\x23\x6a\xa2\x3b\x62\x01\xc2\xa4\x5e\xff\x25\xa0\x0a\x49\xdb\xa5\x89\x6a\xa3\xe8\xea\x96\x4e\x70\x58\x17\xa4\xc2\x21\x3d\xb1\x0d\xfb\x2d\xc1\xce\xaf\xf7\xb2\x36\x5c\x76\x2a\xee\xa4\xba\xe3\x2d\x74\x96\xed\x6d\x2d\xec\xce\xd3\xc7\x3f\x66\xb0\xc3\xe0\x7a\x9b\xe1\xdb\xf7\x7f\x76\xe8\x61\x87\xa5\x63\x86\x5a\x75\xda\xed\x29\xdc\x9e\x4a\x0c\x32\x91\x0b\x03\xcb\xf8\x42\x6a\x2b\xc2\xc8\x03\x90\x9a\x67\x28\x33\x5b\xcb\xca\x92\x56\x2d\x01\xd8\xdf\x58\x83\xb5\xb9\xa6\xca\x5b\xb1\xaa\x42\xb7\xb9\xe0\x80\x75\xfb\x78\xf7\x85\x79\xf7\xdc\xeb\xfc\xe2\x54\x80\x56\xc4\x93\xb7\xf2\xb2\xa7\x33\x3b\x5f\x1e\xa0\xe3\x25\x1f\xbe\x15\xcd\x9b\x00\x5f\x2c\x10\x42\x88\x97\x21\x1c\x57\xd1\x9e\x6d\x5d\xd0\xbb\x96\x6d\x97\xc7\xd8\xaf\x00\x00\x00\xff\xff\x77\x69\x0b\x7d\x7a\x07\x00\x00"

func postgresIdxGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIdxGoTpl,
		"postgres.idx.go.tpl",
	)
}

func postgresIdxGoTpl() (*asset, error) {
	bytes, err := postgresIdxGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.idx.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5d\x73\xea\x36\x10\x7d\xb6\x7f\xc5\x5e\xa6\xd3\x9a\x5e\xae\xef\xf4\xa1\x0f\xbd\x33\x3c\xdc\x16\xa7\x65\x9a\x42\xc2\x47\xdb\xb7\x44\xd8\x4b\xe2\xa9\x91\x88\x24\x93\x30\x4c\xfe\x7b\xb5\x92\x6c\x20\x10\xe2\x30\xed\x0b\xd8\xd6\xee\xd9\xa3\xd5\x39\x6b\x7f\xfe\x0c\x9b\x0d\xc4\x93\xf5\x12\xe1\xf9\x19\x24\x2e\x25\x2a\xe4\x5a\x01\x03\x29\x1e\x61\x2e\xc5\xc2\x45\xb0\x59\x81\xe3\xf4\x1e\x17\xcc\x04\xc6\xf5\xa3\x01\x5b\x50\x66\x1c\x6a\x82\xd8\xc5\x52\x5a\x96\xa9\x86\x4d\xb8\xd9\x7c\x02\xc9\xf8\x1d\x42\x7c\x91\x63\x91\x29\xb3\x1a\x06\x14\x6a\x6f\x29\xd6\xdc\x48\xb4\x08\x55\xba\x79\x92\xcf\xa9\xc6\x1d\xad\xdf\xba\x7a\x74\x4d\x97\xc8\x6d\x96\x27\xff\x8b\x28\xca\x05\xf7\x44\x6c\x35\xb7\x6e\x2f\x09\xe4\x4a\xe6\x0b\x26\xd7\xbf\xe3\xba\x2a\x18\x86\x81\x49\x7e\x12\x30\xb7\x84\xc2\xe0\x06\x9f\x72\xa5\x55\x07\x6e\x32\x2c\x50\x63\x06\x33\x21\x8a\xb0\xae\x15\x9a\x14\x4f\xe9\x08\x9a\xc1\x4a\x6c\x3e\x64\x26\x57\x2e\x72\x8e\x8a\x62\xf5\xfd\x7e\x4b\x5c\x11\xc8\xb9\x5d\xc9\x98\x66\x33\xa6\x30\x0e\xe7\x25\x4f\x21\xd2\xf0\xfd\x4e\x70\xdb\x43\x46\x6d\x4b\xc5\xf4\x31\x30\x2d\x2a\xa5\xc9\x8d\x3d\x5b\x22\x65\x4a\xf7\x3c\xe3\xa5\x14\xab\x3c\xa3\xca\x7c\x2e\xe4\x82\xe9\x5c\xf0\x63\x2c\xee\x99\x82\x19\x22\x87\x6a\xab\xf6\x90\x9b\x30\xf2\x95\x8e\x52\xf2\x60\x9e\x53\x9f\x2b\x94\xda\x30\xa1\x3f\x75\x40\x41\x8b\x46\xf5\x1c\x4a\x94\xcd\xe0\xef\x61\xef\xe7\x36\xa0\x94\x42\x52\xd9\x15\x93\x74\xe3\x1e\xb8\xc3\x34\x1b\x65\x85\x44\x96\xad\x5d\x9b\x3b\x30\x63\x79\x11\x06\xd4\x80\xaa\x61\x94\x5a\x51\xb6\xa9\x2a\x1e\xe0\x63\xd4\x72\x34\x61\x6e\x12\x30\xfb\xb2\x8f\xa3\x5a\xed\x30\xf0\x82\x51\x0f\x05\x3c\x94\x28\xd7\x61\x90\x0a\xae\x34\x3d\x30\x32\x87\x2e\xdc\xf6\x07\xe3\x64\x34\x81\xfe\x60\x32\x6c\xe2\x17\x88\x6e\xe1\xa3\x21\x43\x6a\x4e\x45\xc1\xcd\x53\x55\xdb\xe3\x88\xc4\x7c\x74\x1b\xfe\xfc\x7a\x39\x4d\xc6\x2f\xd2\x57\xac\x68\x96\x3d\x4a\x26\xd3\xd1\xa0\x3f\xf8\xd5\x72\xdc\x06\x52\x8c\xdb\xa2\x2c\x79\xb5\x45\x6a\x70\x17\xb2\x59\x7c\x4d\xf7\x23\xf1\x18\xb9\xed\x76\x28\xd9\x1a\xe7\x0d\xda\x2d\xdd\xa2\x63\x8c\xc7\x29\xe3\xd1\xb7\x3a\xde\xaf\x59\x91\x6b\xdb\x33\xa2\x62\x1f\xba\xc0\xf3\xe2\xc5\x21\x6d\x9b\x8f\xda\x9d\x08\xf2\x14\xc3\x60\x7b\xa8\x5d\x30\x93\x06\xc3\x5a\x8c\x06\xc3\xab\x70\xba\x34\x0a\x43\x28\xed\xdf\xa1\x0a\x1b\xfa\xd0\xa1\x34\x56\x61\x26\x50\xf1\xef\xf4\x81\x0a\x3f\xbc\x29\x43\xc7\xb3\x96\x21\x01\x01\x17\x1e\x69\x47\x86\x54\xc4\xb9\x6d\x5f\xe4\x95\x9f\x9b\xc1\x9b\x63\xf8\x87\xcc\x6f\xf6\x62\x13\xcd\xb4\x68\x26\xf5\xe9\x55\xef\xeb\x24\x69\xa4\xf2\x71\x32\x39\x5b\xe9\x5d\x88\xe0\x3c\x95\xff\xf5\x5b\x32\x4a\x0e\x15\x6e\x10\xbf\x71\x48\xa9\x28\xb9\x3e\x09\x75\x60\x86\x9b\x0e\xd4\x7e\x48\x9e\x30\x3d\xcf\x0b\x1d\x38\xe1\x82\x1d\xcd\x3b\xf9\x8e\xd9\x0a\x41\x99\x9f\xb3\x07\x28\x21\x1c\x11\xae\x95\x4b\xfd\x7a\xd9\x91\x8b\x8e\x6b\xb1\x7b\x29\xd4\x0b\xf5\x2c\x6e\xd7\xe6\xb2\x43\x73\x89\x92\xde\x36\xe6\x83\x81\x1b\xa3\xb9\x39\x4a\x55\xb6\x34\x62\x13\x4d\x09\x83\xe1\x24\xf9\x02\x57\x42\xe9\x3b\x89\xe3\xeb\x4b\xf8\x29\xfe\xf1\x23\x08\x5e\xac\x5f\x35\xde\x2b\xe3\xff\xc0\xe8\xee\xc5\xe4\x5d\x71\xd8\xad\x77\xbe\xe0\xfe\x27\xab\x13\xdd\x33\x2c\xbc\x9b\x76\xc2\x95\xbd\xe4\x32\x31\xae\xbc\x18\x0d\xff\x68\x64\xcd\x13\x26\xf9\xe1\x1d\xf2\xff\x2f\xa6\x7a\xf5\xe9\x10\xec\x34\xe0\xf8\x50\xf7\xdf\x63\x9f\xe8\x0b\xee\xdf\x00\x00\x00\xff\xff\x55\x84\x2e\xc5\xbb\x0a\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xc1\x6e\xf2\x30\x10\x84\xcf\xf6\x53\xec\xcf\xe1\x27\x48\x28\x3c\x01\x97\xb6\xdc\x2a\x4a\x81\x43\x8f\x18\x67\x29\x91\x8c\x0d\x6b\x9b\x0a\xa1\xbc\x7b\x77\x13\x22\x51\x55\xad\x7a\xb2\x3c\x5e\xcf\x7c\x3b\x93\x09\x5c\xaf\x50\xce\xcd\x01\xa1\x69\xc0\x1a\xe7\x22\xa4\x3d\x42\x4c\x81\xb0\x82\x23\x05\x8b\x55\x26\x84\xa1\xcc\xad\xcd\xd6\xe1\xca\xee\xf1\x60\x78\xbc\x14\x69\xc1\x13\xb7\xef\x45\x7f\x5f\x18\x62\x25\x21\xad\x2f\x47\x8c\xfc\x32\x82\xfe\x69\x89\x29\x93\x17\x9d\xe5\x21\x04\x0f\xd5\xb6\xd4\xbb\xec\xed\x3d\x48\x51\x6d\xe1\xed\xe5\xe9\x81\xa5\xf7\x70\x14\x37\x57\xc7\xc4\x0e\xbd\x31\x43\x52\xc6\xd6\x59\x52\x09\x93\x38\x96\x5f\xdc\xc7\x80\x44\x81\x38\x5b\xab\xb3\x21\xb9\x75\x8a\xd6\x8a\xf7\x8e\x27\x07\xa7\x8c\x74\xd1\xca\x06\xcf\xee\x2c\xc4\x44\x30\x85\xcd\x6a\xf6\x3c\x7b\x5c\xc3\xdf\x36\xb6\xc1\x9d\x0d\xb7\x76\x0f\x37\x18\x08\xda\xa6\x0b\xa2\xec\xfb\x20\xc1\x60\x56\xf8\x09\x59\x2b\x81\x9c\x4a\x27\xaf\xf2\x63\x19\x3e\x8a\x0e\xeb\x97\x26\x76\x9c\xde\x56\x51\xae\xac\xf1\xc5\x7f\x76\x1e\x69\x55\xef\xda\x85\xff\x4d\xc1\xd7\x4e\x2a\x50\xd4\x26\x75\xd9\xac\x75\xf1\xf3\xda\x7d\x2f\x4d\xab\x86\xd1\x6f\xf3\x7c\x8c\xc5\x43\xb3\xf6\x19\x00\x00\xff\xff\x50\x0d\x9b\xaa\x2f\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\x4e\xc3\x30\x0c\x06\xe0\xf3\xf2\x14\xff\x71\x43\x53\xfa\x0e\x08\xce\x13\xb0\x03\xd7\xac\x75\x49\x44\x1b\x17\xc7\xd5\x36\x55\x7d\x77\x92\x02\x95\x86\xb4\xab\x7f\x7f\xf6\x5f\x55\x78\x3f\x3c\x3d\x22\x24\xa8\x27\xd4\xdc\xf7\x1c\x11\xa2\x92\xb4\xae\x26\xb4\x2c\x68\x9c\xba\x93\x4b\x04\x1e\x48\x9c\x06\x8e\x65\xd9\x29\x6a\x17\x71\x22\x8c\x89\x1a\x9c\x83\x7a\x93\xaf\xe9\x75\xa0\x84\x56\xb8\xc7\x34\xc1\xbe\xd5\x9e\x7a\x87\x79\xb6\x39\x2c\xf9\xd1\xe7\x57\xc9\xf3\xd8\x65\xc3\xf2\xb9\xc0\xf5\x45\x95\xbe\x3a\x9b\xeb\xb8\xd8\xdc\xce\x8e\x17\x6b\xca\xe9\xdf\xb6\x6b\xbf\xc9\x6c\x9e\x2f\x54\x6f\x93\x4a\x88\x1f\x7b\x58\x6b\xd7\x70\x9a\x77\xd8\x16\xfc\x4a\x69\xec\x74\x0f\x12\x61\xd9\x99\xcd\xcb\x48\x72\xbd\x4f\x1e\x16\xc3\xe7\xf4\x4f\xe4\xd1\x5d\xf4\x67\xcc\x6c\x7e\x7a\x2e\xe2\x30\xe8\x4d\xd7\x92\x7e\x07\x00\x00\xff\xff\x17\xda\xf6\x85\x72\x01\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.idx.go.tpl": postgresIdxGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.idx.go.tpl": &bintree{postgresIdxGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

