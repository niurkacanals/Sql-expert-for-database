// Code generated by go-bindata.
// sources:
// templates/postgres.enum.go.tpl
// templates/postgres.idx.go.tpl
// templates/postgres.model.go.tpl
// templates/postgres.proc.go.tpl
// templates/xo_db.go.tpl
// templates/xo_package.go.tpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgresEnumGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x3f\x6f\xeb\x20\x14\xc5\x67\xee\xa7\xb8\xf2\x12\x13\x25\x8e\xde\xf2\x86\x27\xbd\xa9\xea\xd8\x2c\x4d\xbb\x54\x1d\xa8\x83\x13\x24\x1b\x57\xfc\x49\x1a\x59\xfe\xee\x05\x83\x25\x88\x92\x2c\x16\xbe\x70\xee\xfd\x9d\x03\x9b\x0d\x0e\x03\x56\xbb\xcb\x37\xc7\x71\x44\xa1\xd1\x1c\x39\x2e\xe6\xda\x96\x19\x71\xf2\x3b\x0b\xe4\xd2\x76\x68\x5c\xad\x02\xff\xcd\x64\x56\x48\xf3\xe7\x2f\x40\xdd\x4b\x6d\xb0\x84\x61\x58\xa3\x62\xf2\xc0\xb1\x7a\x67\xad\xe5\xda\x1d\x02\x12\x67\x3d\xbb\x46\x51\x78\x63\x74\x5a\x6a\x7a\x15\x50\xa6\x26\x9e\xa2\x02\xf2\xa0\x45\xba\xfe\x3f\xfd\x3d\x79\xa0\x59\xed\xb0\x9c\x8b\x3d\xae\xdd\x92\x02\x38\x9c\x57\xa3\x84\x3c\xa0\xe2\xc6\x2a\x19\xe6\xeb\x50\x3a\x4d\x9a\xbe\xb9\x66\xaa\xa0\xb1\xb2\xc6\xb2\x4e\x8b\x34\x36\x2a\xe9\x2c\x1f\x80\x9c\x98\x42\x1d\xff\x01\x88\x3e\x0b\x53\x1f\xd1\xe9\xee\xa4\x53\x33\xcd\x1f\xe4\xf3\x0f\x08\xd1\xce\x55\x91\xe6\x51\xa4\x96\xc8\xe8\xc6\x04\x2b\xa8\x61\x9c\x0c\xbe\x30\xa5\x8f\xac\xdd\xf1\x1f\x83\x5d\x58\xeb\xfc\xc2\xa5\xe9\xd1\xb8\xed\x3b\xc6\x92\x06\xce\x5d\xf9\xf1\xf9\x75\x31\x7c\x85\x5c\xa9\x5e\x51\x6f\x33\x0e\x0c\x1b\x65\x5d\xcd\x49\xd0\x15\x4a\xd1\x46\x8c\x37\xd9\x25\x20\x56\xde\x44\x69\x54\xdf\x5d\xa1\x2c\x33\x96\xac\x4b\xe9\x4f\xc6\xb1\x34\xf0\x78\x9c\x18\x73\x88\x7d\x3a\x43\xc9\xc3\xc4\xf3\x3c\x7d\xca\xcb\x3a\x3e\x9e\xdb\x17\x91\x45\xbe\xe7\x0d\xb3\xad\xf1\xb2\x18\xc4\x44\xa2\xab\x2d\x3f\x97\x85\x90\xee\x19\x89\x7d\xea\xb2\xa0\xd9\x3d\xc5\x88\x7e\x03\x00\x00\xff\xff\x1e\xee\xeb\xff\x86\x03\x00\x00"

func postgresEnumGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresEnumGoTpl,
		"postgres.enum.go.tpl",
	)
}

func postgresEnumGoTpl() (*asset, error) {
	bytes, err := postgresEnumGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.enum.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresIdxGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\x5f\x6f\xda\x30\x10\x7f\x8e\x3f\xc5\x0d\xa1\x2a\xd9\x50\xd0\x5e\x2b\xe5\x61\xa5\x54\xab\xd4\xd1\x0d\x3a\x6d\xd2\x34\x0d\x93\x38\x34\x9a\xb1\xc1\x4e\x5a\x10\xe2\xbb\xef\xce\x4e\x58\x50\xa9\x94\xa7\x3d\xed\x2d\xbe\xdc\xf9\x7e\xfe\xfd\xd9\xef\xa1\xc8\x21\xbe\xb5\x5f\x55\xb1\xa9\x04\x1c\x0e\x6c\x38\x04\xac\xc6\x0f\xbb\x35\x1d\xaf\x76\xbe\x65\x59\x42\x28\x85\x82\xf8\xa6\x10\x32\xb3\x11\xbc\xc7\x9f\xd4\x37\xe1\x2b\xe1\x3f\x85\xb4\xf5\x97\xe1\x6a\x29\x9a\xd6\xba\xcf\x1d\xea\x46\x75\xf2\x01\x46\x94\xa6\x10\x4f\xc2\x02\x07\xa3\x9f\x21\x37\x7a\xe5\x31\xf0\x85\x14\xb3\xf4\x51\xac\x38\xf6\xc5\xc7\x52\xbd\x13\x38\x4d\xb4\xc0\xc6\x2c\xaf\x54\xfa\x8f\xe1\x87\xd9\x02\xbe\xdf\x5f\x5f\x61\x61\xa9\xd7\xdc\xf0\x95\x2c\x6c\x79\x1c\x2f\x8d\xa3\x35\x82\xf0\x6d\x0b\xd7\x00\x84\x31\xda\x44\xb0\x67\xc1\x13\x37\x74\xf2\x15\xc6\x02\x14\xc0\x6e\x24\xa0\x1c\x66\xc7\x82\x54\x2b\xbc\x0d\x0b\xb6\x34\x90\xc0\x7c\x36\xbe\x1b\x8f\x1e\x60\x0e\xef\x58\x10\xcc\xf1\xca\x54\x4b\x85\x8f\xb0\x35\x37\xcd\xde\x5e\x8f\x18\xaa\xdb\x6e\xa6\xf7\x9f\x3a\x31\x5a\xf7\x7f\xfb\x38\x9e\x8e\xe1\x48\x45\xbf\x18\x40\x3f\x87\xcb\xe4\x94\x14\xe4\xb5\x5f\xd0\xd4\x87\xc9\x35\xb4\x89\xe9\xe7\xf1\x48\xcb\x6a\xa5\x9a\x6b\x13\xe8\x53\x3f\x6a\xe3\x06\x8e\xbd\x73\xff\x5c\x53\xa9\xe6\xb9\xe8\x05\xda\xd3\xa2\x6a\x7f\x60\x01\xd1\x93\x40\xb6\x88\xbf\x50\xd7\x54\x3f\x87\x9e\x90\x57\x38\xcf\xb9\xd7\x32\x8a\x67\x29\x57\x21\x76\xe5\xf4\xe3\x15\x9a\x7a\x17\xb8\x94\xd8\x8a\x58\x80\x4f\xa2\x5d\x6f\x12\x50\x85\x24\x71\x08\x50\x65\x14\x1d\x9d\x66\x2c\x38\xd4\x12\x21\x50\xb1\xc5\xad\x42\xa5\xc2\xe1\x8e\x7f\xb9\xb3\x45\xa4\x24\x3a\x63\xcd\x2c\xdd\x3f\xa0\x1b\xd8\x81\xfd\x35\x5a\x13\xb4\xcf\xb2\x32\x5c\x36\x5e\x6d\x0c\xd9\x0a\x05\x46\xc2\x76\xce\x04\x82\xe4\xe9\xe3\x99\x64\x0c\x87\xb4\xf0\x4e\xeb\xdf\x16\xaa\x35\x54\xb6\x50\x4b\xd7\x71\xab\x32\xb1\xad\xa7\x5b\x01\x3a\x0f\xab\xb3\xd9\x7f\xfc\xfc\x6f\xf7\x0e\x76\xdf\x38\x66\x68\x55\x63\xee\x8e\xce\xee\x68\xd5\x20\x13\xb9\x30\xb0\x89\x47\x52\x5b\x11\x46\x1e\x80\xd4\x3c\x43\x83\xd9\x4a\x96\x96\x5c\x6a\x09\xc0\xa9\x62\x94\xba\x5c\xd3\xe4\x44\x6c\xcb\xd0\x29\x17\xbc\x88\x26\xd6\x82\xda\xf5\x97\x4e\xfc\x01\x56\x28\x20\x4e\x55\xcc\x1e\x7e\xf9\xec\x6e\x3a\x46\xb1\x09\xe2\x99\xe7\xbd\x7c\x9f\x5f\x45\xf8\x13\xe0\xeb\x35\x92\x1c\xe2\x61\x00\x17\x65\xe4\x73\x5a\x4f\xb8\xa2\xcf\x1f\x3b\x8a\xc1\xd8\x9f\x00\x00\x00\xff\xff\x4c\xd8\x86\xd3\xfd\x06\x00\x00"

func postgresIdxGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresIdxGoTpl,
		"postgres.idx.go.tpl",
	)
}

func postgresIdxGoTpl() (*asset, error) {
	bytes, err := postgresIdxGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.idx.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresModelGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdf\x73\xe2\x36\x10\x7e\xb6\xff\x8a\x3d\xa6\xd3\x9a\x1e\xe7\x9b\x3e\xf4\xa1\x37\xc3\xc3\xb5\xf8\xae\x4c\x53\x48\xf8\xd1\xf6\x2d\x11\xf6\x92\x78\x6a\x24\x22\xc9\x24\x0c\x93\xff\xbd\x5a\x49\x36\x10\x08\x71\x98\xde\x0b\xd8\xf2\xee\xb7\x9f\x56\xdf\xb7\xf6\xc7\x8f\xb0\xd9\x40\x3c\x59\x2f\x11\x9e\x9e\x40\xe2\x52\xa2\x42\xae\x15\x30\x90\xe2\x01\xe6\x52\x2c\x5c\x04\x9b\x15\x38\x4e\xef\x70\xc1\x4c\x60\x5c\x2f\x0d\xd8\x82\x32\xe3\x50\x13\xc4\x2e\x96\xd2\xb2\x4c\x35\x6c\xc2\xcd\xe6\x03\x48\xc6\x6f\x11\xe2\x2f\x39\x16\x99\x32\x4f\xc3\x80\x42\xed\x2d\xc5\x9a\x1b\x89\x16\x21\xfe\x2a\x3c\x80\x59\xcb\xe7\x54\xe5\x96\x22\x6e\x5c\x45\xba\xa6\x4b\xe4\x36\xcf\xd3\xff\x4d\x14\xe5\x82\x7b\x2a\xb6\x9e\x7b\x6e\x2f\x09\xe4\x52\xe6\x0b\x26\xd7\x7f\xe0\xba\x2a\x19\x86\x81\x49\x7e\x14\x30\xb7\x94\xc2\xe0\x1a\x1f\x73\xa5\x55\x07\xae\x33\x2c\x50\x63\x06\x33\x21\x8a\xb0\xae\x15\x9a\x14\x4f\xe9\x08\x9a\xc1\x4a\x6c\x3e\x64\x26\x57\x2e\x72\x8e\x8a\x62\xf5\xdd\x7e\x53\x5c\x11\xc8\xb9\x7d\x92\x31\xcd\x66\x4c\x61\x1c\xce\x4b\x9e\x42\xa4\xe1\xc7\x9d\xe0\xb6\x87\x8c\xda\x96\x8a\xe9\x64\x60\x9a\x54\x4a\x93\x1b\x7b\xb6\x44\xca\x94\xee\x79\xc6\x4b\x29\x56\x79\x46\x95\xf9\x5c\xc8\x05\xd3\xb9\xe0\xc7\x58\xdc\x31\x05\x33\x44\x0e\xd5\x56\xed\x31\x37\x61\xe4\x2b\x1d\xa5\xe4\xc1\x3c\xa7\x3e\x57\x28\xb5\x61\x42\x7f\xea\x80\x82\x16\x8d\xea\x39\x94\x28\x9b\xc1\x3f\xc3\xde\xaf\x6d\x40\x29\x85\xa4\xb2\x2b\x26\xe9\xc6\x2d\xb8\xc3\x34\x1b\x65\x85\x44\x96\xad\x5d\x9b\x3b\x30\x63\x79\x11\x06\xd4\x80\xaa\x61\x94\x5a\x51\xb6\xa9\x2a\x1e\xe0\x43\xd4\x72\x34\x61\x6e\x12\x30\xfb\xb4\x8f\xa3\x5a\xed\x30\xf0\x82\x51\xf7\x05\xdc\x97\x28\xd7\x61\x90\x0a\xae\x34\x2d\x18\xa1\x43\x17\x6e\xfa\x83\x71\x32\x9a\x40\x7f\x30\x19\x36\x71\x0c\x44\x37\xf0\xde\x90\x21\x35\xa7\xa2\xe0\x66\x55\xd5\x06\x39\x22\x31\x1f\xdd\x86\xbf\x3e\x5f\x4c\x93\xf1\xb3\xf4\x15\x2b\x9a\x65\x8f\x92\xc9\x74\x34\xe8\x0f\xbe\x5a\x8e\xdb\x40\x8a\x71\x5b\x94\x25\xaf\xb6\x48\x0d\xee\x42\x36\x8b\xaf\xe8\x7e\x24\x1e\x22\xb7\xdd\x0e\x25\x5b\xe3\xbc\x42\xbb\xa5\x5b\x74\x8c\xf1\x38\x65\x3c\xfa\x5e\xc7\xfb\x35\x2b\x72\x6d\x7b\x46\x54\xec\x5d\x17\x78\x5e\x3c\x3b\xa4\x6d\xf3\x51\xbb\x13\x41\x9e\x62\x18\x6c\x0f\xb5\x0b\x66\xd6\x60\x58\x8b\xd1\x60\x78\x15\x4e\x97\x46\x61\x08\xa5\xfd\x3b\x54\x61\x43\x1f\x3a\x94\xc6\x2a\xcc\x04\x2a\xfe\x83\x3e\x50\xe1\xbb\x57\x65\xe8\x78\xd6\x32\x24\x20\xe0\xc2\x23\xed\xc8\x90\x8a\x38\xb7\xed\x8b\xbc\xf2\x73\x33\x78\x73\x0c\xff\x92\xf9\xcd\x5e\x6c\xa2\x99\x16\xcd\xa4\x3e\xbd\xec\x7d\x9e\x24\x8d\x54\x3e\x4e\x26\x67\x2b\xbd\x0b\x11\x9c\xa7\xf2\xbf\x7f\x4f\x46\xc9\xa1\xc2\x0d\xe2\x77\x0e\x29\x15\x25\xd7\x27\xa1\x0e\xcc\x70\xdd\x81\xda\x0f\xc9\x23\xa6\xe7\x79\xa1\x03\x27\x5c\xb0\xa3\x79\x27\xdf\x31\x5b\x21\x28\xf3\x73\xf6\x00\x25\x84\x23\xc2\xb5\x72\xa9\x5f\x2f\x3b\x72\xd1\x71\x2d\x76\x2f\x85\xfa\x41\x3d\x8b\xdb\xb5\xb9\xec\xd0\x5c\xa2\xa4\xb7\x8d\xf9\x64\xe0\xc6\x68\x6e\x8e\x52\x95\x2d\x8d\xd8\x44\x53\xc2\x60\x38\x49\x3e\xc1\xa5\x50\xfa\x56\xe2\xf8\xea\x02\x7e\x89\x7f\x7e\x0f\x82\x17\xeb\x17\x8d\xf7\xc2\xf8\x3f\x30\xba\x7b\x31\x79\x57\x1c\x76\xeb\x8d\x2f\xb8\x6f\x64\x75\xa2\x7b\x86\x85\x77\xd3\x4e\xb8\xb2\x97\x5c\x24\xc6\x95\x5f\x46\xc3\x3f\x1b\x59\xf3\x84\x49\x7e\x7a\x83\xfc\xff\x8f\xa9\x5e\x7d\x3a\x04\x3b\x0d\x38\x3e\xd4\xfd\xf7\xd8\x07\xfa\x82\xfb\x2f\x00\x00\xff\xff\x01\x9e\x86\xa8\xbd\x0a\x00\x00"

func postgresModelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresModelGoTpl,
		"postgres.model.go.tpl",
	)
}

func postgresModelGoTpl() (*asset, error) {
	bytes, err := postgresModelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.model.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresProcGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x4f\x4f\xf2\x40\x10\xc6\xcf\xbb\x9f\x62\xde\xa4\x79\x29\x49\x53\xee\x26\xbd\xa8\xe8\xc5\xa0\x02\x07\x8f\x2c\xed\x20\x4d\xca\x2e\xcc\x6e\x31\xa4\xe9\x77\x77\xa6\x05\x89\x12\x8d\x9e\xda\x79\x76\xfe\xfc\x9e\x67\x34\x82\xa6\x81\xf4\xae\xb6\xf9\xc4\x6c\x10\xda\x16\x72\x53\x55\x1e\xc2\x1a\xc1\x07\x47\x58\xc0\x96\x5c\x8e\x45\x4d\x08\x03\xe9\x9d\xe5\x6b\xdc\x18\xee\x4c\xa5\x3a\x4e\xc5\xf2\xff\x64\x88\xab\x80\x34\x3f\x6c\xd1\xb3\x3a\xec\x96\x4f\x31\xd4\x64\x45\x63\x69\x00\xce\x42\xb1\x4c\xf5\x8a\x4f\x7e\xbd\x1d\x17\x4b\x78\x79\xbc\xbd\x66\x99\x8c\x7d\x45\x88\xca\x04\xa2\x00\x57\x19\xa4\xf7\xee\x62\x7d\x02\x7b\xee\x8c\x4a\xa1\x96\x11\x0c\x72\x83\xfb\xdb\x96\x4b\xb4\x45\x87\x10\x9f\x9f\x78\xc9\x27\x98\x04\x90\xc8\x11\x63\x6a\xb5\x37\x24\x55\xaf\x68\xad\x38\x19\xbf\xab\x60\x57\x23\x1d\xb4\xca\x9d\xf5\x41\x04\x1f\x08\x32\x58\xcc\xc6\x0f\xe3\x9b\x39\xfc\x98\xc7\x6f\x2c\x70\x5b\xb9\xea\x2d\x24\xf0\x01\x1d\x35\x4d\xc9\xe9\x74\xf2\xd9\xc9\xa2\xa7\xa2\xda\x9e\xa8\x84\x99\xad\xc1\xf7\x0e\xb5\x12\x4f\x99\x24\xfe\x2c\x33\x53\xf7\x16\xf7\x2e\xfe\x9e\xf1\x99\x84\x3d\x1b\x1b\xff\xe7\x9b\x43\xad\x98\x5f\x6e\xfc\xcb\xc0\x96\x95\x24\xa9\xa8\x23\xe8\xa9\x58\x3b\x81\x4d\xca\xea\x32\x7d\xad\x5a\xb6\x75\x9c\xe0\x4f\x22\x5b\x34\x6b\xef\x01\x00\x00\xff\xff\x5c\xcb\xe6\x92\x9a\x02\x00\x00"

func postgresProcGoTplBytes() ([]byte, error) {
	return bindataRead(
		_postgresProcGoTpl,
		"postgres.proc.go.tpl",
	)
}

func postgresProcGoTpl() (*asset, error) {
	bytes, err := postgresProcGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.proc.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_dbGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\x4e\xc3\x30\x0c\x06\xe0\xf3\xf2\x14\xff\x71\x43\x53\xfa\x0e\x08\xce\x13\xb0\x03\xd7\xac\x75\x49\x44\x1b\x17\xc7\xd5\x36\x55\x7d\x77\x92\x02\x95\x86\xb4\xab\x7f\x7f\xf6\x5f\x55\x78\x3f\x3c\x3d\x22\x24\xa8\x27\xd4\xdc\xf7\x1c\x11\xa2\x92\xb4\xae\x26\xb4\x2c\x68\x9c\xba\x93\x4b\x04\x1e\x48\x9c\x06\x8e\x65\xd9\x29\x6a\x17\x71\x22\x8c\x89\x1a\x9c\x83\x7a\x93\xaf\xe9\x75\xa0\x84\x56\xb8\xc7\x34\xc1\xbe\xd5\x9e\x7a\x87\x79\xb6\x39\x2c\xf9\xd1\xe7\x57\xc9\xf3\xd8\x65\xc3\xf2\xb9\xc0\xf5\x45\x95\xbe\x3a\x9b\xeb\xb8\xd8\xdc\xce\x8e\x17\x6b\xca\xe9\xdf\xb6\x6b\xbf\xc9\x6c\x9e\x2f\x54\x6f\x93\x4a\x88\x1f\x7b\x58\x6b\xd7\x70\x9a\x77\xd8\x16\xfc\x4a\x69\xec\x74\x0f\x12\x61\xd9\x99\xcd\xcb\x48\x72\xbd\x4f\x1e\x16\xc3\xe7\xf4\x4f\xe4\xd1\x5d\xf4\x67\xcc\x6c\x7e\x7a\x2e\xe2\x30\xe8\x4d\xd7\x92\x7e\x07\x00\x00\xff\xff\x17\xda\xf6\x85\x72\x01\x00\x00"

func xo_dbGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_dbGoTpl,
		"xo_db.go.tpl",
	)
}

func xo_dbGoTpl() (*asset, error) {
	bytes, err := xo_dbGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_db.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xo_packageGoTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\xb1\x0e\x82\x40\x10\x04\xd0\xda\xfd\x8a\x09\x0d\xda\x1c\xdf\xa0\xe1\x62\x6c\xc0\x28\x85\x96\x2b\xae\x42\x14\x0e\xef\xb6\x31\xe4\xfe\x5d\x88\xb1\xb3\x7b\x93\x4c\x66\xb2\x0c\x7b\xae\x1f\x7c\x17\x8c\x23\xcc\xcf\x31\xa2\x76\xbd\x72\xdb\x07\x68\x23\xd0\xf7\x20\x01\x37\xe7\x11\xea\x46\x3a\x46\x3a\xb7\x8f\x5f\xc7\x98\x1a\x1a\xfe\xae\x10\x4d\x07\x5b\x5b\xd8\xc3\xba\xb2\x39\x36\x67\x9c\x4a\x83\xbc\x44\x51\x56\xb0\xf9\xae\x32\x44\x6d\x37\x38\xaf\x58\xd2\x22\xb9\xb2\xf2\x85\x83\x64\xe1\xf5\x4c\xa6\x2c\xde\x3b\x1f\x66\x69\xdb\x49\x42\x2b\xa2\x4f\x00\x00\x00\xff\xff\xbe\x10\xa7\x7e\xb1\x00\x00\x00"

func xo_packageGoTplBytes() ([]byte, error) {
	return bindataRead(
		_xo_packageGoTpl,
		"xo_package.go.tpl",
	)
}

func xo_packageGoTpl() (*asset, error) {
	bytes, err := xo_packageGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xo_package.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres.enum.go.tpl": postgresEnumGoTpl,
	"postgres.idx.go.tpl": postgresIdxGoTpl,
	"postgres.model.go.tpl": postgresModelGoTpl,
	"postgres.proc.go.tpl": postgresProcGoTpl,
	"xo_db.go.tpl": xo_dbGoTpl,
	"xo_package.go.tpl": xo_packageGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres.enum.go.tpl": &bintree{postgresEnumGoTpl, map[string]*bintree{}},
	"postgres.idx.go.tpl": &bintree{postgresIdxGoTpl, map[string]*bintree{}},
	"postgres.model.go.tpl": &bintree{postgresModelGoTpl, map[string]*bintree{}},
	"postgres.proc.go.tpl": &bintree{postgresProcGoTpl, map[string]*bintree{}},
	"xo_db.go.tpl": &bintree{xo_dbGoTpl, map[string]*bintree{}},
	"xo_package.go.tpl": &bintree{xo_packageGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

